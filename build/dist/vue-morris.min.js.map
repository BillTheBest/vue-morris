{"version":3,"sources":["webpack:///vue-morris.min.js","webpack:///webpack/bootstrap 409e27bc92ba7da79ae9","webpack:///./src/components/Donut.vue","webpack:///Donut.vue","webpack:///./~/morris.js/morris.js","webpack:///./~/raphael/raphael.js","webpack:///./src/components/Donut.vue?6736","webpack:///./src/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__vue_exports__","__vue_options__","__vue_template__","default","options","render","staticRenderFns","_interopRequireDefault","obj","_raphael","_raphael2","window","Raphael","data","chart","computed","chartData","this","JSON","parse","chartResize","resize","watch","val","_this","$nextTick","setData","props","id","type","String","required","colors","formatter","Function","mounted","element","Morris","Donut","$","minutesSpecHelper","secondsSpecHelper","__slice","slice","__bind","fn","me","apply","arguments","__hasProp","__extends","child","parent","ctor","constructor","key","__super__","__indexOf","indexOf","item","length","jQuery","EventEmitter","on","handler","handlers","push","fire","args","_i","_len","_ref","_results","commas","num","absnum","intnum","ret","strabsnum","Math","abs","floor","toFixed","replace","toString","pad2","number","Grid","_super","resizeHandler","el","document","getElementById","Error","css","extend","gridDefaults","defaults","units","postUnits","raphael","elementWidth","elementHeight","dirty","selectFrom","init","bind","evt","left","offset","right","width","x","pageX","hitTest","min","_x","max","selectionRect","attr","pageY","top","hide","touch","originalEvent","touches","changedTouches","rangeSelect","rect","innerHeight","fill","rangeSelectColor","stroke","toBack","startRange","endRange","timeoutId","clearTimeout","setTimeout","postInit","dateFormat","axes","grid","gridLineColor","gridStrokeWidth","gridTextColor","gridTextSize","gridTextFamily","gridTextWeight","hideHover","yLabelFormat","xLabelAngle","numLines","padding","parseTime","preUnits","ymax","ymin","goals","goalStrokeWidth","goalLineColors","events","eventStrokeWidth","eventLineColors","redraw","e","idx","index","maxGoal","minGoal","row","step","total","y","ykey","yval","clear","hover","cumulative","src","label","xkey","parseDate","Date","xLabelFormat","_j","_len1","_results1","ykeys","parseFloat","sort","a","b","xmin","xmax","yboundary","autoGridLines","_ref1","_ref2","boundaryType","currentValue","boundaryOption","suggestedValue","parseInt","nlines","gmax","gmin","smag","span","unit","ymag","log","pow","ceil","_calc","bottomOffsets","gridLine","h","w","yLabelWidths","height","bottom","measureText","yAxisFormat","text","dx","dy","calc","transY","transX","drawGrid","drawGoals","drawEvents","draw","angle","tt","rotate","getBBox","remove","lineY","drawYAxisLabel","drawGridLine","color","goal","drawGoal","event","drawEvent","path","xPos","yPos","show","end","start","setSize","date","isecs","msecs","offsetmins","q","r","secs","match","getTime","getDay","setMonth","UTC","round","Hover","append","class","update","html","moveTo","content","hoverHeight","hoverWidth","parentHeight","parentWidth","innerWidth","outerWidth","outerHeight","Line","hilight","onHoverOut","onHoverMove","onGridClick","lineWidth","pointSize","lineColors","pointStrokeWidths","pointStrokeColors","pointFillColors","smooth","xLabels","xLabelMargin","calcPoints","generatePaths","_y","_ymax","concat","displayHoverForRow","hoverContentForRow","j","colorFor","labels","hoverCallback","coords","paths","createPath","drawXAxis","drawSeries","drawLabel","prevAngleMargin","prevLabelMargin","ypos","labelText","xpos","labelBox","margin","textBox","drawXAxisLabel","transform","cos","PI","sin","labelSeries","reverse","seriesPoints","_drawLineFor","_drawPointFor","circle","drawLinePoint","drawLinePath","coord","g","grads","ix","lg","prevCoord","x1","x2","y1","y2","gradients","grad","nextCoord","prevHilight","animate","pointShrinkSeries","pointGrowSeries","sidx","lineColor","lineIndex","lineWidthForSeries","pointColor","pointSizeForSeries","pointStrokeWidthForSeries","pointStrokeColorForSeries","Array","animation","dmin","dmax","pxwidth","specName","d0","ddensity","spec","t","LABEL_SPECS","AUTO_LABEL_ORDER","fmt","incr","interval","getFullYear","getMonth","getDate","getHours","getMinutes","setUTCMinutes","getUTCMinutes","getSeconds","setUTCSeconds","getUTCSeconds","decade","setFullYear","year","month","week","setDate","day","hour","30min","15min","10min","5min","minute","30sec","15sec","10sec","5sec","second","Area","areaOptions","areaDefaults","behaveLikeLine","fillOpacity","range","_k","_results2","_drawFillFor","drawFilledPath","fillForSeries","rgb2hsl","hsl","Bar","stacked","barSizeRatio","barGap","barColors","barOpacity","barRadius","calcBars","xAxisLabelTopPadding","barWidth","groupWidth","lastTop","leftPadding","numBars","size","spaceLeft","zeroPos","barSize","bars","verticalGridCondition","drawBar","verticalGridColor","verticalGridOpacity","barColor","opacity","radiusArray","maxRadius","roundedRect","select","click","backgroundColor","labelColor","C","cx","cy","last","max_value","next","seg","_len2","values","segments","DonutSegment","text1","drawEmptyDonutLabel","text2","segment","deselect","setLabels","label1","label2","inner","maxHeightBottom","maxHeightTop","maxWidth","text1bbox","text1scale","text2bbox","text2scale","fontSize","fontWeight","outer","p0","p1","sin_p0","cos_p0","sin_p1","cos_p1","is_long","calcSegment","selectedPath","calcArc","calcArcPoints","r1","r2","ix0","ix1","iy0","iy1","ox0","ox1","oy0","oy1","arc","drawDonutArc","drawDonutSegment","stroke-width","fillColor","strokeColor","hoverFunction","clickFunction","selected","root","factory","loaded","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","R","undefined","eve","first","is","array","_engine","create","splice","nu","add","f","pop","clone","res","has","repush","ii","cacher","scope","postprocessor","newf","arg","join","cache","count","shift","clrToString","hex","catmullRom2bezier","crp","z","iLen","base3","p2","p3","p4","t1","t2","bezlen","x3","y3","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","math","sqrt","getTatLen","ll","intersect","mmax","mmin","nx","ny","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","bbox1","bezierBBox","bbox2","isBBoxIntersect","l1","l2","n1","n2","dots1","dots2","xy","findDotsAtSegment","di","di1","dj","dj1","ci","cj","interPathHelper","path1","path2","_path2curve","x1m","y1m","x2m","y2m","pi","jj","pj","intr","k","kk","segment1","segment2","Matrix","x_y_w_h","S","CubicBezierAtTime","p1x","p1y","p2x","p2y","duration","sampleCurveX","ax","bx","solve","epsilon","solveCurveX","ay","by","t0","d2","Animation","anim","ms","percents","newAnim","times","toFloat","sortByNumber","runAnimation","percent","status","totalOrigin","params","isInAnim","isInAnimSet","prev","timestamp","from","to","diff","animationElements","initstatus","availableAnimAttrs","paper","customAttributes","availableAttrs","getRGB","toColour","pathes","path2curve","toPath","_","eq","equaliseTransform","real","matrix","to2","extractTransform","Str","split","separator","from2","easing","easyeasy","easing_formulas","bezierrg","curve","pipe","del","stop","callback","repeat","origin","requestAnimFrame","stopAnimation","version","paperproto","elements","ellipse","image","formatrg","doc","win","oldRaphael","was","Paper","ca","supportsTouch","DocumentTouch","E","touchMap","mousedown","mousemove","mouseup","lowerCase","toLowerCase","string","objectToString","colourRegExp","_ISURL","isnan","NaN","Infinity","-Infinity","toInt","upperCase","toUpperCase","_availableAttrs","arrow-end","arrow-start","blur","clip-rect","cursor","fill-opacity","font","font-family","font-size","font-style","font-weight","gradient","href","letter-spacing","rx","ry","stroke-dasharray","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","target","text-anchor","title","_availableAnimAttrs","commaSpaces","hsrg","hs","rg","p2s","pathCommand","tCommand","pathValues","eldata","_radial_gradient","rectPath","_rectPath","ellipsePath","getPath","_getPath","attrs","bbox","_getBBox","set","mapPath","pathi","_g","SVGAngle","implementation","hasFeature","createElement","innerHTML","firstChild","style","behavior","adj","svg","vml","_Paper","_id","isArray","atan2","rad","deg","snapTo","tolerance","rem","createUUID","uuidRegEx","uuidReplacer","random","v","setWindow","newwin","initWin","toHex","bod","trim","docum","ActiveXObject","write","close","body","createPopup","createTextRange","queryCommandValue","display","appendChild","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","rgbtoString","prepareRGB","clr","packageRGB","rgb","hsb2rgb","hsl2rgb","rgb2hsb","G","B","X","H","V","L","M","_path2string","_preload","img","cssText","onload","removeChild","onerror","colour","error","substring","charAt","red","green","blue","hsb","getColor","reset","parsePathString","pathString","pth","arr","pathClone","paramCounts","parseTransformString","TString","ps","sleep","c1x","c1y","c2x","c2y","t13","t12","t3","mx","my","alpha","curveDim","isPointInsideBBox","pathIntersection","pathIntersectionNumber","isPointInsidePath","pathBBox","_removedFactory","methodname","pathDimensions","Y","dim","bb","pathArray","pathToRelative","_pathToRelative","rel","pa","len","pathToAbsolute","_pathToAbsolute","crz","dots","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","f2","rx2","ry2","asin","df","f2old","x2old","y2old","c1","s1","c2","s2","tan","hx","hy","m1","m2","m3","m4","newres","findDotAtSegment","dot","qx","qy","attrs2","processPath","pcom","tq","T","Q","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg2","seglen","seg2len","tear","_parseDots","par","_tear","toMatrix","_tofront","_toback","_insertafter","el2","_insertbefore","transformPath","_extractTransform","tstr","tdata","sx","sy","tlen","command","absolute","inver","invert","translate","scale","dirtyT","getEmpty","_equaliseTransform","tt1","tt2","maxlength","_getContainer","container","tagName","pixelWidth","offsetWidth","pixelHeight","offsetHeight","matrixproto","norm","normalize","mag","out","fromCharCode","toFilter","scalex","shear","scaley","acos","isSimple","isSuperSimple","noRotation","toTransformString","shorter","preventDefault","returnValue","preventTouch","stopPropagation","cancelBubble","stopTouch","getEventPosition","scrollY","documentElement","scrollTop","scrollX","scrollLeft","clientX","clientY","addEvent","addEventListener","pos","_f","olde","targetTouches","removeEventListener","attachEvent","detacher","detachEvent","drag","dragMove","dragi","identifier","_drag","node","nextSibling","parentNode","opera","getElementByPoint","insertBefore","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","elproto","eventName","unbind","shape","removeData","getData","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","onDragOver","undrag","unmousedown","__set__","format","itemsArray","Set","setStart","setFinish","getSize","canvas","setViewBox","fit","getOffset","elem","box","getBoundingClientRect","ownerDocument","docElem","clientTop","clientLeft","pageYOffset","pageXOffset","elementFromPoint","so","sr","createSVGRect","hits","getIntersectionList","getById","raphaelid","getElementsByBBox","forEach","bot","thisArg","getElementsByPoint","isPointInside","rp","realPath","isWithoutTransform","removed","bboxwt","glow","offsetx","offsety","getPointAtSegmentLength","getLengthFactory","istotal","subpath","onlystart","point","sp","subpaths","getTotalLength","getPointAtLength","getSubpathsAtLength","getSubpath","ef","linear","<",">","<>","backIn","backOut","elastic","bounce","easeIn","easeOut","easeInOut","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","Now","paused","now","time","that","upto255","animateWith","onAnimation","delay","json","100","lastKey","setTime","pause","resume","items","setproto","method","insertion","tail","todel","arglen","exclude","collector","insertAfter","glowConfig","shape2","index2","registerFont","face","fonts","fontcopy","glyphs","family","prop","glyph","getFont","weight","stretch","normal","bold","lighter","bolder","RegExp","fontName","test","thefont","print","letter_spacing","line_spacing","letters","notfirst","lineHeight","shifty","descent","curr","token","str","fullfill","tokenRegex","objNotationRegex","replacer","all","quote","quotedName","isFunc","ninja","st","isLoaded","readyState","glob","current_event","comaseparator","wildcard","numsort","firstDefined","lastDefined","objtos","ar","oldstop","listeners","indexed","queue","ce","zIndex","_events","nes","names","es","sep","exist","nt","subname","cur","nts","off","funcs","once","xlink","markers","block","classic","diamond","open","oval","markerCounter","setAttributeNS","setAttribute","createElementNS","webkitTapHighlightColor","addGradientFill","fx","fy","SVG","_fx","_fy","dir","isNaN","vector","defs","gradientTransform","stop-color","stop-opacity","isFinite","fillurl","isIE9or10","mode","documentMode","location","locationString","protocol","host","pathname","search","updatePosition","pattern","patternTransform","addArrow","isEnd","refX","se","arrows","endPath","endMarker","startPath","startMarker","pathId","markerId","use","marker","getElementsByTagName","markerHeight","markerWidth","orient","refY","xlink:href","delta","startdx","enddx","dasharray","-",".","-.","-..",". ","- ","--","- .","--.","--..","addDashes","butt","square","dashes","setFillAndStroke","vis","visibility","att","nodeValue","createTextNode","pn","hl","clip","rc","clip-path","getAttribute","startString","endString","isURL","ig","patternUnits","stops","cssrule","tuneText","leading","tspan","texts","tspans","dif","getRealNode","Element","guid","sw","containerStyle","canvasHidden","parentElement","clientWidth","clientHeight","def","subkey","toFront","afterNode","beforeNode","fltr","stdDeviation","_blur","filter","removeAttribute","preserveAspectRatio","_viewBox","con","isFloating","cnvs","xmlns","xmlns:xlink","_left","_top","renderfix","vb","paperSize","aspectRatio","_vbSize","viewBox","getScreenCTM","createSVGMatrix","desc","fillString","map","Z","bites","blurregexp","cssDot","zoom","pathTypes","ovalTypes","path2vml","vals","isMove","compensation","setCoords","fillpos","flip","kx","ky","coordsize","rotation","coordorigin","fillsize","position","newpath","isOval","div","clipRect","dstyle","textpath","textpathStyle","fontFamily","fontStyle","newfill","createNode","newstroke","joinstyle","miterlimit","endcap","dashstyle","brect","W","dirtyattrs","dd","bbx","fxfy","color2","clrs","focus","focussize","focusposition","_oid","oldt","vbs","_viewBoxShift","vbt","skew","isGrad","isPatt","bbt","auxGetBBox","runtimeStyle","Path","textpathok","cs","styleSheets","createStyleSheet","addRule","namespaces","rvml","_vm","_h","$createElement","_c","_self","_Donut","_Donut2","VueMorris"],"mappings":"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","file":"vue-morris.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 5);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(1)\n\n/* template */\nvar __vue_template__ = __webpack_require__(4)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _raphael = __webpack_require__(3);\n\nvar _raphael2 = _interopRequireDefault(_raphael);\n\n__webpack_require__(2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nwindow.Raphael = _raphael2.default;\nexports.default = {\n  name: 'donut',\n\n  data: function data() {\n    return {\n      chart: null\n    };\n  },\n\n\n  computed: {\n    chartData: function chartData() {\n      if (typeof this.data === 'string') {\n        return JSON.parse(this.data);\n      }\n      return this.data;\n    },\n    chartResize: function chartResize() {\n      if (typeof this.resize === 'string') {\n        return this.resize === 'true';\n      }\n      return false;\n    }\n  },\n\n  watch: {\n    data: function data(val) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.chart.setData(_this.data);\n      });\n    }\n  },\n\n  props: {\n    id: { type: String, required: true },\n    data: { required: true },\n    colors: { required: false },\n    formatter: { type: Function, required: false },\n    resize: { required: false }\n  },\n\n  mounted: function mounted() {\n    var options = {\n      element: this.id,\n      data: this.chartData,\n      resize: this.chartResize\n    };\n\n    if (this.colors) {\n      options.colors = this.colors;\n    }\n\n    if (this.formatter) {\n      options.formatter = this.formatter;\n    }\n\n    this.chart = Morris.Donut(options);\n  }\n};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n/* @license\nmorris.js v0.5.0\nCopyright 2014 Olly Smith All rights reserved.\nLicensed under the BSD-2-Clause License.\n*/\n\n\n(function() {\n  var $, Morris, minutesSpecHelper, secondsSpecHelper,\n    __slice = [].slice,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  Morris = window.Morris = {};\n\n  $ = jQuery;\n\n  Morris.EventEmitter = (function() {\n    function EventEmitter() {}\n\n    EventEmitter.prototype.on = function(name, handler) {\n      if (this.handlers == null) {\n        this.handlers = {};\n      }\n      if (this.handlers[name] == null) {\n        this.handlers[name] = [];\n      }\n      this.handlers[name].push(handler);\n      return this;\n    };\n\n    EventEmitter.prototype.fire = function() {\n      var args, handler, name, _i, _len, _ref, _results;\n      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if ((this.handlers != null) && (this.handlers[name] != null)) {\n        _ref = this.handlers[name];\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          handler = _ref[_i];\n          _results.push(handler.apply(null, args));\n        }\n        return _results;\n      }\n    };\n\n    return EventEmitter;\n\n  })();\n\n  Morris.commas = function(num) {\n    var absnum, intnum, ret, strabsnum;\n    if (num != null) {\n      ret = num < 0 ? \"-\" : \"\";\n      absnum = Math.abs(num);\n      intnum = Math.floor(absnum).toFixed(0);\n      ret += intnum.replace(/(?=(?:\\d{3})+$)(?!^)/g, ',');\n      strabsnum = absnum.toString();\n      if (strabsnum.length > intnum.length) {\n        ret += strabsnum.slice(intnum.length);\n      }\n      return ret;\n    } else {\n      return '-';\n    }\n  };\n\n  Morris.pad2 = function(number) {\n    return (number < 10 ? '0' : '') + number;\n  };\n\n  Morris.Grid = (function(_super) {\n    __extends(Grid, _super);\n\n    function Grid(options) {\n      this.resizeHandler = __bind(this.resizeHandler, this);\n      var _this = this;\n      if (typeof options.element === 'string') {\n        this.el = $(document.getElementById(options.element));\n      } else {\n        this.el = $(options.element);\n      }\n      if ((this.el == null) || this.el.length === 0) {\n        throw new Error(\"Graph container element not found\");\n      }\n      if (this.el.css('position') === 'static') {\n        this.el.css('position', 'relative');\n      }\n      this.options = $.extend({}, this.gridDefaults, this.defaults || {}, options);\n      if (typeof this.options.units === 'string') {\n        this.options.postUnits = options.units;\n      }\n      this.raphael = new Raphael(this.el[0]);\n      this.elementWidth = null;\n      this.elementHeight = null;\n      this.dirty = false;\n      this.selectFrom = null;\n      if (this.init) {\n        this.init();\n      }\n      this.setData(this.options.data);\n      this.el.bind('mousemove', function(evt) {\n        var left, offset, right, width, x;\n        offset = _this.el.offset();\n        x = evt.pageX - offset.left;\n        if (_this.selectFrom) {\n          left = _this.data[_this.hitTest(Math.min(x, _this.selectFrom))]._x;\n          right = _this.data[_this.hitTest(Math.max(x, _this.selectFrom))]._x;\n          width = right - left;\n          return _this.selectionRect.attr({\n            x: left,\n            width: width\n          });\n        } else {\n          return _this.fire('hovermove', x, evt.pageY - offset.top);\n        }\n      });\n      this.el.bind('mouseleave', function(evt) {\n        if (_this.selectFrom) {\n          _this.selectionRect.hide();\n          _this.selectFrom = null;\n        }\n        return _this.fire('hoverout');\n      });\n      this.el.bind('touchstart touchmove touchend', function(evt) {\n        var offset, touch;\n        touch = evt.originalEvent.touches[0] || evt.originalEvent.changedTouches[0];\n        offset = _this.el.offset();\n        return _this.fire('hovermove', touch.pageX - offset.left, touch.pageY - offset.top);\n      });\n      this.el.bind('click', function(evt) {\n        var offset;\n        offset = _this.el.offset();\n        return _this.fire('gridclick', evt.pageX - offset.left, evt.pageY - offset.top);\n      });\n      if (this.options.rangeSelect) {\n        this.selectionRect = this.raphael.rect(0, 0, 0, this.el.innerHeight()).attr({\n          fill: this.options.rangeSelectColor,\n          stroke: false\n        }).toBack().hide();\n        this.el.bind('mousedown', function(evt) {\n          var offset;\n          offset = _this.el.offset();\n          return _this.startRange(evt.pageX - offset.left);\n        });\n        this.el.bind('mouseup', function(evt) {\n          var offset;\n          offset = _this.el.offset();\n          _this.endRange(evt.pageX - offset.left);\n          return _this.fire('hovermove', evt.pageX - offset.left, evt.pageY - offset.top);\n        });\n      }\n      if (this.options.resize) {\n        $(window).bind('resize', function(evt) {\n          if (_this.timeoutId != null) {\n            window.clearTimeout(_this.timeoutId);\n          }\n          return _this.timeoutId = window.setTimeout(_this.resizeHandler, 100);\n        });\n      }\n      this.el.css('-webkit-tap-highlight-color', 'rgba(0,0,0,0)');\n      if (this.postInit) {\n        this.postInit();\n      }\n    }\n\n    Grid.prototype.gridDefaults = {\n      dateFormat: null,\n      axes: true,\n      grid: true,\n      gridLineColor: '#aaa',\n      gridStrokeWidth: 0.5,\n      gridTextColor: '#888',\n      gridTextSize: 12,\n      gridTextFamily: 'sans-serif',\n      gridTextWeight: 'normal',\n      hideHover: false,\n      yLabelFormat: null,\n      xLabelAngle: 0,\n      numLines: 5,\n      padding: 25,\n      parseTime: true,\n      postUnits: '',\n      preUnits: '',\n      ymax: 'auto',\n      ymin: 'auto 0',\n      goals: [],\n      goalStrokeWidth: 1.0,\n      goalLineColors: ['#666633', '#999966', '#cc6666', '#663333'],\n      events: [],\n      eventStrokeWidth: 1.0,\n      eventLineColors: ['#005a04', '#ccffbb', '#3a5f0b', '#005502'],\n      rangeSelect: null,\n      rangeSelectColor: '#eef',\n      resize: false\n    };\n\n    Grid.prototype.setData = function(data, redraw) {\n      var e, idx, index, maxGoal, minGoal, ret, row, step, total, y, ykey, ymax, ymin, yval, _ref;\n      if (redraw == null) {\n        redraw = true;\n      }\n      this.options.data = data;\n      if ((data == null) || data.length === 0) {\n        this.data = [];\n        this.raphael.clear();\n        if (this.hover != null) {\n          this.hover.hide();\n        }\n        return;\n      }\n      ymax = this.cumulative ? 0 : null;\n      ymin = this.cumulative ? 0 : null;\n      if (this.options.goals.length > 0) {\n        minGoal = Math.min.apply(Math, this.options.goals);\n        maxGoal = Math.max.apply(Math, this.options.goals);\n        ymin = ymin != null ? Math.min(ymin, minGoal) : minGoal;\n        ymax = ymax != null ? Math.max(ymax, maxGoal) : maxGoal;\n      }\n      this.data = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {\n          row = data[index];\n          ret = {\n            src: row\n          };\n          ret.label = row[this.options.xkey];\n          if (this.options.parseTime) {\n            ret.x = Morris.parseDate(ret.label);\n            if (this.options.dateFormat) {\n              ret.label = this.options.dateFormat(ret.x);\n            } else if (typeof ret.label === 'number') {\n              ret.label = new Date(ret.label).toString();\n            }\n          } else {\n            ret.x = index;\n            if (this.options.xLabelFormat) {\n              ret.label = this.options.xLabelFormat(ret);\n            }\n          }\n          total = 0;\n          ret.y = (function() {\n            var _j, _len1, _ref, _results1;\n            _ref = this.options.ykeys;\n            _results1 = [];\n            for (idx = _j = 0, _len1 = _ref.length; _j < _len1; idx = ++_j) {\n              ykey = _ref[idx];\n              yval = row[ykey];\n              if (typeof yval === 'string') {\n                yval = parseFloat(yval);\n              }\n              if ((yval != null) && typeof yval !== 'number') {\n                yval = null;\n              }\n              if (yval != null) {\n                if (this.cumulative) {\n                  total += yval;\n                } else {\n                  if (ymax != null) {\n                    ymax = Math.max(yval, ymax);\n                    ymin = Math.min(yval, ymin);\n                  } else {\n                    ymax = ymin = yval;\n                  }\n                }\n              }\n              if (this.cumulative && (total != null)) {\n                ymax = Math.max(total, ymax);\n                ymin = Math.min(total, ymin);\n              }\n              _results1.push(yval);\n            }\n            return _results1;\n          }).call(this);\n          _results.push(ret);\n        }\n        return _results;\n      }).call(this);\n      if (this.options.parseTime) {\n        this.data = this.data.sort(function(a, b) {\n          return (a.x > b.x) - (b.x > a.x);\n        });\n      }\n      this.xmin = this.data[0].x;\n      this.xmax = this.data[this.data.length - 1].x;\n      this.events = [];\n      if (this.options.events.length > 0) {\n        if (this.options.parseTime) {\n          this.events = (function() {\n            var _i, _len, _ref, _results;\n            _ref = this.options.events;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              e = _ref[_i];\n              _results.push(Morris.parseDate(e));\n            }\n            return _results;\n          }).call(this);\n        } else {\n          this.events = this.options.events;\n        }\n        this.xmax = Math.max(this.xmax, Math.max.apply(Math, this.events));\n        this.xmin = Math.min(this.xmin, Math.min.apply(Math, this.events));\n      }\n      if (this.xmin === this.xmax) {\n        this.xmin -= 1;\n        this.xmax += 1;\n      }\n      this.ymin = this.yboundary('min', ymin);\n      this.ymax = this.yboundary('max', ymax);\n      if (this.ymin === this.ymax) {\n        if (ymin) {\n          this.ymin -= 1;\n        }\n        this.ymax += 1;\n      }\n      if (((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') || this.options.grid === true) {\n        if (this.options.ymax === this.gridDefaults.ymax && this.options.ymin === this.gridDefaults.ymin) {\n          this.grid = this.autoGridLines(this.ymin, this.ymax, this.options.numLines);\n          this.ymin = Math.min(this.ymin, this.grid[0]);\n          this.ymax = Math.max(this.ymax, this.grid[this.grid.length - 1]);\n        } else {\n          step = (this.ymax - this.ymin) / (this.options.numLines - 1);\n          this.grid = (function() {\n            var _i, _ref1, _ref2, _results;\n            _results = [];\n            for (y = _i = _ref1 = this.ymin, _ref2 = this.ymax; step > 0 ? _i <= _ref2 : _i >= _ref2; y = _i += step) {\n              _results.push(y);\n            }\n            return _results;\n          }).call(this);\n        }\n      }\n      this.dirty = true;\n      if (redraw) {\n        return this.redraw();\n      }\n    };\n\n    Grid.prototype.yboundary = function(boundaryType, currentValue) {\n      var boundaryOption, suggestedValue;\n      boundaryOption = this.options[\"y\" + boundaryType];\n      if (typeof boundaryOption === 'string') {\n        if (boundaryOption.slice(0, 4) === 'auto') {\n          if (boundaryOption.length > 5) {\n            suggestedValue = parseInt(boundaryOption.slice(5), 10);\n            if (currentValue == null) {\n              return suggestedValue;\n            }\n            return Math[boundaryType](currentValue, suggestedValue);\n          } else {\n            if (currentValue != null) {\n              return currentValue;\n            } else {\n              return 0;\n            }\n          }\n        } else {\n          return parseInt(boundaryOption, 10);\n        }\n      } else {\n        return boundaryOption;\n      }\n    };\n\n    Grid.prototype.autoGridLines = function(ymin, ymax, nlines) {\n      var gmax, gmin, grid, smag, span, step, unit, y, ymag;\n      span = ymax - ymin;\n      ymag = Math.floor(Math.log(span) / Math.log(10));\n      unit = Math.pow(10, ymag);\n      gmin = Math.floor(ymin / unit) * unit;\n      gmax = Math.ceil(ymax / unit) * unit;\n      step = (gmax - gmin) / (nlines - 1);\n      if (unit === 1 && step > 1 && Math.ceil(step) !== step) {\n        step = Math.ceil(step);\n        gmax = gmin + step * (nlines - 1);\n      }\n      if (gmin < 0 && gmax > 0) {\n        gmin = Math.floor(ymin / step) * step;\n        gmax = Math.ceil(ymax / step) * step;\n      }\n      if (step < 1) {\n        smag = Math.floor(Math.log(step) / Math.log(10));\n        grid = (function() {\n          var _i, _results;\n          _results = [];\n          for (y = _i = gmin; step > 0 ? _i <= gmax : _i >= gmax; y = _i += step) {\n            _results.push(parseFloat(y.toFixed(1 - smag)));\n          }\n          return _results;\n        })();\n      } else {\n        grid = (function() {\n          var _i, _results;\n          _results = [];\n          for (y = _i = gmin; step > 0 ? _i <= gmax : _i >= gmax; y = _i += step) {\n            _results.push(y);\n          }\n          return _results;\n        })();\n      }\n      return grid;\n    };\n\n    Grid.prototype._calc = function() {\n      var bottomOffsets, gridLine, h, i, w, yLabelWidths, _ref, _ref1;\n      w = this.el.width();\n      h = this.el.height();\n      if (this.elementWidth !== w || this.elementHeight !== h || this.dirty) {\n        this.elementWidth = w;\n        this.elementHeight = h;\n        this.dirty = false;\n        this.left = this.options.padding;\n        this.right = this.elementWidth - this.options.padding;\n        this.top = this.options.padding;\n        this.bottom = this.elementHeight - this.options.padding;\n        if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') {\n          yLabelWidths = (function() {\n            var _i, _len, _ref1, _results;\n            _ref1 = this.grid;\n            _results = [];\n            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n              gridLine = _ref1[_i];\n              _results.push(this.measureText(this.yAxisFormat(gridLine)).width);\n            }\n            return _results;\n          }).call(this);\n          this.left += Math.max.apply(Math, yLabelWidths);\n        }\n        if ((_ref1 = this.options.axes) === true || _ref1 === 'both' || _ref1 === 'x') {\n          bottomOffsets = (function() {\n            var _i, _ref2, _results;\n            _results = [];\n            for (i = _i = 0, _ref2 = this.data.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {\n              _results.push(this.measureText(this.data[i].text, -this.options.xLabelAngle).height);\n            }\n            return _results;\n          }).call(this);\n          this.bottom -= Math.max.apply(Math, bottomOffsets);\n        }\n        this.width = Math.max(1, this.right - this.left);\n        this.height = Math.max(1, this.bottom - this.top);\n        this.dx = this.width / (this.xmax - this.xmin);\n        this.dy = this.height / (this.ymax - this.ymin);\n        if (this.calc) {\n          return this.calc();\n        }\n      }\n    };\n\n    Grid.prototype.transY = function(y) {\n      return this.bottom - (y - this.ymin) * this.dy;\n    };\n\n    Grid.prototype.transX = function(x) {\n      if (this.data.length === 1) {\n        return (this.left + this.right) / 2;\n      } else {\n        return this.left + (x - this.xmin) * this.dx;\n      }\n    };\n\n    Grid.prototype.redraw = function() {\n      this.raphael.clear();\n      this._calc();\n      this.drawGrid();\n      this.drawGoals();\n      this.drawEvents();\n      if (this.draw) {\n        return this.draw();\n      }\n    };\n\n    Grid.prototype.measureText = function(text, angle) {\n      var ret, tt;\n      if (angle == null) {\n        angle = 0;\n      }\n      tt = this.raphael.text(100, 100, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).rotate(angle);\n      ret = tt.getBBox();\n      tt.remove();\n      return ret;\n    };\n\n    Grid.prototype.yAxisFormat = function(label) {\n      return this.yLabelFormat(label);\n    };\n\n    Grid.prototype.yLabelFormat = function(label) {\n      if (typeof this.options.yLabelFormat === 'function') {\n        return this.options.yLabelFormat(label);\n      } else {\n        return \"\" + this.options.preUnits + (Morris.commas(label)) + this.options.postUnits;\n      }\n    };\n\n    Grid.prototype.drawGrid = function() {\n      var lineY, y, _i, _len, _ref, _ref1, _ref2, _results;\n      if (this.options.grid === false && ((_ref = this.options.axes) !== true && _ref !== 'both' && _ref !== 'y')) {\n        return;\n      }\n      _ref1 = this.grid;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        lineY = _ref1[_i];\n        y = this.transY(lineY);\n        if ((_ref2 = this.options.axes) === true || _ref2 === 'both' || _ref2 === 'y') {\n          this.drawYAxisLabel(this.left - this.options.padding / 2, y, this.yAxisFormat(lineY));\n        }\n        if (this.options.grid) {\n          _results.push(this.drawGridLine(\"M\" + this.left + \",\" + y + \"H\" + (this.left + this.width)));\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawGoals = function() {\n      var color, goal, i, _i, _len, _ref, _results;\n      _ref = this.options.goals;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        goal = _ref[i];\n        color = this.options.goalLineColors[i % this.options.goalLineColors.length];\n        _results.push(this.drawGoal(goal, color));\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawEvents = function() {\n      var color, event, i, _i, _len, _ref, _results;\n      _ref = this.events;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        event = _ref[i];\n        color = this.options.eventLineColors[i % this.options.eventLineColors.length];\n        _results.push(this.drawEvent(event, color));\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawGoal = function(goal, color) {\n      return this.raphael.path(\"M\" + this.left + \",\" + (this.transY(goal)) + \"H\" + this.right).attr('stroke', color).attr('stroke-width', this.options.goalStrokeWidth);\n    };\n\n    Grid.prototype.drawEvent = function(event, color) {\n      return this.raphael.path(\"M\" + (this.transX(event)) + \",\" + this.bottom + \"V\" + this.top).attr('stroke', color).attr('stroke-width', this.options.eventStrokeWidth);\n    };\n\n    Grid.prototype.drawYAxisLabel = function(xPos, yPos, text) {\n      return this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor).attr('text-anchor', 'end');\n    };\n\n    Grid.prototype.drawGridLine = function(path) {\n      return this.raphael.path(path).attr('stroke', this.options.gridLineColor).attr('stroke-width', this.options.gridStrokeWidth);\n    };\n\n    Grid.prototype.startRange = function(x) {\n      this.hover.hide();\n      this.selectFrom = x;\n      return this.selectionRect.attr({\n        x: x,\n        width: 0\n      }).show();\n    };\n\n    Grid.prototype.endRange = function(x) {\n      var end, start;\n      if (this.selectFrom) {\n        start = Math.min(this.selectFrom, x);\n        end = Math.max(this.selectFrom, x);\n        this.options.rangeSelect.call(this.el, {\n          start: this.data[this.hitTest(start)].x,\n          end: this.data[this.hitTest(end)].x\n        });\n        return this.selectFrom = null;\n      }\n    };\n\n    Grid.prototype.resizeHandler = function() {\n      this.timeoutId = null;\n      this.raphael.setSize(this.el.width(), this.el.height());\n      return this.redraw();\n    };\n\n    return Grid;\n\n  })(Morris.EventEmitter);\n\n  Morris.parseDate = function(date) {\n    var isecs, m, msecs, n, o, offsetmins, p, q, r, ret, secs;\n    if (typeof date === 'number') {\n      return date;\n    }\n    m = date.match(/^(\\d+) Q(\\d)$/);\n    n = date.match(/^(\\d+)-(\\d+)$/);\n    o = date.match(/^(\\d+)-(\\d+)-(\\d+)$/);\n    p = date.match(/^(\\d+) W(\\d+)$/);\n    q = date.match(/^(\\d+)-(\\d+)-(\\d+)[ T](\\d+):(\\d+)(Z|([+-])(\\d\\d):?(\\d\\d))?$/);\n    r = date.match(/^(\\d+)-(\\d+)-(\\d+)[ T](\\d+):(\\d+):(\\d+(\\.\\d+)?)(Z|([+-])(\\d\\d):?(\\d\\d))?$/);\n    if (m) {\n      return new Date(parseInt(m[1], 10), parseInt(m[2], 10) * 3 - 1, 1).getTime();\n    } else if (n) {\n      return new Date(parseInt(n[1], 10), parseInt(n[2], 10) - 1, 1).getTime();\n    } else if (o) {\n      return new Date(parseInt(o[1], 10), parseInt(o[2], 10) - 1, parseInt(o[3], 10)).getTime();\n    } else if (p) {\n      ret = new Date(parseInt(p[1], 10), 0, 1);\n      if (ret.getDay() !== 4) {\n        ret.setMonth(0, 1 + ((4 - ret.getDay()) + 7) % 7);\n      }\n      return ret.getTime() + parseInt(p[2], 10) * 604800000;\n    } else if (q) {\n      if (!q[6]) {\n        return new Date(parseInt(q[1], 10), parseInt(q[2], 10) - 1, parseInt(q[3], 10), parseInt(q[4], 10), parseInt(q[5], 10)).getTime();\n      } else {\n        offsetmins = 0;\n        if (q[6] !== 'Z') {\n          offsetmins = parseInt(q[8], 10) * 60 + parseInt(q[9], 10);\n          if (q[7] === '+') {\n            offsetmins = 0 - offsetmins;\n          }\n        }\n        return Date.UTC(parseInt(q[1], 10), parseInt(q[2], 10) - 1, parseInt(q[3], 10), parseInt(q[4], 10), parseInt(q[5], 10) + offsetmins);\n      }\n    } else if (r) {\n      secs = parseFloat(r[6]);\n      isecs = Math.floor(secs);\n      msecs = Math.round((secs - isecs) * 1000);\n      if (!r[8]) {\n        return new Date(parseInt(r[1], 10), parseInt(r[2], 10) - 1, parseInt(r[3], 10), parseInt(r[4], 10), parseInt(r[5], 10), isecs, msecs).getTime();\n      } else {\n        offsetmins = 0;\n        if (r[8] !== 'Z') {\n          offsetmins = parseInt(r[10], 10) * 60 + parseInt(r[11], 10);\n          if (r[9] === '+') {\n            offsetmins = 0 - offsetmins;\n          }\n        }\n        return Date.UTC(parseInt(r[1], 10), parseInt(r[2], 10) - 1, parseInt(r[3], 10), parseInt(r[4], 10), parseInt(r[5], 10) + offsetmins, isecs, msecs);\n      }\n    } else {\n      return new Date(parseInt(date, 10), 0, 1).getTime();\n    }\n  };\n\n  Morris.Hover = (function() {\n    Hover.defaults = {\n      \"class\": 'morris-hover morris-default-style'\n    };\n\n    function Hover(options) {\n      if (options == null) {\n        options = {};\n      }\n      this.options = $.extend({}, Morris.Hover.defaults, options);\n      this.el = $(\"<div class='\" + this.options[\"class\"] + \"'></div>\");\n      this.el.hide();\n      this.options.parent.append(this.el);\n    }\n\n    Hover.prototype.update = function(html, x, y) {\n      if (!html) {\n        return this.hide();\n      } else {\n        this.html(html);\n        this.show();\n        return this.moveTo(x, y);\n      }\n    };\n\n    Hover.prototype.html = function(content) {\n      return this.el.html(content);\n    };\n\n    Hover.prototype.moveTo = function(x, y) {\n      var hoverHeight, hoverWidth, left, parentHeight, parentWidth, top;\n      parentWidth = this.options.parent.innerWidth();\n      parentHeight = this.options.parent.innerHeight();\n      hoverWidth = this.el.outerWidth();\n      hoverHeight = this.el.outerHeight();\n      left = Math.min(Math.max(0, x - hoverWidth / 2), parentWidth - hoverWidth);\n      if (y != null) {\n        top = y - hoverHeight - 10;\n        if (top < 0) {\n          top = y + 10;\n          if (top + hoverHeight > parentHeight) {\n            top = parentHeight / 2 - hoverHeight / 2;\n          }\n        }\n      } else {\n        top = parentHeight / 2 - hoverHeight / 2;\n      }\n      return this.el.css({\n        left: left + \"px\",\n        top: parseInt(top) + \"px\"\n      });\n    };\n\n    Hover.prototype.show = function() {\n      return this.el.show();\n    };\n\n    Hover.prototype.hide = function() {\n      return this.el.hide();\n    };\n\n    return Hover;\n\n  })();\n\n  Morris.Line = (function(_super) {\n    __extends(Line, _super);\n\n    function Line(options) {\n      this.hilight = __bind(this.hilight, this);\n      this.onHoverOut = __bind(this.onHoverOut, this);\n      this.onHoverMove = __bind(this.onHoverMove, this);\n      this.onGridClick = __bind(this.onGridClick, this);\n      if (!(this instanceof Morris.Line)) {\n        return new Morris.Line(options);\n      }\n      Line.__super__.constructor.call(this, options);\n    }\n\n    Line.prototype.init = function() {\n      if (this.options.hideHover !== 'always') {\n        this.hover = new Morris.Hover({\n          parent: this.el\n        });\n        this.on('hovermove', this.onHoverMove);\n        this.on('hoverout', this.onHoverOut);\n        return this.on('gridclick', this.onGridClick);\n      }\n    };\n\n    Line.prototype.defaults = {\n      lineWidth: 3,\n      pointSize: 4,\n      lineColors: ['#0b62a4', '#7A92A3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed'],\n      pointStrokeWidths: [1],\n      pointStrokeColors: ['#ffffff'],\n      pointFillColors: [],\n      smooth: true,\n      xLabels: 'auto',\n      xLabelFormat: null,\n      xLabelMargin: 24,\n      hideHover: false\n    };\n\n    Line.prototype.calc = function() {\n      this.calcPoints();\n      return this.generatePaths();\n    };\n\n    Line.prototype.calcPoints = function() {\n      var row, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        row._x = this.transX(row.x);\n        row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(this.transY(y));\n            } else {\n              _results1.push(y);\n            }\n          }\n          return _results1;\n        }).call(this);\n        _results.push(row._ymax = Math.min.apply(Math, [this.bottom].concat((function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row._y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(y);\n            }\n          }\n          return _results1;\n        })())));\n      }\n      return _results;\n    };\n\n    Line.prototype.hitTest = function(x) {\n      var index, r, _i, _len, _ref;\n      if (this.data.length === 0) {\n        return null;\n      }\n      _ref = this.data.slice(1);\n      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {\n        r = _ref[index];\n        if (x < (r._x + this.data[index]._x) / 2) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    Line.prototype.onGridClick = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.fire('click', index, this.data[index].src, x, y);\n    };\n\n    Line.prototype.onHoverMove = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.displayHoverForRow(index);\n    };\n\n    Line.prototype.onHoverOut = function() {\n      if (this.options.hideHover !== false) {\n        return this.displayHoverForRow(null);\n      }\n    };\n\n    Line.prototype.displayHoverForRow = function(index) {\n      var _ref;\n      if (index != null) {\n        (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(index));\n        return this.hilight(index);\n      } else {\n        this.hover.hide();\n        return this.hilight();\n      }\n    };\n\n    Line.prototype.hoverContentForRow = function(index) {\n      var content, j, row, y, _i, _len, _ref;\n      row = this.data[index];\n      content = \"<div class='morris-hover-row-label'>\" + row.label + \"</div>\";\n      _ref = row.y;\n      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {\n        y = _ref[j];\n        content += \"<div class='morris-hover-point' style='color: \" + (this.colorFor(row, j, 'label')) + \"'>\\n  \" + this.options.labels[j] + \":\\n  \" + (this.yLabelFormat(y)) + \"\\n</div>\";\n      }\n      if (typeof this.options.hoverCallback === 'function') {\n        content = this.options.hoverCallback(index, this.options, content, row.src);\n      }\n      return [content, row._x, row._ymax];\n    };\n\n    Line.prototype.generatePaths = function() {\n      var coords, i, r, smooth;\n      return this.paths = (function() {\n        var _i, _ref, _ref1, _results;\n        _results = [];\n        for (i = _i = 0, _ref = this.options.ykeys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n          smooth = typeof this.options.smooth === \"boolean\" ? this.options.smooth : (_ref1 = this.options.ykeys[i], __indexOf.call(this.options.smooth, _ref1) >= 0);\n          coords = (function() {\n            var _j, _len, _ref2, _results1;\n            _ref2 = this.data;\n            _results1 = [];\n            for (_j = 0, _len = _ref2.length; _j < _len; _j++) {\n              r = _ref2[_j];\n              if (r._y[i] !== void 0) {\n                _results1.push({\n                  x: r._x,\n                  y: r._y[i]\n                });\n              }\n            }\n            return _results1;\n          }).call(this);\n          if (coords.length > 1) {\n            _results.push(Morris.Line.createPath(coords, smooth, this.bottom));\n          } else {\n            _results.push(null);\n          }\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Line.prototype.draw = function() {\n      var _ref;\n      if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'x') {\n        this.drawXAxis();\n      }\n      this.drawSeries();\n      if (this.options.hideHover === false) {\n        return this.displayHoverForRow(this.data.length - 1);\n      }\n    };\n\n    Line.prototype.drawXAxis = function() {\n      var drawLabel, l, labels, prevAngleMargin, prevLabelMargin, row, ypos, _i, _len, _results,\n        _this = this;\n      ypos = this.bottom + this.options.padding / 2;\n      prevLabelMargin = null;\n      prevAngleMargin = null;\n      drawLabel = function(labelText, xpos) {\n        var label, labelBox, margin, offset, textBox;\n        label = _this.drawXAxisLabel(_this.transX(xpos), ypos, labelText);\n        textBox = label.getBBox();\n        label.transform(\"r\" + (-_this.options.xLabelAngle));\n        labelBox = label.getBBox();\n        label.transform(\"t0,\" + (labelBox.height / 2) + \"...\");\n        if (_this.options.xLabelAngle !== 0) {\n          offset = -0.5 * textBox.width * Math.cos(_this.options.xLabelAngle * Math.PI / 180.0);\n          label.transform(\"t\" + offset + \",0...\");\n        }\n        labelBox = label.getBBox();\n        if (((prevLabelMargin == null) || prevLabelMargin >= labelBox.x + labelBox.width || (prevAngleMargin != null) && prevAngleMargin >= labelBox.x) && labelBox.x >= 0 && (labelBox.x + labelBox.width) < _this.el.width()) {\n          if (_this.options.xLabelAngle !== 0) {\n            margin = 1.25 * _this.options.gridTextSize / Math.sin(_this.options.xLabelAngle * Math.PI / 180.0);\n            prevAngleMargin = labelBox.x - margin;\n          }\n          return prevLabelMargin = labelBox.x - _this.options.xLabelMargin;\n        } else {\n          return label.remove();\n        }\n      };\n      if (this.options.parseTime) {\n        if (this.data.length === 1 && this.options.xLabels === 'auto') {\n          labels = [[this.data[0].label, this.data[0].x]];\n        } else {\n          labels = Morris.labelSeries(this.xmin, this.xmax, this.width, this.options.xLabels, this.options.xLabelFormat);\n        }\n      } else {\n        labels = (function() {\n          var _i, _len, _ref, _results;\n          _ref = this.data;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            row = _ref[_i];\n            _results.push([row.label, row.x]);\n          }\n          return _results;\n        }).call(this);\n      }\n      labels.reverse();\n      _results = [];\n      for (_i = 0, _len = labels.length; _i < _len; _i++) {\n        l = labels[_i];\n        _results.push(drawLabel(l[0], l[1]));\n      }\n      return _results;\n    };\n\n    Line.prototype.drawSeries = function() {\n      var i, _i, _j, _ref, _ref1, _results;\n      this.seriesPoints = [];\n      for (i = _i = _ref = this.options.ykeys.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {\n        this._drawLineFor(i);\n      }\n      _results = [];\n      for (i = _j = _ref1 = this.options.ykeys.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; i = _ref1 <= 0 ? ++_j : --_j) {\n        _results.push(this._drawPointFor(i));\n      }\n      return _results;\n    };\n\n    Line.prototype._drawPointFor = function(index) {\n      var circle, row, _i, _len, _ref, _results;\n      this.seriesPoints[index] = [];\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        circle = null;\n        if (row._y[index] != null) {\n          circle = this.drawLinePoint(row._x, row._y[index], this.colorFor(row, index, 'point'), index);\n        }\n        _results.push(this.seriesPoints[index].push(circle));\n      }\n      return _results;\n    };\n\n    Line.prototype._drawLineFor = function(index) {\n      var path;\n      path = this.paths[index];\n      if (path !== null) {\n        return this.drawLinePath(path, this.colorFor(null, index, 'line'), index);\n      }\n    };\n\n    Line.createPath = function(coords, smooth, bottom) {\n      var coord, g, grads, i, ix, lg, path, prevCoord, x1, x2, y1, y2, _i, _len;\n      path = \"\";\n      if (smooth) {\n        grads = Morris.Line.gradients(coords);\n      }\n      prevCoord = {\n        y: null\n      };\n      for (i = _i = 0, _len = coords.length; _i < _len; i = ++_i) {\n        coord = coords[i];\n        if (coord.y != null) {\n          if (prevCoord.y != null) {\n            if (smooth) {\n              g = grads[i];\n              lg = grads[i - 1];\n              ix = (coord.x - prevCoord.x) / 4;\n              x1 = prevCoord.x + ix;\n              y1 = Math.min(bottom, prevCoord.y + ix * lg);\n              x2 = coord.x - ix;\n              y2 = Math.min(bottom, coord.y - ix * g);\n              path += \"C\" + x1 + \",\" + y1 + \",\" + x2 + \",\" + y2 + \",\" + coord.x + \",\" + coord.y;\n            } else {\n              path += \"L\" + coord.x + \",\" + coord.y;\n            }\n          } else {\n            if (!smooth || (grads[i] != null)) {\n              path += \"M\" + coord.x + \",\" + coord.y;\n            }\n          }\n        }\n        prevCoord = coord;\n      }\n      return path;\n    };\n\n    Line.gradients = function(coords) {\n      var coord, grad, i, nextCoord, prevCoord, _i, _len, _results;\n      grad = function(a, b) {\n        return (a.y - b.y) / (a.x - b.x);\n      };\n      _results = [];\n      for (i = _i = 0, _len = coords.length; _i < _len; i = ++_i) {\n        coord = coords[i];\n        if (coord.y != null) {\n          nextCoord = coords[i + 1] || {\n            y: null\n          };\n          prevCoord = coords[i - 1] || {\n            y: null\n          };\n          if ((prevCoord.y != null) && (nextCoord.y != null)) {\n            _results.push(grad(prevCoord, nextCoord));\n          } else if (prevCoord.y != null) {\n            _results.push(grad(prevCoord, coord));\n          } else if (nextCoord.y != null) {\n            _results.push(grad(coord, nextCoord));\n          } else {\n            _results.push(null);\n          }\n        } else {\n          _results.push(null);\n        }\n      }\n      return _results;\n    };\n\n    Line.prototype.hilight = function(index) {\n      var i, _i, _j, _ref, _ref1;\n      if (this.prevHilight !== null && this.prevHilight !== index) {\n        for (i = _i = 0, _ref = this.seriesPoints.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\n          if (this.seriesPoints[i][this.prevHilight]) {\n            this.seriesPoints[i][this.prevHilight].animate(this.pointShrinkSeries(i));\n          }\n        }\n      }\n      if (index !== null && this.prevHilight !== index) {\n        for (i = _j = 0, _ref1 = this.seriesPoints.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n          if (this.seriesPoints[i][index]) {\n            this.seriesPoints[i][index].animate(this.pointGrowSeries(i));\n          }\n        }\n      }\n      return this.prevHilight = index;\n    };\n\n    Line.prototype.colorFor = function(row, sidx, type) {\n      if (typeof this.options.lineColors === 'function') {\n        return this.options.lineColors.call(this, row, sidx, type);\n      } else if (type === 'point') {\n        return this.options.pointFillColors[sidx % this.options.pointFillColors.length] || this.options.lineColors[sidx % this.options.lineColors.length];\n      } else {\n        return this.options.lineColors[sidx % this.options.lineColors.length];\n      }\n    };\n\n    Line.prototype.drawXAxisLabel = function(xPos, yPos, text) {\n      return this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor);\n    };\n\n    Line.prototype.drawLinePath = function(path, lineColor, lineIndex) {\n      return this.raphael.path(path).attr('stroke', lineColor).attr('stroke-width', this.lineWidthForSeries(lineIndex));\n    };\n\n    Line.prototype.drawLinePoint = function(xPos, yPos, pointColor, lineIndex) {\n      return this.raphael.circle(xPos, yPos, this.pointSizeForSeries(lineIndex)).attr('fill', pointColor).attr('stroke-width', this.pointStrokeWidthForSeries(lineIndex)).attr('stroke', this.pointStrokeColorForSeries(lineIndex));\n    };\n\n    Line.prototype.pointStrokeWidthForSeries = function(index) {\n      return this.options.pointStrokeWidths[index % this.options.pointStrokeWidths.length];\n    };\n\n    Line.prototype.pointStrokeColorForSeries = function(index) {\n      return this.options.pointStrokeColors[index % this.options.pointStrokeColors.length];\n    };\n\n    Line.prototype.lineWidthForSeries = function(index) {\n      if (this.options.lineWidth instanceof Array) {\n        return this.options.lineWidth[index % this.options.lineWidth.length];\n      } else {\n        return this.options.lineWidth;\n      }\n    };\n\n    Line.prototype.pointSizeForSeries = function(index) {\n      if (this.options.pointSize instanceof Array) {\n        return this.options.pointSize[index % this.options.pointSize.length];\n      } else {\n        return this.options.pointSize;\n      }\n    };\n\n    Line.prototype.pointGrowSeries = function(index) {\n      return Raphael.animation({\n        r: this.pointSizeForSeries(index) + 3\n      }, 25, 'linear');\n    };\n\n    Line.prototype.pointShrinkSeries = function(index) {\n      return Raphael.animation({\n        r: this.pointSizeForSeries(index)\n      }, 25, 'linear');\n    };\n\n    return Line;\n\n  })(Morris.Grid);\n\n  Morris.labelSeries = function(dmin, dmax, pxwidth, specName, xLabelFormat) {\n    var d, d0, ddensity, name, ret, s, spec, t, _i, _len, _ref;\n    ddensity = 200 * (dmax - dmin) / pxwidth;\n    d0 = new Date(dmin);\n    spec = Morris.LABEL_SPECS[specName];\n    if (spec === void 0) {\n      _ref = Morris.AUTO_LABEL_ORDER;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        name = _ref[_i];\n        s = Morris.LABEL_SPECS[name];\n        if (ddensity >= s.span) {\n          spec = s;\n          break;\n        }\n      }\n    }\n    if (spec === void 0) {\n      spec = Morris.LABEL_SPECS[\"second\"];\n    }\n    if (xLabelFormat) {\n      spec = $.extend({}, spec, {\n        fmt: xLabelFormat\n      });\n    }\n    d = spec.start(d0);\n    ret = [];\n    while ((t = d.getTime()) <= dmax) {\n      if (t >= dmin) {\n        ret.push([spec.fmt(d), t]);\n      }\n      spec.incr(d);\n    }\n    return ret;\n  };\n\n  minutesSpecHelper = function(interval) {\n    return {\n      span: interval * 60 * 1000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours());\n      },\n      fmt: function(d) {\n        return \"\" + (Morris.pad2(d.getHours())) + \":\" + (Morris.pad2(d.getMinutes()));\n      },\n      incr: function(d) {\n        return d.setUTCMinutes(d.getUTCMinutes() + interval);\n      }\n    };\n  };\n\n  secondsSpecHelper = function(interval) {\n    return {\n      span: interval * 1000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes());\n      },\n      fmt: function(d) {\n        return \"\" + (Morris.pad2(d.getHours())) + \":\" + (Morris.pad2(d.getMinutes())) + \":\" + (Morris.pad2(d.getSeconds()));\n      },\n      incr: function(d) {\n        return d.setUTCSeconds(d.getUTCSeconds() + interval);\n      }\n    };\n  };\n\n  Morris.LABEL_SPECS = {\n    \"decade\": {\n      span: 172800000000,\n      start: function(d) {\n        return new Date(d.getFullYear() - d.getFullYear() % 10, 0, 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear());\n      },\n      incr: function(d) {\n        return d.setFullYear(d.getFullYear() + 10);\n      }\n    },\n    \"year\": {\n      span: 17280000000,\n      start: function(d) {\n        return new Date(d.getFullYear(), 0, 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear());\n      },\n      incr: function(d) {\n        return d.setFullYear(d.getFullYear() + 1);\n      }\n    },\n    \"month\": {\n      span: 2419200000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1));\n      },\n      incr: function(d) {\n        return d.setMonth(d.getMonth() + 1);\n      }\n    },\n    \"week\": {\n      span: 604800000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1)) + \"-\" + (Morris.pad2(d.getDate()));\n      },\n      incr: function(d) {\n        return d.setDate(d.getDate() + 7);\n      }\n    },\n    \"day\": {\n      span: 86400000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1)) + \"-\" + (Morris.pad2(d.getDate()));\n      },\n      incr: function(d) {\n        return d.setDate(d.getDate() + 1);\n      }\n    },\n    \"hour\": minutesSpecHelper(60),\n    \"30min\": minutesSpecHelper(30),\n    \"15min\": minutesSpecHelper(15),\n    \"10min\": minutesSpecHelper(10),\n    \"5min\": minutesSpecHelper(5),\n    \"minute\": minutesSpecHelper(1),\n    \"30sec\": secondsSpecHelper(30),\n    \"15sec\": secondsSpecHelper(15),\n    \"10sec\": secondsSpecHelper(10),\n    \"5sec\": secondsSpecHelper(5),\n    \"second\": secondsSpecHelper(1)\n  };\n\n  Morris.AUTO_LABEL_ORDER = [\"decade\", \"year\", \"month\", \"week\", \"day\", \"hour\", \"30min\", \"15min\", \"10min\", \"5min\", \"minute\", \"30sec\", \"15sec\", \"10sec\", \"5sec\", \"second\"];\n\n  Morris.Area = (function(_super) {\n    var areaDefaults;\n\n    __extends(Area, _super);\n\n    areaDefaults = {\n      fillOpacity: 'auto',\n      behaveLikeLine: false\n    };\n\n    function Area(options) {\n      var areaOptions;\n      if (!(this instanceof Morris.Area)) {\n        return new Morris.Area(options);\n      }\n      areaOptions = $.extend({}, areaDefaults, options);\n      this.cumulative = !areaOptions.behaveLikeLine;\n      if (areaOptions.fillOpacity === 'auto') {\n        areaOptions.fillOpacity = areaOptions.behaveLikeLine ? .8 : 1;\n      }\n      Area.__super__.constructor.call(this, areaOptions);\n    }\n\n    Area.prototype.calcPoints = function() {\n      var row, total, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        row._x = this.transX(row.x);\n        total = 0;\n        row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (this.options.behaveLikeLine) {\n              _results1.push(this.transY(y));\n            } else {\n              total += y || 0;\n              _results1.push(this.transY(total));\n            }\n          }\n          return _results1;\n        }).call(this);\n        _results.push(row._ymax = Math.max.apply(Math, row._y));\n      }\n      return _results;\n    };\n\n    Area.prototype.drawSeries = function() {\n      var i, range, _i, _j, _k, _len, _ref, _ref1, _results, _results1, _results2;\n      this.seriesPoints = [];\n      if (this.options.behaveLikeLine) {\n        range = (function() {\n          _results = [];\n          for (var _i = 0, _ref = this.options.ykeys.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }\n          return _results;\n        }).apply(this);\n      } else {\n        range = (function() {\n          _results1 = [];\n          for (var _j = _ref1 = this.options.ykeys.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; _ref1 <= 0 ? _j++ : _j--){ _results1.push(_j); }\n          return _results1;\n        }).apply(this);\n      }\n      _results2 = [];\n      for (_k = 0, _len = range.length; _k < _len; _k++) {\n        i = range[_k];\n        this._drawFillFor(i);\n        this._drawLineFor(i);\n        _results2.push(this._drawPointFor(i));\n      }\n      return _results2;\n    };\n\n    Area.prototype._drawFillFor = function(index) {\n      var path;\n      path = this.paths[index];\n      if (path !== null) {\n        path = path + (\"L\" + (this.transX(this.xmax)) + \",\" + this.bottom + \"L\" + (this.transX(this.xmin)) + \",\" + this.bottom + \"Z\");\n        return this.drawFilledPath(path, this.fillForSeries(index));\n      }\n    };\n\n    Area.prototype.fillForSeries = function(i) {\n      var color;\n      color = Raphael.rgb2hsl(this.colorFor(this.data[i], i, 'line'));\n      return Raphael.hsl(color.h, this.options.behaveLikeLine ? color.s * 0.9 : color.s * 0.75, Math.min(0.98, this.options.behaveLikeLine ? color.l * 1.2 : color.l * 1.25));\n    };\n\n    Area.prototype.drawFilledPath = function(path, fill) {\n      return this.raphael.path(path).attr('fill', fill).attr('fill-opacity', this.options.fillOpacity).attr('stroke', 'none');\n    };\n\n    return Area;\n\n  })(Morris.Line);\n\n  Morris.Bar = (function(_super) {\n    __extends(Bar, _super);\n\n    function Bar(options) {\n      this.onHoverOut = __bind(this.onHoverOut, this);\n      this.onHoverMove = __bind(this.onHoverMove, this);\n      this.onGridClick = __bind(this.onGridClick, this);\n      if (!(this instanceof Morris.Bar)) {\n        return new Morris.Bar(options);\n      }\n      Bar.__super__.constructor.call(this, $.extend({}, options, {\n        parseTime: false\n      }));\n    }\n\n    Bar.prototype.init = function() {\n      this.cumulative = this.options.stacked;\n      if (this.options.hideHover !== 'always') {\n        this.hover = new Morris.Hover({\n          parent: this.el\n        });\n        this.on('hovermove', this.onHoverMove);\n        this.on('hoverout', this.onHoverOut);\n        return this.on('gridclick', this.onGridClick);\n      }\n    };\n\n    Bar.prototype.defaults = {\n      barSizeRatio: 0.75,\n      barGap: 3,\n      barColors: ['#0b62a4', '#7a92a3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed'],\n      barOpacity: 1.0,\n      barRadius: [0, 0, 0, 0],\n      xLabelMargin: 50\n    };\n\n    Bar.prototype.calc = function() {\n      var _ref;\n      this.calcBars();\n      if (this.options.hideHover === false) {\n        return (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(this.data.length - 1));\n      }\n    };\n\n    Bar.prototype.calcBars = function() {\n      var idx, row, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {\n        row = _ref[idx];\n        row._x = this.left + this.width * (idx + 0.5) / this.data.length;\n        _results.push(row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(this.transY(y));\n            } else {\n              _results1.push(null);\n            }\n          }\n          return _results1;\n        }).call(this));\n      }\n      return _results;\n    };\n\n    Bar.prototype.draw = function() {\n      var _ref;\n      if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'x') {\n        this.drawXAxis();\n      }\n      return this.drawSeries();\n    };\n\n    Bar.prototype.drawXAxis = function() {\n      var i, label, labelBox, margin, offset, prevAngleMargin, prevLabelMargin, row, textBox, ypos, _i, _ref, _results;\n      ypos = this.bottom + (this.options.xAxisLabelTopPadding || this.options.padding / 2);\n      prevLabelMargin = null;\n      prevAngleMargin = null;\n      _results = [];\n      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n        row = this.data[this.data.length - 1 - i];\n        label = this.drawXAxisLabel(row._x, ypos, row.label);\n        textBox = label.getBBox();\n        label.transform(\"r\" + (-this.options.xLabelAngle));\n        labelBox = label.getBBox();\n        label.transform(\"t0,\" + (labelBox.height / 2) + \"...\");\n        if (this.options.xLabelAngle !== 0) {\n          offset = -0.5 * textBox.width * Math.cos(this.options.xLabelAngle * Math.PI / 180.0);\n          label.transform(\"t\" + offset + \",0...\");\n        }\n        if (((prevLabelMargin == null) || prevLabelMargin >= labelBox.x + labelBox.width || (prevAngleMargin != null) && prevAngleMargin >= labelBox.x) && labelBox.x >= 0 && (labelBox.x + labelBox.width) < this.el.width()) {\n          if (this.options.xLabelAngle !== 0) {\n            margin = 1.25 * this.options.gridTextSize / Math.sin(this.options.xLabelAngle * Math.PI / 180.0);\n            prevAngleMargin = labelBox.x - margin;\n          }\n          _results.push(prevLabelMargin = labelBox.x - this.options.xLabelMargin);\n        } else {\n          _results.push(label.remove());\n        }\n      }\n      return _results;\n    };\n\n    Bar.prototype.drawSeries = function() {\n      var barWidth, bottom, groupWidth, idx, lastTop, left, leftPadding, numBars, row, sidx, size, spaceLeft, top, ypos, zeroPos;\n      groupWidth = this.width / this.options.data.length;\n      numBars = this.options.stacked ? 1 : this.options.ykeys.length;\n      barWidth = (groupWidth * this.options.barSizeRatio - this.options.barGap * (numBars - 1)) / numBars;\n      if (this.options.barSize) {\n        barWidth = Math.min(barWidth, this.options.barSize);\n      }\n      spaceLeft = groupWidth - barWidth * numBars - this.options.barGap * (numBars - 1);\n      leftPadding = spaceLeft / 2;\n      zeroPos = this.ymin <= 0 && this.ymax >= 0 ? this.transY(0) : null;\n      return this.bars = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.data;\n        _results = [];\n        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {\n          row = _ref[idx];\n          lastTop = 0;\n          _results.push((function() {\n            var _j, _len1, _ref1, _results1;\n            _ref1 = row._y;\n            _results1 = [];\n            for (sidx = _j = 0, _len1 = _ref1.length; _j < _len1; sidx = ++_j) {\n              ypos = _ref1[sidx];\n              if (ypos !== null) {\n                if (zeroPos) {\n                  top = Math.min(ypos, zeroPos);\n                  bottom = Math.max(ypos, zeroPos);\n                } else {\n                  top = ypos;\n                  bottom = this.bottom;\n                }\n                left = this.left + idx * groupWidth + leftPadding;\n                if (!this.options.stacked) {\n                  left += sidx * (barWidth + this.options.barGap);\n                }\n                size = bottom - top;\n                if (this.options.verticalGridCondition && this.options.verticalGridCondition(row.x)) {\n                  this.drawBar(this.left + idx * groupWidth, this.top, groupWidth, Math.abs(this.top - this.bottom), this.options.verticalGridColor, this.options.verticalGridOpacity, this.options.barRadius);\n                }\n                if (this.options.stacked) {\n                  top -= lastTop;\n                }\n                this.drawBar(left, top, barWidth, size, this.colorFor(row, sidx, 'bar'), this.options.barOpacity, this.options.barRadius);\n                _results1.push(lastTop += size);\n              } else {\n                _results1.push(null);\n              }\n            }\n            return _results1;\n          }).call(this));\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Bar.prototype.colorFor = function(row, sidx, type) {\n      var r, s;\n      if (typeof this.options.barColors === 'function') {\n        r = {\n          x: row.x,\n          y: row.y[sidx],\n          label: row.label\n        };\n        s = {\n          index: sidx,\n          key: this.options.ykeys[sidx],\n          label: this.options.labels[sidx]\n        };\n        return this.options.barColors.call(this, r, s, type);\n      } else {\n        return this.options.barColors[sidx % this.options.barColors.length];\n      }\n    };\n\n    Bar.prototype.hitTest = function(x) {\n      if (this.data.length === 0) {\n        return null;\n      }\n      x = Math.max(Math.min(x, this.right), this.left);\n      return Math.min(this.data.length - 1, Math.floor((x - this.left) / (this.width / this.data.length)));\n    };\n\n    Bar.prototype.onGridClick = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.fire('click', index, this.data[index].src, x, y);\n    };\n\n    Bar.prototype.onHoverMove = function(x, y) {\n      var index, _ref;\n      index = this.hitTest(x);\n      return (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(index));\n    };\n\n    Bar.prototype.onHoverOut = function() {\n      if (this.options.hideHover !== false) {\n        return this.hover.hide();\n      }\n    };\n\n    Bar.prototype.hoverContentForRow = function(index) {\n      var content, j, row, x, y, _i, _len, _ref;\n      row = this.data[index];\n      content = \"<div class='morris-hover-row-label'>\" + row.label + \"</div>\";\n      _ref = row.y;\n      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {\n        y = _ref[j];\n        content += \"<div class='morris-hover-point' style='color: \" + (this.colorFor(row, j, 'label')) + \"'>\\n  \" + this.options.labels[j] + \":\\n  \" + (this.yLabelFormat(y)) + \"\\n</div>\";\n      }\n      if (typeof this.options.hoverCallback === 'function') {\n        content = this.options.hoverCallback(index, this.options, content, row.src);\n      }\n      x = this.left + (index + 0.5) * this.width / this.data.length;\n      return [content, x];\n    };\n\n    Bar.prototype.drawXAxisLabel = function(xPos, yPos, text) {\n      var label;\n      return label = this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor);\n    };\n\n    Bar.prototype.drawBar = function(xPos, yPos, width, height, barColor, opacity, radiusArray) {\n      var maxRadius, path;\n      maxRadius = Math.max.apply(Math, radiusArray);\n      if (maxRadius === 0 || maxRadius > height) {\n        path = this.raphael.rect(xPos, yPos, width, height);\n      } else {\n        path = this.raphael.path(this.roundedRect(xPos, yPos, width, height, radiusArray));\n      }\n      return path.attr('fill', barColor).attr('fill-opacity', opacity).attr('stroke', 'none');\n    };\n\n    Bar.prototype.roundedRect = function(x, y, w, h, r) {\n      if (r == null) {\n        r = [0, 0, 0, 0];\n      }\n      return [\"M\", x, r[0] + y, \"Q\", x, y, x + r[0], y, \"L\", x + w - r[1], y, \"Q\", x + w, y, x + w, y + r[1], \"L\", x + w, y + h - r[2], \"Q\", x + w, y + h, x + w - r[2], y + h, \"L\", x + r[3], y + h, \"Q\", x, y + h, x, y + h - r[3], \"Z\"];\n    };\n\n    return Bar;\n\n  })(Morris.Grid);\n\n  Morris.Donut = (function(_super) {\n    __extends(Donut, _super);\n\n    Donut.prototype.defaults = {\n      colors: ['#0B62A4', '#3980B5', '#679DC6', '#95BBD7', '#B0CCE1', '#095791', '#095085', '#083E67', '#052C48', '#042135'],\n      backgroundColor: '#FFFFFF',\n      labelColor: '#000000',\n      formatter: Morris.commas,\n      resize: false\n    };\n\n    function Donut(options) {\n      this.resizeHandler = __bind(this.resizeHandler, this);\n      this.select = __bind(this.select, this);\n      this.click = __bind(this.click, this);\n      var _this = this;\n      if (!(this instanceof Morris.Donut)) {\n        return new Morris.Donut(options);\n      }\n      this.options = $.extend({}, this.defaults, options);\n      if (typeof options.element === 'string') {\n        this.el = $(document.getElementById(options.element));\n      } else {\n        this.el = $(options.element);\n      }\n      if (this.el === null || this.el.length === 0) {\n        throw new Error(\"Graph placeholder not found.\");\n      }\n      if (options.data === void 0 || options.data.length === 0) {\n        return;\n      }\n      this.raphael = new Raphael(this.el[0]);\n      if (this.options.resize) {\n        $(window).bind('resize', function(evt) {\n          if (_this.timeoutId != null) {\n            window.clearTimeout(_this.timeoutId);\n          }\n          return _this.timeoutId = window.setTimeout(_this.resizeHandler, 100);\n        });\n      }\n      this.setData(options.data);\n    }\n\n    Donut.prototype.redraw = function() {\n      var C, cx, cy, i, idx, last, max_value, min, next, seg, total, value, w, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\n      this.raphael.clear();\n      cx = this.el.width() / 2;\n      cy = this.el.height() / 2;\n      w = (Math.min(cx, cy) - 10) / 3;\n      total = 0;\n      _ref = this.values;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        value = _ref[_i];\n        total += value;\n      }\n      min = 5 / (2 * w);\n      C = 1.9999 * Math.PI - min * this.data.length;\n      last = 0;\n      idx = 0;\n      this.segments = [];\n      _ref1 = this.values;\n      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {\n        value = _ref1[i];\n        next = last + min + C * (value / total);\n        seg = new Morris.DonutSegment(cx, cy, w * 2, w, last, next, this.data[i].color || this.options.colors[idx % this.options.colors.length], this.options.backgroundColor, idx, this.raphael);\n        seg.render();\n        this.segments.push(seg);\n        seg.on('hover', this.select);\n        seg.on('click', this.click);\n        last = next;\n        idx += 1;\n      }\n      this.text1 = this.drawEmptyDonutLabel(cx, cy - 10, this.options.labelColor, 15, 800);\n      this.text2 = this.drawEmptyDonutLabel(cx, cy + 10, this.options.labelColor, 14);\n      max_value = Math.max.apply(Math, this.values);\n      idx = 0;\n      _ref2 = this.values;\n      _results = [];\n      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n        value = _ref2[_k];\n        if (value === max_value) {\n          this.select(idx);\n          break;\n        }\n        _results.push(idx += 1);\n      }\n      return _results;\n    };\n\n    Donut.prototype.setData = function(data) {\n      var row;\n      this.data = data;\n      this.values = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.data;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          row = _ref[_i];\n          _results.push(parseFloat(row.value));\n        }\n        return _results;\n      }).call(this);\n      return this.redraw();\n    };\n\n    Donut.prototype.click = function(idx) {\n      return this.fire('click', idx, this.data[idx]);\n    };\n\n    Donut.prototype.select = function(idx) {\n      var row, s, segment, _i, _len, _ref;\n      _ref = this.segments;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        s = _ref[_i];\n        s.deselect();\n      }\n      segment = this.segments[idx];\n      segment.select();\n      row = this.data[idx];\n      return this.setLabels(row.label, this.options.formatter(row.value, row));\n    };\n\n    Donut.prototype.setLabels = function(label1, label2) {\n      var inner, maxHeightBottom, maxHeightTop, maxWidth, text1bbox, text1scale, text2bbox, text2scale;\n      inner = (Math.min(this.el.width() / 2, this.el.height() / 2) - 10) * 2 / 3;\n      maxWidth = 1.8 * inner;\n      maxHeightTop = inner / 2;\n      maxHeightBottom = inner / 3;\n      this.text1.attr({\n        text: label1,\n        transform: ''\n      });\n      text1bbox = this.text1.getBBox();\n      text1scale = Math.min(maxWidth / text1bbox.width, maxHeightTop / text1bbox.height);\n      this.text1.attr({\n        transform: \"S\" + text1scale + \",\" + text1scale + \",\" + (text1bbox.x + text1bbox.width / 2) + \",\" + (text1bbox.y + text1bbox.height)\n      });\n      this.text2.attr({\n        text: label2,\n        transform: ''\n      });\n      text2bbox = this.text2.getBBox();\n      text2scale = Math.min(maxWidth / text2bbox.width, maxHeightBottom / text2bbox.height);\n      return this.text2.attr({\n        transform: \"S\" + text2scale + \",\" + text2scale + \",\" + (text2bbox.x + text2bbox.width / 2) + \",\" + text2bbox.y\n      });\n    };\n\n    Donut.prototype.drawEmptyDonutLabel = function(xPos, yPos, color, fontSize, fontWeight) {\n      var text;\n      text = this.raphael.text(xPos, yPos, '').attr('font-size', fontSize).attr('fill', color);\n      if (fontWeight != null) {\n        text.attr('font-weight', fontWeight);\n      }\n      return text;\n    };\n\n    Donut.prototype.resizeHandler = function() {\n      this.timeoutId = null;\n      this.raphael.setSize(this.el.width(), this.el.height());\n      return this.redraw();\n    };\n\n    return Donut;\n\n  })(Morris.EventEmitter);\n\n  Morris.DonutSegment = (function(_super) {\n    __extends(DonutSegment, _super);\n\n    function DonutSegment(cx, cy, inner, outer, p0, p1, color, backgroundColor, index, raphael) {\n      this.cx = cx;\n      this.cy = cy;\n      this.inner = inner;\n      this.outer = outer;\n      this.color = color;\n      this.backgroundColor = backgroundColor;\n      this.index = index;\n      this.raphael = raphael;\n      this.deselect = __bind(this.deselect, this);\n      this.select = __bind(this.select, this);\n      this.sin_p0 = Math.sin(p0);\n      this.cos_p0 = Math.cos(p0);\n      this.sin_p1 = Math.sin(p1);\n      this.cos_p1 = Math.cos(p1);\n      this.is_long = (p1 - p0) > Math.PI ? 1 : 0;\n      this.path = this.calcSegment(this.inner + 3, this.inner + this.outer - 5);\n      this.selectedPath = this.calcSegment(this.inner + 3, this.inner + this.outer);\n      this.hilight = this.calcArc(this.inner);\n    }\n\n    DonutSegment.prototype.calcArcPoints = function(r) {\n      return [this.cx + r * this.sin_p0, this.cy + r * this.cos_p0, this.cx + r * this.sin_p1, this.cy + r * this.cos_p1];\n    };\n\n    DonutSegment.prototype.calcSegment = function(r1, r2) {\n      var ix0, ix1, iy0, iy1, ox0, ox1, oy0, oy1, _ref, _ref1;\n      _ref = this.calcArcPoints(r1), ix0 = _ref[0], iy0 = _ref[1], ix1 = _ref[2], iy1 = _ref[3];\n      _ref1 = this.calcArcPoints(r2), ox0 = _ref1[0], oy0 = _ref1[1], ox1 = _ref1[2], oy1 = _ref1[3];\n      return (\"M\" + ix0 + \",\" + iy0) + (\"A\" + r1 + \",\" + r1 + \",0,\" + this.is_long + \",0,\" + ix1 + \",\" + iy1) + (\"L\" + ox1 + \",\" + oy1) + (\"A\" + r2 + \",\" + r2 + \",0,\" + this.is_long + \",1,\" + ox0 + \",\" + oy0) + \"Z\";\n    };\n\n    DonutSegment.prototype.calcArc = function(r) {\n      var ix0, ix1, iy0, iy1, _ref;\n      _ref = this.calcArcPoints(r), ix0 = _ref[0], iy0 = _ref[1], ix1 = _ref[2], iy1 = _ref[3];\n      return (\"M\" + ix0 + \",\" + iy0) + (\"A\" + r + \",\" + r + \",0,\" + this.is_long + \",0,\" + ix1 + \",\" + iy1);\n    };\n\n    DonutSegment.prototype.render = function() {\n      var _this = this;\n      this.arc = this.drawDonutArc(this.hilight, this.color);\n      return this.seg = this.drawDonutSegment(this.path, this.color, this.backgroundColor, function() {\n        return _this.fire('hover', _this.index);\n      }, function() {\n        return _this.fire('click', _this.index);\n      });\n    };\n\n    DonutSegment.prototype.drawDonutArc = function(path, color) {\n      return this.raphael.path(path).attr({\n        stroke: color,\n        'stroke-width': 2,\n        opacity: 0\n      });\n    };\n\n    DonutSegment.prototype.drawDonutSegment = function(path, fillColor, strokeColor, hoverFunction, clickFunction) {\n      return this.raphael.path(path).attr({\n        fill: fillColor,\n        stroke: strokeColor,\n        'stroke-width': 3\n      }).hover(hoverFunction).click(clickFunction);\n    };\n\n    DonutSegment.prototype.select = function() {\n      if (!this.selected) {\n        this.seg.animate({\n          path: this.selectedPath\n        }, 150, '<>');\n        this.arc.animate({\n          opacity: 1\n        }, 150, '<>');\n        return this.selected = true;\n      }\n    };\n\n    DonutSegment.prototype.deselect = function() {\n      if (this.selected) {\n        this.seg.animate({\n          path: this.path\n        }, 150, '<>');\n        this.arc.animate({\n          opacity: 0\n        }, 150, '<>');\n        return this.selected = false;\n      }\n    };\n\n    return DonutSegment;\n\n  })(Morris.EventEmitter);\n\n}).call(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.2.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raphael\"] = factory();\n\telse\n\t\troot[\"Raphael\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\n\t    return R;\n\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(eve) {\n\n\t    /*\\\n\t     * Raphael\n\t     [ method ]\n\t     **\n\t     * Creates a canvas object on which to draw.\n\t     * You must do this first, as all future calls to drawing methods\n\t     * from this instance will be bound to this canvas.\n\t     > Parameters\n\t     **\n\t     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n\t     = (object) @Paper\n\t     > Usage\n\t     | // Each of the following examples create a canvas\n\t     | // that is 320px wide by 200px high.\n\t     | // Canvas is created at the viewport’s 10,50 coordinate.\n\t     | var paper = Raphael(10, 50, 320, 200);\n\t     | // Canvas is created at the top left corner of the #notepad element\n\t     | // (or its top right corner in dir=\"rtl\" elements)\n\t     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n\t     | // Same as above\n\t     | var paper = Raphael(\"notepad\", 320, 200);\n\t     | // Image dump\n\t     | var set = Raphael([\"notepad\", 320, 200, {\n\t     |     type: \"rect\",\n\t     |     x: 10,\n\t     |     y: 10,\n\t     |     width: 25,\n\t     |     height: 25,\n\t     |     stroke: \"#f00\"\n\t     | }, {\n\t     |     type: \"text\",\n\t     |     x: 30,\n\t     |     y: 40,\n\t     |     text: \"Dump\"\n\t     | }]);\n\t    \\*/\n\t    function R(first) {\n\t        if (R.is(first, \"function\")) {\n\t            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n\t        } else if (R.is(first, array)) {\n\t            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n\t        } else {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            if (R.is(args[args.length - 1], \"function\")) {\n\t                var f = args.pop();\n\t                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n\t                    f.call(R._engine.create[apply](R, args));\n\t                });\n\t            } else {\n\t                return R._engine.create[apply](R, arguments);\n\t            }\n\t        }\n\t    }\n\t    R.version = \"2.2.0\";\n\t    R.eve = eve;\n\t    var loaded,\n\t        separator = /[, ]+/,\n\t        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n\t        formatrg = /\\{(\\d+)\\}/g,\n\t        proto = \"prototype\",\n\t        has = \"hasOwnProperty\",\n\t        g = {\n\t            doc: document,\n\t            win: window\n\t        },\n\t        oldRaphael = {\n\t            was: Object.prototype[has].call(g.win, \"Raphael\"),\n\t            is: g.win.Raphael\n\t        },\n\t        Paper = function () {\n\t            /*\\\n\t             * Paper.ca\n\t             [ property (object) ]\n\t             **\n\t             * Shortcut for @Paper.customAttributes\n\t            \\*/\n\t            /*\\\n\t             * Paper.customAttributes\n\t             [ property (object) ]\n\t             **\n\t             * If you have a set of attributes that you would like to represent\n\t             * as a function of some number you can do it easily with custom attributes:\n\t             > Usage\n\t             | paper.customAttributes.hue = function (num) {\n\t             |     num = num % 1;\n\t             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n\t             | };\n\t             | // Custom attribute “hue” will change fill\n\t             | // to be given hue with fixed saturation and brightness.\n\t             | // Now you can use it like this:\n\t             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n\t             | // or even like this:\n\t             | c.animate({hue: 1}, 1e3);\n\t             |\n\t             | // You could also create custom attribute\n\t             | // with multiple parameters:\n\t             | paper.customAttributes.hsb = function (h, s, b) {\n\t             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n\t             | };\n\t             | c.attr({hsb: \"0.5 .8 1\"});\n\t             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n\t            \\*/\n\t            this.ca = this.customAttributes = {};\n\t        },\n\t        paperproto,\n\t        appendChild = \"appendChild\",\n\t        apply = \"apply\",\n\t        concat = \"concat\",\n\t        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n\t        E = \"\",\n\t        S = \" \",\n\t        Str = String,\n\t        split = \"split\",\n\t        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n\t        touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t        lowerCase = Str.prototype.toLowerCase,\n\t        math = Math,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        PI = math.PI,\n\t        nu = \"number\",\n\t        string = \"string\",\n\t        array = \"array\",\n\t        toString = \"toString\",\n\t        fillString = \"fill\",\n\t        objectToString = Object.prototype.toString,\n\t        paper = {},\n\t        push = \"push\",\n\t        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n\t        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n\t        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n\t        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t        round = math.round,\n\t        setAttribute = \"setAttribute\",\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        upperCase = Str.prototype.toUpperCase,\n\t        availableAttrs = R._availableAttrs = {\n\t            \"arrow-end\": \"none\",\n\t            \"arrow-start\": \"none\",\n\t            blur: 0,\n\t            \"clip-rect\": \"0 0 1e9 1e9\",\n\t            cursor: \"default\",\n\t            cx: 0,\n\t            cy: 0,\n\t            fill: \"#fff\",\n\t            \"fill-opacity\": 1,\n\t            font: '10px \"Arial\"',\n\t            \"font-family\": '\"Arial\"',\n\t            \"font-size\": \"10\",\n\t            \"font-style\": \"normal\",\n\t            \"font-weight\": 400,\n\t            gradient: 0,\n\t            height: 0,\n\t            href: \"http://raphaeljs.com/\",\n\t            \"letter-spacing\": 0,\n\t            opacity: 1,\n\t            path: \"M0,0\",\n\t            r: 0,\n\t            rx: 0,\n\t            ry: 0,\n\t            src: \"\",\n\t            stroke: \"#000\",\n\t            \"stroke-dasharray\": \"\",\n\t            \"stroke-linecap\": \"butt\",\n\t            \"stroke-linejoin\": \"butt\",\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 1,\n\t            \"stroke-width\": 1,\n\t            target: \"_blank\",\n\t            \"text-anchor\": \"middle\",\n\t            title: \"Raphael\",\n\t            transform: \"\",\n\t            width: 0,\n\t            x: 0,\n\t            y: 0,\n\t            \"class\": \"\"\n\t        },\n\t        availableAnimAttrs = R._availableAnimAttrs = {\n\t            blur: nu,\n\t            \"clip-rect\": \"csv\",\n\t            cx: nu,\n\t            cy: nu,\n\t            fill: \"colour\",\n\t            \"fill-opacity\": nu,\n\t            \"font-size\": nu,\n\t            height: nu,\n\t            opacity: nu,\n\t            path: \"path\",\n\t            r: nu,\n\t            rx: nu,\n\t            ry: nu,\n\t            stroke: \"colour\",\n\t            \"stroke-opacity\": nu,\n\t            \"stroke-width\": nu,\n\t            transform: \"transform\",\n\t            width: nu,\n\t            x: nu,\n\t            y: nu\n\t        },\n\t        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n\t        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n\t        hsrg = {hs: 1, rg: 1},\n\t        p2s = /,?([achlmqrstvxz]),?/gi,\n\t        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n\t        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n\t        eldata = {},\n\t        sortByKey = function (a, b) {\n\t            return a.key - b.key;\n\t        },\n\t        sortByNumber = function (a, b) {\n\t            return toFloat(a) - toFloat(b);\n\t        },\n\t        fun = function () {},\n\t        pipe = function (x) {\n\t            return x;\n\t        },\n\t        rectPath = R._rectPath = function (x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        },\n\t        ellipsePath = function (x, y, rx, ry) {\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t        },\n\t        getPath = R._getPath = {\n\t            path: function (el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.r);\n\t            },\n\t            ellipse: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n\t            },\n\t            rect: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height, a.r);\n\t            },\n\t            image: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height);\n\t            },\n\t            text: function (el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            },\n\t            set : function(el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        },\n\t        /*\\\n\t         * Raphael.mapPath\n\t         [ method ]\n\t         **\n\t         * Transform the path string with given matrix.\n\t         > Parameters\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        mapPath = R.mapPath = function (path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        };\n\n\t    R._g = g;\n\t    /*\\\n\t     * Raphael.type\n\t     [ property (string) ]\n\t     **\n\t     * Can be “SVG”, “VML” or empty, depending on browser support.\n\t    \\*/\n\t    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n\t    if (R.type == \"VML\") {\n\t        var d = g.doc.createElement(\"div\"),\n\t            b;\n\t        d.innerHTML = '<v:shape adj=\"1\"/>';\n\t        b = d.firstChild;\n\t        b.style.behavior = \"url(#default#VML)\";\n\t        if (!(b && typeof b.adj == \"object\")) {\n\t            return (R.type = E);\n\t        }\n\t        d = null;\n\t    }\n\t    /*\\\n\t     * Raphael.svg\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports SVG.\n\t    \\*/\n\t    /*\\\n\t     * Raphael.vml\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports VML.\n\t    \\*/\n\t    R.svg = !(R.vml = R.type == \"VML\");\n\t    R._Paper = Paper;\n\t    /*\\\n\t     * Raphael.fn\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n\t     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n\t     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n\t     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n\t     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n\t     * ensure any namespacing ensures proper context.\n\t     > Usage\n\t     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n\t     |     return this.path( ... );\n\t     | };\n\t     | // or create namespace\n\t     | Raphael.fn.mystuff = {\n\t     |     arrow: function () {…},\n\t     |     star: function () {…},\n\t     |     // etc…\n\t     | };\n\t     | var paper = Raphael(10, 10, 630, 480);\n\t     | // then use it\n\t     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n\t     | paper.mystuff.arrow();\n\t     | paper.mystuff.star();\n\t    \\*/\n\t    R.fn = paperproto = Paper.prototype = R.prototype;\n\t    R._id = 0;\n\t    /*\\\n\t     * Raphael.is\n\t     [ method ]\n\t     **\n\t     * Handful of replacements for `typeof` operator.\n\t     > Parameters\n\t     - o (…) any object or primitive\n\t     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n\t     = (boolean) is given value is of given type\n\t    \\*/\n\t    R.is = function (o, type) {\n\t        type = lowerCase.call(type);\n\t        if (type == \"finite\") {\n\t            return !isnan[has](+o);\n\t        }\n\t        if (type == \"array\") {\n\t            return o instanceof Array;\n\t        }\n\t        return  (type == \"null\" && o === null) ||\n\t                (type == typeof o && o !== null) ||\n\t                (type == \"object\" && o === Object(o)) ||\n\t                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n\t                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t    };\n\n\t    function clone(obj) {\n\t        if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t            return obj;\n\t        }\n\t        var res = new obj.constructor;\n\t        for (var key in obj) if (obj[has](key)) {\n\t            res[key] = clone(obj[key]);\n\t        }\n\t        return res;\n\t    }\n\n\t    /*\\\n\t     * Raphael.angle\n\t     [ method ]\n\t     **\n\t     * Returns angle between two or three points\n\t     > Parameters\n\t     - x1 (number) x coord of first point\n\t     - y1 (number) y coord of first point\n\t     - x2 (number) x coord of second point\n\t     - y2 (number) y coord of second point\n\t     - x3 (number) #optional x coord of third point\n\t     - y3 (number) #optional y coord of third point\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.angle = function (x1, y1, x2, y2, x3, y3) {\n\t        if (x3 == null) {\n\t            var x = x1 - x2,\n\t                y = y1 - y2;\n\t            if (!x && !y) {\n\t                return 0;\n\t            }\n\t            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t        } else {\n\t            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n\t        }\n\t    };\n\t    /*\\\n\t     * Raphael.rad\n\t     [ method ]\n\t     **\n\t     * Transform angle to radians\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     = (number) angle in radians.\n\t    \\*/\n\t    R.rad = function (deg) {\n\t        return deg % 360 * PI / 180;\n\t    };\n\t    /*\\\n\t     * Raphael.deg\n\t     [ method ]\n\t     **\n\t     * Transform angle to degrees\n\t     > Parameters\n\t     - rad (number) angle in radians\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.deg = function (rad) {\n\t        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n\t    };\n\t    /*\\\n\t     * Raphael.snapTo\n\t     [ method ]\n\t     **\n\t     * Snaps given value to given grid.\n\t     > Parameters\n\t     - values (array|number) given array of values or step of the grid\n\t     - value (number) value to adjust\n\t     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n\t     = (number) adjusted value.\n\t    \\*/\n\t    R.snapTo = function (values, value, tolerance) {\n\t        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\t        if (R.is(values, array)) {\n\t            var i = values.length;\n\t            while (i--) if (abs(values[i] - value) <= tolerance) {\n\t                return values[i];\n\t            }\n\t        } else {\n\t            values = +values;\n\t            var rem = value % values;\n\t            if (rem < tolerance) {\n\t                return value - rem;\n\t            }\n\t            if (rem > values - tolerance) {\n\t                return value - rem + values;\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /*\\\n\t     * Raphael.createUUID\n\t     [ method ]\n\t     **\n\t     * Returns RFC4122, version 4 ID\n\t    \\*/\n\t    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n\t        return function () {\n\t            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n\t        };\n\t    })(/[xy]/g, function (c) {\n\t        var r = math.random() * 16 | 0,\n\t            v = c == \"x\" ? r : (r & 3 | 8);\n\t        return v.toString(16);\n\t    });\n\n\t    /*\\\n\t     * Raphael.setWindow\n\t     [ method ]\n\t     **\n\t     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n\t     > Parameters\n\t     - newwin (window) new window object\n\t    \\*/\n\t    R.setWindow = function (newwin) {\n\t        eve(\"raphael.setWindow\", R, g.win, newwin);\n\t        g.win = newwin;\n\t        g.doc = g.win.document;\n\t        if (R._engine.initWin) {\n\t            R._engine.initWin(g.win);\n\t        }\n\t    };\n\t    var toHex = function (color) {\n\t        if (R.vml) {\n\t            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n\t            var trim = /^\\s+|\\s+$/g;\n\t            var bod;\n\t            try {\n\t                var docum = new ActiveXObject(\"htmlfile\");\n\t                docum.write(\"<body>\");\n\t                docum.close();\n\t                bod = docum.body;\n\t            } catch(e) {\n\t                bod = createPopup().document.body;\n\t            }\n\t            var range = bod.createTextRange();\n\t            toHex = cacher(function (color) {\n\t                try {\n\t                    bod.style.color = Str(color).replace(trim, E);\n\t                    var value = range.queryCommandValue(\"ForeColor\");\n\t                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n\t                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n\t                } catch(e) {\n\t                    return \"none\";\n\t                }\n\t            });\n\t        } else {\n\t            var i = g.doc.createElement(\"i\");\n\t            i.title = \"Rapha\\xebl Colour Picker\";\n\t            i.style.display = \"none\";\n\t            g.doc.body.appendChild(i);\n\t            toHex = cacher(function (color) {\n\t                i.style.color = color;\n\t                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t            });\n\t        }\n\t        return toHex(color);\n\t    },\n\t    hsbtoString = function () {\n\t        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t    },\n\t    hsltoString = function () {\n\t        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t    },\n\t    rgbtoString = function () {\n\t        return this.hex;\n\t    },\n\t    prepareRGB = function (r, g, b) {\n\t        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t            b = r.b;\n\t            g = r.g;\n\t            r = r.r;\n\t        }\n\t        if (g == null && R.is(r, string)) {\n\t            var clr = R.getRGB(r);\n\t            r = clr.r;\n\t            g = clr.g;\n\t            b = clr.b;\n\t        }\n\t        if (r > 1 || g > 1 || b > 1) {\n\t            r /= 255;\n\t            g /= 255;\n\t            b /= 255;\n\t        }\n\n\t        return [r, g, b];\n\t    },\n\t    packageRGB = function (r, g, b, o) {\n\t        r *= 255;\n\t        g *= 255;\n\t        b *= 255;\n\t        var rgb = {\n\t            r: r,\n\t            g: g,\n\t            b: b,\n\t            hex: R.rgb(r, g, b),\n\t            toString: rgbtoString\n\t        };\n\t        R.is(o, \"finite\") && (rgb.opacity = o);\n\t        return rgb;\n\t    };\n\n\t    /*\\\n\t     * Raphael.color\n\t     [ method ]\n\t     **\n\t     * Parses the color string and returns object with all values for the given color.\n\t     > Parameters\n\t     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n\t     = (object) Combined RGB & HSB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) `true` if string can’t be parsed,\n\t     o     h (number) hue,\n\t     o     s (number) saturation,\n\t     o     v (number) value (brightness),\n\t     o     l (number) lightness\n\t     o }\n\t    \\*/\n\t    R.color = function (clr) {\n\t        var rgb;\n\t        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t            rgb = R.hsb2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t            rgb = R.hsl2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else {\n\t            if (R.is(clr, \"string\")) {\n\t                clr = R.getRGB(clr);\n\t            }\n\t            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n\t                rgb = R.rgb2hsl(clr);\n\t                clr.h = rgb.h;\n\t                clr.s = rgb.s;\n\t                clr.l = rgb.l;\n\t                rgb = R.rgb2hsb(clr);\n\t                clr.v = rgb.b;\n\t            } else {\n\t                clr = {hex: \"none\"};\n\t                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            }\n\t        }\n\t        clr.toString = rgbtoString;\n\t        return clr;\n\t    };\n\t    /*\\\n\t     * Raphael.hsb2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - v (number) value or brightness\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsb2rgb = function (h, s, v, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t            v = h.b;\n\t            s = h.s;\n\t            o = h.o;\n\t            h = h.h;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = v * s;\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = v - C;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.hsl2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsl2rgb = function (h, s, l, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t            l = h.l;\n\t            s = h.s;\n\t            h = h.h;\n\t        }\n\t        if (h > 1 || s > 1 || l > 1) {\n\t            h /= 360;\n\t            s /= 100;\n\t            l /= 100;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = 2 * s * (l < .5 ? l : 1 - l);\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = l - C / 2;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSB object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSB object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     b (number) brightness\n\t     o }\n\t    \\*/\n\t    R.rgb2hsb = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, V, C;\n\t        V = mmax(r, g, b);\n\t        C = V - mmin(r, g, b);\n\t        H = (C == 0 ? null :\n\t             V == r ? (g - b) / C :\n\t             V == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4\n\t            );\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        S = C == 0 ? 0 : C / V;\n\t        return {h: H, s: S, b: V, toString: hsbtoString};\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsl\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSL object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSL object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     l (number) luminosity\n\t     o }\n\t    \\*/\n\t    R.rgb2hsl = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, L, M, m, C;\n\t        M = mmax(r, g, b);\n\t        m = mmin(r, g, b);\n\t        C = M - m;\n\t        H = (C == 0 ? null :\n\t             M == r ? (g - b) / C :\n\t             M == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4);\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        L = (M + m) / 2;\n\t        S = (C == 0 ? 0 :\n\t             L < .5 ? C / (2 * L) :\n\t                      C / (2 - 2 * L));\n\t        return {h: H, s: S, l: L, toString: hsltoString};\n\t    };\n\t    R._path2string = function () {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    };\n\t    function repush(array, item) {\n\t        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t            return array.push(array.splice(i, 1)[0]);\n\t        }\n\t    }\n\t    function cacher(f, scope, postprocessor) {\n\t        function newf() {\n\t            var arg = Array.prototype.slice.call(arguments, 0),\n\t                args = arg.join(\"\\u2400\"),\n\t                cache = newf.cache = newf.cache || {},\n\t                count = newf.count = newf.count || [];\n\t            if (cache[has](args)) {\n\t                repush(count, args);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            count.length >= 1e3 && delete cache[count.shift()];\n\t            count.push(args);\n\t            cache[args] = f[apply](scope, arg);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        return newf;\n\t    }\n\n\t    var preload = R._preload = function (src, f) {\n\t        var img = g.doc.createElement(\"img\");\n\t        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t        img.onload = function () {\n\t            f.call(this);\n\t            this.onload = null;\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        img.onerror = function () {\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        g.doc.body.appendChild(img);\n\t        img.src = src;\n\t    };\n\n\t    function clrToString() {\n\t        return this.hex;\n\t    }\n\n\t    /*\\\n\t     * Raphael.getRGB\n\t     [ method ]\n\t     **\n\t     * Parses colour string as RGB object\n\t     > Parameters\n\t     - colour (string) colour string in one of formats:\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n\t     # </ul>\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) true if string can’t be parsed\n\t     o }\n\t    \\*/\n\t    R.getRGB = cacher(function (colour) {\n\t        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t        }\n\t        if (colour == \"none\") {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n\t        }\n\t        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t        var res,\n\t            red,\n\t            green,\n\t            blue,\n\t            opacity,\n\t            t,\n\t            values,\n\t            rgb = colour.match(colourRegExp);\n\t        if (rgb) {\n\t            if (rgb[2]) {\n\t                blue = toInt(rgb[2].substring(5), 16);\n\t                green = toInt(rgb[2].substring(3, 5), 16);\n\t                red = toInt(rgb[2].substring(1, 3), 16);\n\t            }\n\t            if (rgb[3]) {\n\t                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t            }\n\t            if (rgb[4]) {\n\t                values = rgb[4][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            }\n\t            if (rgb[5]) {\n\t                values = rgb[5][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsb2rgb(red, green, blue, opacity);\n\t            }\n\t            if (rgb[6]) {\n\t                values = rgb[6][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsl2rgb(red, green, blue, opacity);\n\t            }\n\t            rgb = {r: red, g: green, b: blue, toString: clrToString};\n\t            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n\t            return rgb;\n\t        }\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t    }, R);\n\t    /*\\\n\t     * Raphael.hsb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - b (number) value or brightness\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsb = cacher(function (h, s, b) {\n\t        return R.hsb2rgb(h, s, b).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.hsl\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsl = cacher(function (h, s, l) {\n\t        return R.hsl2rgb(h, s, l).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.rgb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to hex representation of the colour.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.rgb = cacher(function (r, g, b) {\n\t        function round(x) { return (x + 0.5) | 0; }\n\t        return \"#\" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n\t    });\n\t    /*\\\n\t     * Raphael.getColor\n\t     [ method ]\n\t     **\n\t     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n\t     > Parameters\n\t     - value (number) #optional brightness, default is `0.75`\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.getColor = function (value) {\n\t        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n\t            rgb = this.hsb2rgb(start.h, start.s, start.b);\n\t        start.h += .075;\n\t        if (start.h > 1) {\n\t            start.h = 0;\n\t            start.s -= .2;\n\t            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n\t        }\n\t        return rgb.hex;\n\t    };\n\t    /*\\\n\t     * Raphael.getColor.reset\n\t     [ method ]\n\t     **\n\t     * Resets spectrum position for @Raphael.getColor back to red.\n\t    \\*/\n\t    R.getColor.reset = function () {\n\t        delete this.start;\n\t    };\n\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\n\t        return d;\n\t    }\n\t    /*\\\n\t     * Raphael.parsePathString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of arrays of path segments.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.parsePathString = function (pathString) {\n\t        if (!pathString) {\n\t            return null;\n\t        }\n\t        var pth = paths(pathString);\n\t        if (pth.arr) {\n\t            return pathClone(pth.arr);\n\t        }\n\n\t        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n\t            data = [];\n\t        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n\t            data = pathClone(pathString);\n\t        }\n\t        if (!data.length) {\n\t            Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = b.toLowerCase();\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                if (name == \"m\" && params.length > 2) {\n\t                    data.push([b][concat](params.splice(0, 2)));\n\t                    name = \"l\";\n\t                    b = b == \"m\" ? \"l\" : \"L\";\n\t                }\n\t                if (name == \"r\") {\n\t                    data.push([b][concat](params));\n\t                } else while (params.length >= paramCounts[name]) {\n\t                    data.push([b][concat](params.splice(0, paramCounts[name])));\n\t                    if (!paramCounts[name]) {\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        pth.arr = pathClone(data);\n\t        return data;\n\t    };\n\t    /*\\\n\t     * Raphael.parseTransformString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of transformations.\n\t     > Parameters\n\t     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n\t     = (array) array of transformations.\n\t    \\*/\n\t    R.parseTransformString = cacher(function (TString) {\n\t        if (!TString) {\n\t            return null;\n\t        }\n\t        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t            data = [];\n\t        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n\t            data = pathClone(TString);\n\t        }\n\t        if (!data.length) {\n\t            Str(TString).replace(tCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = lowerCase.call(b);\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                data.push([b][concat](params));\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        return data;\n\t    });\n\t    // PATHS\n\t    var paths = function (ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    };\n\t    /*\\\n\t     * Raphael.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Find dot coordinates on the given cubic bezier curve at the given t.\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point\n\t     o     y: (number) y coordinate of the point\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     }\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     }\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     }\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     }\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given cubic bezier curve\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for bezier curve\n\t     = (object) point information in format:\n\t     o {\n\t     o     min: {\n\t     o         x: (number) x coordinate of the left point\n\t     o         y: (number) y coordinate of the top point\n\t     o     }\n\t     o     max: {\n\t     o         x: (number) x coordinate of the right point\n\t     o         y: (number) y coordinate of the bottom point\n\t     o     }\n\t     o }\n\t    \\*/\n\t    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!R.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return {\n\t            x: bbox.min.x,\n\t            y: bbox.min.y,\n\t            x2: bbox.max.x,\n\t            y2: bbox.max.y,\n\t            width: bbox.max.x - bbox.min.x,\n\t            height: bbox.max.y - bbox.min.y\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding boxes.\n\t     > Parameters\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point inside\n\t    \\*/\n\t    R.isPointInsideBBox = function (bbox, x, y) {\n\t        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n\t    };\n\t    /*\\\n\t     * Raphael.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     > Parameters\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if they intersect\n\t    \\*/\n\t    R.isBBoxIntersect = function (bbox1, bbox2) {\n\t        var i = R.isPointInsideBBox;\n\t        return i(bbox2, bbox1.x, bbox1.y)\n\t            || i(bbox2, bbox1.x2, bbox1.y)\n\t            || i(bbox2, bbox1.x, bbox1.y2)\n\t            || i(bbox2, bbox1.x2, bbox1.y2)\n\t            || i(bbox1, bbox2.x, bbox2.y)\n\t            || i(bbox1, bbox2.x2, bbox2.y)\n\t            || i(bbox1, bbox2.x, bbox2.y2)\n\t            || i(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    };\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = R.bezierBBox(bez1),\n\t            bbox2 = R.bezierBBox(bez2);\n\t        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = mmax(~~(l1 / 5), 1),\n\t            n2 = mmax(~~(l2 / 5), 1),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: mmin(t1, 1),\n\t                                t2: mmin(t2, 1)\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.pathIntersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     > Parameters\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point\n\t     o         y: (number) y coordinate of the point\n\t     o         t1: (number) t value for segment of path1\n\t     o         t2: (number) t value for segment of path2\n\t     o         segment1: (number) order number for segment of path1\n\t     o         segment2: (number) order number for segment of path2\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    R.pathIntersection = function (path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    };\n\t    R.pathIntersectionNumber = function (path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    };\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = R._path2curve(path1);\n\t        path2 = R._path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.isPointInsidePath\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     > Parameters\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) true, if point is inside the path\n\t    \\*/\n\t    R.isPointInsidePath = function (path, x, y) {\n\t        var bbox = R.pathBBox(path);\n\t        return R.isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    };\n\t    R._removedFactory = function (methodname) {\n\t        return function () {\n\t            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given path\n\t     > Parameters\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box\n\t     o     y: (number) y coordinate of the left top point of the box\n\t     o     x2: (number) x coordinate of the right bottom point of the box\n\t     o     y2: (number) y coordinate of the right bottom point of the box\n\t     o     width: (number) width of the box\n\t     o     height: (number) height of the box\n\t     o     cx: (number) x coordinate of the center of the box\n\t     o     cy: (number) y coordinate of the center of the box\n\t     o }\n\t    \\*/\n\t    var pathDimensions = R.pathBBox = function (path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X[concat](dim.min.x, dim.max.x);\n\t                Y = Y[concat](dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin[apply](0, X),\n\t            ymin = mmin[apply](0, Y),\n\t            xmax = mmax[apply](0, X),\n\t            ymax = mmax[apply](0, Y),\n\t            width = xmax - xmin,\n\t            height = ymax - ymin,\n\t                bb = {\n\t                x: xmin,\n\t                y: ymin,\n\t                x2: xmax,\n\t                y2: ymax,\n\t                width: width,\n\t                height: height,\n\t                cx: xmin + width / 2,\n\t                cy: ymin + height / 2\n\t            };\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    },\n\t        pathClone = function (pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = R._path2string;\n\t            return res;\n\t        },\n\t        pathToRelative = R._pathToRelative = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        },\n\t        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                if (pa[0] != upperCase.call(pa[0])) {\n\t                    r[0] = upperCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] + x);\n\t                            r[7] = +(pa[7] + y);\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y][concat](pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res[concat](catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa[0] == \"R\") {\n\t                    dots = [x, y][concat](pa.slice(1));\n\t                    res.pop();\n\t                    res = res[concat](catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"][concat](pa.slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        },\n\t        l2c = function (x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        },\n\t        q2c = function (x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [\n\t                    _13 * x1 + _23 * ax,\n\t                    _13 * y1 + _23 * ay,\n\t                    _13 * x2 + _23 * ax,\n\t                    _13 * y2 + _23 * ay,\n\t                    x2,\n\t                    y2\n\t                ];\n\t        },\n\t        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = cacher(function (x, y, rad) {\n\t                    var X = x * math.cos(rad) - y * math.sin(rad),\n\t                        Y = x * math.sin(rad) + y * math.cos(rad);\n\t                    return {x: X, y: Y};\n\t                });\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4][concat](res);\n\t            } else {\n\t                res = [m2, m3, m4][concat](res).join()[split](\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        },\n\t        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        },\n\t        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n\t                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n\t                c = p1x - c1x,\n\t                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                y = [p1y, p2y],\n\t                x = [p1x, p2x],\n\t                dot;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n\t            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n\t            c = p1y - c1y;\n\t            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            return {\n\t                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n\t                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n\t            };\n\t        }),\n\t        path2curve = R._path2curve = cacher(function (path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                processPath = function (path, d, pcom) {\n\t                    var nx, ny, tq = {T:1, Q:1};\n\t                    if (!path) {\n\t                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                    }\n\t                    !(path[0] in tq) && (d.qx = d.qy = null);\n\t                    switch (path[0]) {\n\t                        case \"M\":\n\t                            d.X = path[1];\n\t                            d.Y = path[2];\n\t                            break;\n\t                        case \"A\":\n\t                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n\t                            break;\n\t                        case \"S\":\n\t                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                                nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                            }\n\t                            else {                            // or some else or nothing\n\t                                nx = d.x;\n\t                                ny = d.y;\n\t                            }\n\t                            path = [\"C\", nx, ny][concat](path.slice(1));\n\t                            break;\n\t                        case \"T\":\n\t                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                            }\n\t                            else {                            // or something else or nothing\n\t                                d.qx = d.x;\n\t                                d.qy = d.y;\n\t                            }\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                            break;\n\t                        case \"Q\":\n\t                            d.qx = path[1];\n\t                            d.qy = path[2];\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                            break;\n\t                        case \"L\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n\t                            break;\n\t                        case \"H\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n\t                            break;\n\t                        case \"V\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n\t                            break;\n\t                        case \"Z\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n\t                            break;\n\t                    }\n\t                    return path;\n\t                },\n\t                fixArc = function (pp, i) {\n\t                    if (pp[i].length > 7) {\n\t                        pp[i].shift();\n\t                        var pi = pp[i];\n\t                        while (pi.length) {\n\t                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n\t                            p2 && (pcoms2[i]=\"A\"); // the same as above\n\t                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n\t                        }\n\t                        pp.splice(i, 1);\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                fixM = function (path1, path2, a1, a2, i) {\n\t                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                        a1.bx = 0;\n\t                        a1.by = 0;\n\t                        a1.x = path1[i][1];\n\t                        a1.y = path1[i][2];\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                pcoms1 = [], // path commands of original path p\n\t                pcoms2 = [], // path commands of original path p2\n\t                pfirst = \"\", // temporary holder for original path command\n\t                pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                {\n\t                    pcoms1[i] = pfirst; // Save current path command\n\t                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n\t                }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n\t                if (p2) { // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\")\n\t                    {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i-1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n\t                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }, null, pathClone),\n\t        parseDots = R._parseDots = cacher(function (gradient) {\n\t            var dots = [];\n\t            for (var i = 0, ii = gradient.length; i < ii; i++) {\n\t                var dot = {},\n\t                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n\t                dot.color = R.getRGB(par[1]);\n\t                if (dot.color.error) {\n\t                    return null;\n\t                }\n\t                dot.opacity = dot.color.opacity;\n\t                dot.color = dot.color.hex;\n\t                par[2] && (dot.offset = par[2] + \"%\");\n\t                dots.push(dot);\n\t            }\n\t            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n\t                if (!dots[i].offset) {\n\t                    var start = toFloat(dots[i - 1].offset || 0),\n\t                        end = 0;\n\t                    for (var j = i + 1; j < ii; j++) {\n\t                        if (dots[j].offset) {\n\t                            end = dots[j].offset;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!end) {\n\t                        end = 100;\n\t                        j = ii;\n\t                    }\n\t                    end = toFloat(end);\n\t                    var d = (end - start) / (j - i + 1);\n\t                    for (; i < j; i++) {\n\t                        start += d;\n\t                        dots[i].offset = start + \"%\";\n\t                    }\n\t                }\n\t            }\n\t            return dots;\n\t        }),\n\t        tear = R._tear = function (el, paper) {\n\t            el == paper.top && (paper.top = el.prev);\n\t            el == paper.bottom && (paper.bottom = el.next);\n\t            el.next && (el.next.prev = el.prev);\n\t            el.prev && (el.prev.next = el.next);\n\t        },\n\t        tofront = R._tofront = function (el, paper) {\n\t            if (paper.top === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = null;\n\t            el.prev = paper.top;\n\t            paper.top.next = el;\n\t            paper.top = el;\n\t        },\n\t        toback = R._toback = function (el, paper) {\n\t            if (paper.bottom === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = paper.bottom;\n\t            el.prev = null;\n\t            paper.bottom.prev = el;\n\t            paper.bottom = el;\n\t        },\n\t        insertafter = R._insertafter = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.top && (paper.top = el);\n\t            el2.next && (el2.next.prev = el);\n\t            el.next = el2.next;\n\t            el.prev = el2;\n\t            el2.next = el;\n\t        },\n\t        insertbefore = R._insertbefore = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.bottom && (paper.bottom = el);\n\t            el2.prev && (el2.prev.next = el);\n\t            el.prev = el2.prev;\n\t            el2.prev = el;\n\t            el.next = el2;\n\t        },\n\t        /*\\\n\t         * Raphael.toMatrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns matrix of transformations applied to a given path\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (object) @Matrix\n\t        \\*/\n\t        toMatrix = R.toMatrix = function (path, transform) {\n\t            var bb = pathDimensions(path),\n\t                el = {\n\t                    _: {\n\t                        transform: E\n\t                    },\n\t                    getBBox: function () {\n\t                        return bb;\n\t                    }\n\t                };\n\t            extractTransform(el, transform);\n\t            return el.matrix;\n\t        },\n\t        /*\\\n\t         * Raphael.transformPath\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns path transformed by a given transformation\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (string) path\n\t        \\*/\n\t        transformPath = R.transformPath = function (path, transform) {\n\t            return mapPath(path, toMatrix(path, transform));\n\t        },\n\t        extractTransform = R._extractTransform = function (el, tstr) {\n\t            if (tstr == null) {\n\t                return el._.transform;\n\t            }\n\t            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            var tdata = R.parseTransformString(tstr),\n\t                deg = 0,\n\t                dx = 0,\n\t                dy = 0,\n\t                sx = 1,\n\t                sy = 1,\n\t                _ = el._,\n\t                m = new Matrix;\n\t            _.transform = tdata || [];\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            deg += t[1];\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                            deg += t[1];\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            sx *= t[1];\n\t                            sy *= t[tlen - 1];\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                            sx *= t[1];\n\t                            sy *= t[2];\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                    _.dirtyT = 1;\n\t                    el.matrix = m;\n\t                }\n\t            }\n\n\t            /*\\\n\t             * Element.matrix\n\t             [ property (object) ]\n\t             **\n\t             * Keeps @Matrix object, which represents element transformation\n\t            \\*/\n\t            el.matrix = m;\n\n\t            _.sx = sx;\n\t            _.sy = sy;\n\t            _.deg = deg;\n\t            _.dx = dx = m.e;\n\t            _.dy = dy = m.f;\n\n\t            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n\t                _.bbox.x += +dx;\n\t                _.bbox.y += +dy;\n\t            } else {\n\t                _.dirtyT = 1;\n\t            }\n\t        },\n\t        getEmpty = function (item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\": return [l, 0, 0];\n\t                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\": if (item.length == 4) {\n\t                    return [l, 0, item[2], item[3]];\n\t                } else {\n\t                    return [l, 0];\n\t                }\n\t                case \"s\": if (item.length == 5) {\n\t                    return [l, 1, 1, item[3], item[4]];\n\t                } else if (item.length == 3) {\n\t                    return [l, 1, 1];\n\t                } else {\n\t                    return [l, 1];\n\t                }\n\t            }\n\t        },\n\t        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n\t            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t            t1 = R.parseTransformString(t1) || [];\n\t            t2 = R.parseTransformString(t2) || [];\n\t            var maxlength = mmax(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0, j, jj,\n\t                tt1, tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if ((tt1[0] != tt2[0]) ||\n\t                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                    ) {\n\t                    return;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: from,\n\t                to: to\n\t            };\n\t        };\n\t    R._getContainer = function (x, y, w, h) {\n\t        var container;\n\t        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\t        if (container == null) {\n\t            return;\n\t        }\n\t        if (container.tagName) {\n\t            if (y == null) {\n\t                return {\n\t                    container: container,\n\t                    width: container.style.pixelWidth || container.offsetWidth,\n\t                    height: container.style.pixelHeight || container.offsetHeight\n\t                };\n\t            } else {\n\t                return {\n\t                    container: container,\n\t                    width: y,\n\t                    height: w\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            container: 1,\n\t            x: x,\n\t            y: y,\n\t            width: w,\n\t            height: h\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathToRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to relative form\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.pathToRelative = pathToRelative;\n\t    R._engine = {};\n\t    /*\\\n\t     * Raphael.path2curve\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic bezier curves.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.path2curve = path2curve;\n\t    /*\\\n\t     * Raphael.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns matrix based on given parameters.\n\t     > Parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     = (object) @Matrix\n\t    \\*/\n\t    R.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds given matrix to existing one.\n\t         > Parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number) #optional\n\t         - cx (number) #optional\n\t         - cy (number) #optional\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         > Parameters\n\t         - a (number)\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = R.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return R.svg ?\n\t                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n\t                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n\t        };\n\t        matrixproto.toFilter = function () {\n\t            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n\t                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n\t                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = R.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = R.deg(math.asin(sin));\n\t            }\n\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Return transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this[split]();\n\t            if (s.isSimple) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\n\t    var preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    getEventPosition = function (e) {\n\t        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n\t        return {\n\t            x: e.clientX + scrollX,\n\t            y: e.clientY + scrollY\n\t        };\n\t    },\n\t    addEvent = (function () {\n\t        if (g.doc.addEventListener) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    var pos = getEventPosition(e);\n\t                    return fn.call(element, e, pos.x, pos.y);\n\t                };\n\t                obj.addEventListener(type, f, false);\n\n\t                if (supportsTouch && touchMap[type]) {\n\t                    var _f = function (e) {\n\t                        var pos = getEventPosition(e),\n\t                            olde = e;\n\n\t                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                            if (e.targetTouches[i].target == obj) {\n\t                                e = e.targetTouches[i];\n\t                                e.originalEvent = olde;\n\t                                e.preventDefault = preventTouch;\n\t                                e.stopPropagation = stopTouch;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        return fn.call(element, e, pos.x, pos.y);\n\t                    };\n\t                    obj.addEventListener(touchMap[type], _f, false);\n\t                }\n\n\t                return function () {\n\t                    obj.removeEventListener(type, f, false);\n\n\t                    if (supportsTouch && touchMap[type])\n\t                        obj.removeEventListener(touchMap[type], _f, false);\n\n\t                    return true;\n\t                };\n\t            };\n\t        } else if (g.doc.attachEvent) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    e = e || g.win.event;\n\t                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t                        x = e.clientX + scrollX,\n\t                        y = e.clientY + scrollY;\n\t                    e.preventDefault = e.preventDefault || preventDefault;\n\t                    e.stopPropagation = e.stopPropagation || stopPropagation;\n\t                    return fn.call(element, e, x, y);\n\t                };\n\t                obj.attachEvent(\"on\" + type, f);\n\t                var detacher = function () {\n\t                    obj.detachEvent(\"on\" + type, f);\n\t                    return true;\n\t                };\n\t                return detacher;\n\t            };\n\t        }\n\t    })(),\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            g.win.opera && parent.removeChild(node);\n\t            node.style.display = \"none\";\n\t            o = dragi.el.paper.getElementByPoint(x, y);\n\t            node.style.display = display;\n\t            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        R.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t        }\n\t        drag = [];\n\t    },\n\t    /*\\\n\t     * Raphael.el\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements. This is useful when you want to hack default functionality or\n\t     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n\t     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | // then use it\n\t     | paper.circle(100, 100, 20).red();\n\t    \\*/\n\t    elproto = R.el = {};\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            R[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (R.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n\t                }\n\t                return this;\n\t            };\n\t            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--){\n\t                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n\t                        events[l].unbind();\n\t                        events.splice(l, 1);\n\t                        !events.length && delete this.events;\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key.\n\t     **\n\t     * See also @Element.removeData\n\t     > Parameters\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     * or, if key and value are not specified:\n\t     = (object) Key/value pairs for all the data associated with the element.\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0) {\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (R.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"raphael.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     > Parameters\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t     /*\\\n\t     * Element.getData\n\t     [ method ]\n\t     **\n\t     * Retrieves the element data\n\t     = (object) data\n\t    \\*/\n\t    elproto.getData = function () {\n\t        return clone(eldata[this.id] || {});\n\t    };\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for drag of the element.\n\t     > Parameters\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n\t     * `drag.over.<id>` will be fired as well.\n\t     *\n\t     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler will be called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        function start(e) {\n\t            (e.originalEvent || e).preventDefault();\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\t            this._drag.id = e.identifier;\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length, touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    this._drag.id = touch.identifier;\n\t                    if (touch.identifier == this._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this._drag.x = x + scrollX;\n\t            this._drag.y = y + scrollY;\n\t            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n\t            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n\t            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n\t            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n\t        }\n\t        this._drag = {};\n\t        draggable.push({el: this, start: start});\n\t        this.mousedown(start);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n\t     > Parameters\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    elproto.onDragOver = function (f) {\n\t        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n\t    };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from given element.\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].start);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"raphael.drag.*.\" + this.id);\n\t        }\n\t        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) Raphaël element object with type “circle”\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    paperproto.circle = function (x, y, r) {\n\t        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - r (number) #optional radius for rounded corners, default is 0\n\t     = (object) Raphaël element object with type “rect”\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    paperproto.rect = function (x, y, w, h, r) {\n\t        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) Raphaël element object with type “ellipse”\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    paperproto.ellipse = function (x, y, rx, ry) {\n\t        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a path element by given path data string.\n\t     > Parameters\n\t     - pathString (string) #optional path string in SVG format.\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n\t     | \"M10,20L30,40\"\n\t     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n\t     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n\t    \\*/\n\t    paperproto.path = function (pathString) {\n\t        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\t        var out = R._engine.path(R.format[apply](R, arguments), this);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Embeds an image into the surface.\n\t     **\n\t     > Parameters\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) Raphaël element object with type “image”\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    paperproto.image = function (src, x, y, w, h) {\n\t        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string. If you need line breaks, put “\\n” in the string.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string) The text string to draw\n\t     = (object) Raphaël element object with type “text”\n\t     **\n\t     > Usage\n\t     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n\t    \\*/\n\t    paperproto.text = function (x, y, text) {\n\t        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.set\n\t     [ method ]\n\t     **\n\t     * Creates array-like object to keep and operate several elements at once.\n\t     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n\t     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n\t     = (object) array-like object that represents set of elements\n\t     **\n\t     > Usage\n\t     | var st = paper.set();\n\t     | st.push(\n\t     |     paper.circle(10, 10, 5),\n\t     |     paper.circle(30, 10, 5)\n\t     | );\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.set = function (itemsArray) {\n\t        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n\t        var out = new Set(itemsArray);\n\t        this.__set__ && this.__set__.push(out);\n\t        out[\"paper\"] = this;\n\t        out[\"type\"] = \"set\";\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.setStart\n\t     [ method ]\n\t     **\n\t     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n\t     * @Paper.setFinish will be added to the set.\n\t     **\n\t     > Usage\n\t     | paper.setStart();\n\t     | paper.circle(10, 10, 5),\n\t     | paper.circle(30, 10, 5)\n\t     | var st = paper.setFinish();\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.setStart = function (set) {\n\t        this.__set__ = set || this.set();\n\t    };\n\t    /*\\\n\t     * Paper.setFinish\n\t     [ method ]\n\t     **\n\t     * See @Paper.setStart. This method finishes catching and returns resulting set.\n\t     **\n\t     = (object) set\n\t    \\*/\n\t    paperproto.setFinish = function (set) {\n\t        var out = this.__set__;\n\t        delete this.__set__;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.getSize\n\t     [ method ]\n\t     **\n\t     * Obtains current paper actual size.\n\t     **\n\t     = (object)\n\t     \\*/\n\t    paperproto.getSize = function () {\n\t        var container = this.canvas.parentNode;\n\t        return {\n\t            width: container.offsetWidth,\n\t            height: container.offsetHeight\n\t                };\n\t        };\n\t    /*\\\n\t     * Paper.setSize\n\t     [ method ]\n\t     **\n\t     * If you need to change dimensions of the canvas call this method\n\t     **\n\t     > Parameters\n\t     **\n\t     - width (number) new width of the canvas\n\t     - height (number) new height of the canvas\n\t    \\*/\n\t    paperproto.setSize = function (width, height) {\n\t        return R._engine.setSize.call(this, width, height);\n\t    };\n\t    /*\\\n\t     * Paper.setViewBox\n\t     [ method ]\n\t     **\n\t     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n\t     * specifying new boundaries.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) new x position, default is `0`\n\t     - y (number) new y position, default is `0`\n\t     - w (number) new width of the canvas\n\t     - h (number) new height of the canvas\n\t     - fit (boolean) `true` if you want graphics to fit into new boundary box\n\t    \\*/\n\t    paperproto.setViewBox = function (x, y, w, h, fit) {\n\t        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n\t    };\n\t    /*\\\n\t     * Paper.top\n\t     [ property ]\n\t     **\n\t     * Points to the topmost element on the paper\n\t    \\*/\n\t    /*\\\n\t     * Paper.bottom\n\t     [ property ]\n\t     **\n\t     * Points to the bottom element on the paper\n\t    \\*/\n\t    paperproto.top = paperproto.bottom = null;\n\t    /*\\\n\t     * Paper.raphael\n\t     [ property ]\n\t     **\n\t     * Points to the @Raphael object/function\n\t    \\*/\n\t    paperproto.raphael = R;\n\t    var getOffset = function (elem) {\n\t        var box = elem.getBoundingClientRect(),\n\t            doc = elem.ownerDocument,\n\t            body = doc.body,\n\t            docElem = doc.documentElement,\n\t            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t        return {\n\t            y: top,\n\t            x: left\n\t        };\n\t    };\n\t    /*\\\n\t     * Paper.getElementByPoint\n\t     [ method ]\n\t     **\n\t     * Returns you topmost element under given point.\n\t     **\n\t     = (object) Raphaël element object\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate from the top left corner of the window\n\t     - y (number) y coordinate from the top left corner of the window\n\t     > Usage\n\t     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t    \\*/\n\t    paperproto.getElementByPoint = function (x, y) {\n\t        var paper = this,\n\t            svg = paper.canvas,\n\t            target = g.doc.elementFromPoint(x, y);\n\t        if (g.win.opera && target.tagName == \"svg\") {\n\t            var so = getOffset(svg),\n\t                sr = svg.createSVGRect();\n\t            sr.x = x - so.x;\n\t            sr.y = y - so.y;\n\t            sr.width = sr.height = 1;\n\t            var hits = svg.getIntersectionList(sr, null);\n\t            if (hits.length) {\n\t                target = hits[hits.length - 1];\n\t            }\n\t        }\n\t        if (!target) {\n\t            return null;\n\t        }\n\t        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n\t            target = target.parentNode;\n\t        }\n\t        target == paper.canvas.parentNode && (target = svg);\n\t        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n\t        return target;\n\t    };\n\n\t    /*\\\n\t     * Paper.getElementsByBBox\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have an intersecting bounding box\n\t     **\n\t     > Parameters\n\t     **\n\t     - bbox (object) bbox to check with\n\t     = (object) @Set\n\t     \\*/\n\t    paperproto.getElementsByBBox = function (bbox) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\n\t    /*\\\n\t     * Paper.getById\n\t     [ method ]\n\t     **\n\t     * Returns you element by its internal ID.\n\t     **\n\t     > Parameters\n\t     **\n\t     - id (number) id\n\t     = (object) Raphaël element object\n\t    \\*/\n\t    paperproto.getById = function (id) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (bot.id == id) {\n\t                return bot;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return null;\n\t    };\n\t    /*\\\n\t     * Paper.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element on the paper\n\t     *\n\t     * If callback function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Paper object\n\t     > Usage\n\t     | paper.forEach(function (el) {\n\t     |     el.attr({ stroke: \"blue\" });\n\t     | });\n\t    \\*/\n\t    paperproto.forEach = function (callback, thisArg) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (callback.call(thisArg, bot) === false) {\n\t                return this;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.getElementsByPoint\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have common point inside\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (object) @Set\n\t    \\*/\n\t    paperproto.getElementsByPoint = function (x, y) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\t    function x_y() {\n\t        return this.x + S + this.y;\n\t    }\n\t    function x_y_w_h() {\n\t        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t    }\n\t    /*\\\n\t     * Element.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this element’s shape\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point inside the shape\n\t    \\*/\n\t    elproto.isPointInside = function (x, y) {\n\t        var rp = this.realPath = getPath[this.type](this);\n\t        if (this.attr('transform') && this.attr('transform').length) {\n\t            rp = R.transformPath(rp, this.attr('transform'));\n\t        }\n\t        return R.isPointInsidePath(rp, x, y);\n\t    };\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Return bounding box for a given element\n\t     **\n\t     > Parameters\n\t     **\n\t     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n\t     = (object) Bounding box object:\n\t     o {\n\t     o     x: (number) top left corner x\n\t     o     y: (number) top left corner y\n\t     o     x2: (number) bottom right corner x\n\t     o     y2: (number) bottom right corner y\n\t     o     width: (number) width\n\t     o     height: (number) height\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        var _ = this._;\n\t        if (isWithoutTransform) {\n\t            if (_.dirty || !_.bboxwt) {\n\t                this.realPath = getPath[this.type](this);\n\t                _.bboxwt = pathDimensions(this.realPath);\n\t                _.bboxwt.toString = x_y_w_h;\n\t                _.dirty = 0;\n\t            }\n\t            return _.bboxwt;\n\t        }\n\t        if (_.dirty || _.dirtyT || !_.bbox) {\n\t            if (_.dirty || !this.realPath) {\n\t                _.bboxwt = 0;\n\t                this.realPath = getPath[this.type](this);\n\t            }\n\t            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n\t            _.bbox.toString = x_y_w_h;\n\t            _.dirty = _.dirtyT = 0;\n\t        }\n\t        return _.bbox;\n\t    };\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     = (object) clone of a given element\n\t     **\n\t    \\*/\n\t    elproto.clone = function () {\n\t        if (this.removed) {\n\t            return null;\n\t        }\n\t        var out = this.paper[this.type]().attr(this.attr());\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.glow\n\t     [ method ]\n\t     **\n\t     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n\t     *\n\t     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n\t     **\n\t     > Parameters\n\t     **\n\t     - glow (object) #optional parameters object with all properties optional:\n\t     o {\n\t     o     width (number) size of the glow, default is `10`\n\t     o     fill (boolean) will it be filled, default is `false`\n\t     o     opacity (number) opacity, default is `0.5`\n\t     o     offsetx (number) horizontal offset, default is `0`\n\t     o     offsety (number) vertical offset, default is `0`\n\t     o     color (string) glow colour, default is `black`\n\t     o }\n\t     = (object) @Paper.set of elements that represents glow\n\t    \\*/\n\t    elproto.glow = function (glow) {\n\t        if (this.type == \"text\") {\n\t            return null;\n\t        }\n\t        glow = glow || {};\n\t        var s = {\n\t            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n\t            fill: glow.fill || false,\n\t            opacity: glow.opacity == null ? .5 : glow.opacity,\n\t            offsetx: glow.offsetx || 0,\n\t            offsety: glow.offsety || 0,\n\t            color: glow.color || \"#000\"\n\t        },\n\t            c = s.width / 2,\n\t            r = this.paper,\n\t            out = r.set(),\n\t            path = this.realPath || getPath[this.type](this);\n\t        path = this.matrix ? mapPath(path, this.matrix) : path;\n\t        for (var i = 1; i < c + 1; i++) {\n\t            out.push(r.path(path).attr({\n\t                stroke: s.color,\n\t                fill: s.fill ? s.color : \"none\",\n\t                \"stroke-linejoin\": \"round\",\n\t                \"stroke-linecap\": \"round\",\n\t                \"stroke-width\": +(s.width / c * i).toFixed(3),\n\t                opacity: +(s.opacity / c).toFixed(3)\n\t            }));\n\t        }\n\t        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n\t    };\n\t    var curveslengths = {},\n\t    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    },\n\t    getLengthFactory = function (istotal, subpath) {\n\t        return function (path, length, onlystart) {\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return {x: point.x, y: point.y, alpha: point.alpha};\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n\t            return point;\n\t        };\n\t    };\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    /*\\\n\t     * Raphael.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the given path in pixels.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string.\n\t     **\n\t     = (number) length.\n\t    \\*/\n\t    R.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Raphael.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    R.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Raphael.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given path from given length to given length.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    R.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the path in pixels. Only works for element of “path” type.\n\t     = (number) length.\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\n\t        return getTotalLength(path);\n\t    };\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return getPointAtLength(path, length);\n\t    };\n\t    /*\\\n\t     * Element.getPath\n\t     [ method ]\n\t     **\n\t     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n\t     = (object) path\n\t     **\n\t    \\*/\n\t    elproto.getPath = function () {\n\t        var path,\n\t            getPath = R._getPath[this.type];\n\n\t        if (this.type == \"text\" || this.type == \"set\") {\n\t            return;\n\t        }\n\n\t        if (getPath) {\n\t            path = getPath(this);\n\t        }\n\n\t        return path;\n\t    };\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return R.getSubpath(path, from, to);\n\t    };\n\t    /*\\\n\t     * Raphael.easing_formulas\n\t     [ property ]\n\t     **\n\t     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n\t     # <ul>\n\t     #     <li>“linear”</li>\n\t     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n\t     #     <li>“>” or “easeOut” or “ease-out”</li>\n\t     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n\t     #     <li>“backIn” or “back-in”</li>\n\t     #     <li>“backOut” or “back-out”</li>\n\t     #     <li>“elastic”</li>\n\t     #     <li>“bounce”</li>\n\t     # </ul>\n\t     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n\t    \\*/\n\t    var ef = R.easing_formulas = {\n\t        linear: function (n) {\n\t            return n;\n\t        },\n\t        \"<\": function (n) {\n\t            return pow(n, 1.7);\n\t        },\n\t        \">\": function (n) {\n\t            return pow(n, .48);\n\t        },\n\t        \"<>\": function (n) {\n\t            var q = .48 - n / 1.04,\n\t                Q = math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        },\n\t        backIn: function (n) {\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        },\n\t        backOut: function (n) {\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        },\n\t        elastic: function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n\t        },\n\t        bounce: function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < (1 / p)) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < (2 / p)) {\n\t                    n -= (1.5 / p);\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < (2.5 / p)) {\n\t                        n -= (2.25 / p);\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= (2.625 / p);\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        }\n\t    };\n\t    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n\t    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n\t    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n\t    ef[\"back-in\"] = ef.backIn;\n\t    ef[\"back-out\"] = ef.backOut;\n\n\t    var animationElements = [],\n\t        requestAnimFrame = window.requestAnimationFrame       ||\n\t                           window.webkitRequestAnimationFrame ||\n\t                           window.mozRequestAnimationFrame    ||\n\t                           window.oRequestAnimationFrame      ||\n\t                           window.msRequestAnimationFrame     ||\n\t                           function (callback) {\n\t                               setTimeout(callback, 16);\n\t                           },\n\t        animation = function () {\n\t            var Now = +new Date,\n\t                l = 0;\n\t            for (; l < animationElements.length; l++) {\n\t                var e = animationElements[l];\n\t                if (e.el.removed || e.paused) {\n\t                    continue;\n\t                }\n\t                var time = Now - e.start,\n\t                    ms = e.ms,\n\t                    easing = e.easing,\n\t                    from = e.from,\n\t                    diff = e.diff,\n\t                    to = e.to,\n\t                    t = e.t,\n\t                    that = e.el,\n\t                    set = {},\n\t                    now,\n\t                    init = {},\n\t                    key;\n\t                if (e.initstatus) {\n\t                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n\t                    e.status = e.initstatus;\n\t                    delete e.initstatus;\n\t                    e.stop && animationElements.splice(l--, 1);\n\t                } else {\n\t                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n\t                }\n\t                if (time < 0) {\n\t                    continue;\n\t                }\n\t                if (time < ms) {\n\t                    var pos = easing(time / ms);\n\t                    for (var attr in from) if (from[has](attr)) {\n\t                        switch (availableAnimAttrs[attr]) {\n\t                            case nu:\n\t                                now = +from[attr] + pos * ms * diff[attr];\n\t                                break;\n\t                            case \"colour\":\n\t                                now = \"rgb(\" + [\n\t                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n\t                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n\t                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n\t                                ].join(\",\") + \")\";\n\t                                break;\n\t                            case \"path\":\n\t                                now = [];\n\t                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    now[i] = [from[attr][i][0]];\n\t                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                    }\n\t                                    now[i] = now[i].join(S);\n\t                                }\n\t                                now = now.join(S);\n\t                                break;\n\t                            case \"transform\":\n\t                                if (diff[attr].real) {\n\t                                    now = [];\n\t                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                        now[i] = [from[attr][i][0]];\n\t                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    var get = function (i) {\n\t                                        return +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    };\n\t                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\t                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n\t                                }\n\t                                break;\n\t                            case \"csv\":\n\t                                if (attr == \"clip-rect\") {\n\t                                    now = [];\n\t                                    i = 4;\n\t                                    while (i--) {\n\t                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    }\n\t                                }\n\t                                break;\n\t                            default:\n\t                                var from2 = [][concat](from[attr]);\n\t                                now = [];\n\t                                i = that.paper.customAttributes[attr].length;\n\t                                while (i--) {\n\t                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n\t                                }\n\t                                break;\n\t                        }\n\t                        set[attr] = now;\n\t                    }\n\t                    that.attr(set);\n\t                    (function (id, that, anim) {\n\t                        setTimeout(function () {\n\t                            eve(\"raphael.anim.frame.\" + id, that, anim);\n\t                        });\n\t                    })(that.id, that, e.anim);\n\t                } else {\n\t                    (function(f, el, a) {\n\t                        setTimeout(function() {\n\t                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n\t                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n\t                            R.is(f, \"function\") && f.call(el);\n\t                        });\n\t                    })(e.callback, that, e.anim);\n\t                    that.attr(to);\n\t                    animationElements.splice(l--, 1);\n\t                    if (e.repeat > 1 && !e.next) {\n\t                        for (key in to) if (to[has](key)) {\n\t                            init[key] = e.totalOrigin[key];\n\t                        }\n\t                        e.el.attr(init);\n\t                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n\t                    }\n\t                    if (e.next && !e.stop) {\n\t                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n\t                    }\n\t                }\n\t            }\n\t            animationElements.length && requestAnimFrame(animation);\n\t        },\n\t        upto255 = function (color) {\n\t            return color > 255 ? 255 : color < 0 ? 0 : color;\n\t        };\n\t    /*\\\n\t     * Element.animateWith\n\t     [ method ]\n\t     **\n\t     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - el (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - params (object) #optional final attributes for the element, see also @Element.attr\n\t     - ms (number) #optional number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - element (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - animation (object) #optional animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n\t            x, y;\n\t        runAnimation(a, element, a.percents[0], null, element.attr());\n\t        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n\t            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n\t                animationElements[ii - 1].start = animationElements[i].start;\n\t                break;\n\t            }\n\t        }\n\t        return element;\n\t        //\n\t        //\n\t        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n\t        //     status = element.status(anim);\n\t        // return this.animate(a).status(a, status * anim.ms / a.ms);\n\t    };\n\t    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n\t        var cx = 3 * p1x,\n\t            bx = 3 * (p2x - p1x) - cx,\n\t            ax = 1 - cx - bx,\n\t            cy = 3 * p1y,\n\t            by = 3 * (p2y - p1y) - cy,\n\t            ay = 1 - cy - by;\n\t        function sampleCurveX(t) {\n\t            return ((ax * t + bx) * t + cx) * t;\n\t        }\n\t        function solve(x, epsilon) {\n\t            var t = solveCurveX(x, epsilon);\n\t            return ((ay * t + by) * t + cy) * t;\n\t        }\n\t        function solveCurveX(x, epsilon) {\n\t            var t0, t1, t2, x2, d2, i;\n\t            for(t2 = x, i = 0; i < 8; i++) {\n\t                x2 = sampleCurveX(t2) - x;\n\t                if (abs(x2) < epsilon) {\n\t                    return t2;\n\t                }\n\t                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\t                if (abs(d2) < 1e-6) {\n\t                    break;\n\t                }\n\t                t2 = t2 - x2 / d2;\n\t            }\n\t            t0 = 0;\n\t            t1 = 1;\n\t            t2 = x;\n\t            if (t2 < t0) {\n\t                return t0;\n\t            }\n\t            if (t2 > t1) {\n\t                return t1;\n\t            }\n\t            while (t0 < t1) {\n\t                x2 = sampleCurveX(t2);\n\t                if (abs(x2 - x) < epsilon) {\n\t                    return t2;\n\t                }\n\t                if (x > x2) {\n\t                    t0 = t2;\n\t                } else {\n\t                    t1 = t2;\n\t                }\n\t                t2 = (t1 - t0) / 2 + t0;\n\t            }\n\t            return t2;\n\t        }\n\t        return solve(t, 1 / (200 * duration));\n\t    }\n\t    elproto.onAnimation = function (f) {\n\t        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n\t        return this;\n\t    };\n\t    function Animation(anim, ms) {\n\t        var percents = [],\n\t            newAnim = {};\n\t        this.ms = ms;\n\t        this.times = 1;\n\t        if (anim) {\n\t            for (var attr in anim) if (anim[has](attr)) {\n\t                newAnim[toFloat(attr)] = anim[attr];\n\t                percents.push(toFloat(attr));\n\t            }\n\t            percents.sort(sortByNumber);\n\t        }\n\t        this.anim = newAnim;\n\t        this.top = percents[percents.length - 1];\n\t        this.percents = percents;\n\t    }\n\t    /*\\\n\t     * Animation.delay\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given delay.\n\t     **\n\t     > Parameters\n\t     **\n\t     - delay (number) number of ms to pass between animation start and actual animation\n\t     **\n\t     = (object) new altered Animation object\n\t     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n\t     | circle1.animate(anim); // run the given animation immediately\n\t     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n\t    \\*/\n\t    Animation.prototype.delay = function (delay) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.times = this.times;\n\t        a.del = +delay || 0;\n\t        return a;\n\t    };\n\t    /*\\\n\t     * Animation.repeat\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given repetition.\n\t     **\n\t     > Parameters\n\t     **\n\t     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n\t     **\n\t     = (object) new altered Animation object\n\t    \\*/\n\t    Animation.prototype.repeat = function (times) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.del = this.del;\n\t        a.times = math.floor(mmax(times, 0)) || 1;\n\t        return a;\n\t    };\n\t    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n\t        percent = toFloat(percent);\n\t        var params,\n\t            isInAnim,\n\t            isInAnimSet,\n\t            percents = [],\n\t            next,\n\t            prev,\n\t            timestamp,\n\t            ms = anim.ms,\n\t            from = {},\n\t            to = {},\n\t            diff = {};\n\t        if (status) {\n\t            for (i = 0, ii = animationElements.length; i < ii; i++) {\n\t                var e = animationElements[i];\n\t                if (e.el.id == element.id && e.anim == anim) {\n\t                    if (e.percent != percent) {\n\t                        animationElements.splice(i, 1);\n\t                        isInAnimSet = 1;\n\t                    } else {\n\t                        isInAnim = e;\n\t                    }\n\t                    element.attr(e.totalOrigin);\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            status = +to; // NaN\n\t        }\n\t        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n\t            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n\t                percent = anim.percents[i];\n\t                prev = anim.percents[i - 1] || 0;\n\t                ms = ms / anim.top * (percent - prev);\n\t                next = anim.percents[i + 1];\n\t                params = anim.anim[percent];\n\t                break;\n\t            } else if (status) {\n\t                element.attr(anim.anim[anim.percents[i]]);\n\t            }\n\t        }\n\t        if (!params) {\n\t            return;\n\t        }\n\t        if (!isInAnim) {\n\t            for (var attr in params) if (params[has](attr)) {\n\t                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n\t                    from[attr] = element.attr(attr);\n\t                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n\t                    to[attr] = params[attr];\n\t                    switch (availableAnimAttrs[attr]) {\n\t                        case nu:\n\t                            diff[attr] = (to[attr] - from[attr]) / ms;\n\t                            break;\n\t                        case \"colour\":\n\t                            from[attr] = R.getRGB(from[attr]);\n\t                            var toColour = R.getRGB(to[attr]);\n\t                            diff[attr] = {\n\t                                r: (toColour.r - from[attr].r) / ms,\n\t                                g: (toColour.g - from[attr].g) / ms,\n\t                                b: (toColour.b - from[attr].b) / ms\n\t                            };\n\t                            break;\n\t                        case \"path\":\n\t                            var pathes = path2curve(from[attr], to[attr]),\n\t                                toPath = pathes[1];\n\t                            from[attr] = pathes[0];\n\t                            diff[attr] = [];\n\t                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                diff[attr][i] = [0];\n\t                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case \"transform\":\n\t                            var _ = element._,\n\t                                eq = equaliseTransform(_[attr], to[attr]);\n\t                            if (eq) {\n\t                                from[attr] = eq.from;\n\t                                to[attr] = eq.to;\n\t                                diff[attr] = [];\n\t                                diff[attr].real = true;\n\t                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    diff[attr][i] = [from[attr][i][0]];\n\t                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                var m = (element.matrix || new Matrix),\n\t                                    to2 = {\n\t                                        _: {transform: _.transform},\n\t                                        getBBox: function () {\n\t                                            return element.getBBox(1);\n\t                                        }\n\t                                    };\n\t                                from[attr] = [\n\t                                    m.a,\n\t                                    m.b,\n\t                                    m.c,\n\t                                    m.d,\n\t                                    m.e,\n\t                                    m.f\n\t                                ];\n\t                                extractTransform(to2, to[attr]);\n\t                                to[attr] = to2._.transform;\n\t                                diff[attr] = [\n\t                                    (to2.matrix.a - m.a) / ms,\n\t                                    (to2.matrix.b - m.b) / ms,\n\t                                    (to2.matrix.c - m.c) / ms,\n\t                                    (to2.matrix.d - m.d) / ms,\n\t                                    (to2.matrix.e - m.e) / ms,\n\t                                    (to2.matrix.f - m.f) / ms\n\t                                ];\n\t                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n\t                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n\t                                // extractTransform(to2, to[attr]);\n\t                                // diff[attr] = [\n\t                                //     (to2._.sx - _.sx) / ms,\n\t                                //     (to2._.sy - _.sy) / ms,\n\t                                //     (to2._.deg - _.deg) / ms,\n\t                                //     (to2._.dx - _.dx) / ms,\n\t                                //     (to2._.dy - _.dy) / ms\n\t                                // ];\n\t                            }\n\t                            break;\n\t                        case \"csv\":\n\t                            var values = Str(params[attr])[split](separator),\n\t                                from2 = Str(from[attr])[split](separator);\n\t                            if (attr == \"clip-rect\") {\n\t                                from[attr] = from2;\n\t                                diff[attr] = [];\n\t                                i = from2.length;\n\t                                while (i--) {\n\t                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n\t                                }\n\t                            }\n\t                            to[attr] = values;\n\t                            break;\n\t                        default:\n\t                            values = [][concat](params[attr]);\n\t                            from2 = [][concat](from[attr]);\n\t                            diff[attr] = [];\n\t                            i = element.paper.customAttributes[attr].length;\n\t                            while (i--) {\n\t                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t            }\n\t            var easing = params.easing,\n\t                easyeasy = R.easing_formulas[easing];\n\t            if (!easyeasy) {\n\t                easyeasy = Str(easing).match(bezierrg);\n\t                if (easyeasy && easyeasy.length == 5) {\n\t                    var curve = easyeasy;\n\t                    easyeasy = function (t) {\n\t                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n\t                    };\n\t                } else {\n\t                    easyeasy = pipe;\n\t                }\n\t            }\n\t            timestamp = params.start || anim.start || +new Date;\n\t            e = {\n\t                anim: anim,\n\t                percent: percent,\n\t                timestamp: timestamp,\n\t                start: timestamp + (anim.del || 0),\n\t                status: 0,\n\t                initstatus: status || 0,\n\t                stop: false,\n\t                ms: ms,\n\t                easing: easyeasy,\n\t                from: from,\n\t                diff: diff,\n\t                to: to,\n\t                el: element,\n\t                callback: params.callback,\n\t                prev: prev,\n\t                next: next,\n\t                repeat: times || anim.times,\n\t                origin: element.attr(),\n\t                totalOrigin: totalOrigin\n\t            };\n\t            animationElements.push(e);\n\t            if (status && !isInAnim && !isInAnimSet) {\n\t                e.stop = true;\n\t                e.start = new Date - ms * status;\n\t                if (animationElements.length == 1) {\n\t                    return animation();\n\t                }\n\t            }\n\t            if (isInAnimSet) {\n\t                e.start = new Date - e.ms * status;\n\t            }\n\t            animationElements.length == 1 && requestAnimFrame(animation);\n\t        } else {\n\t            isInAnim.initstatus = status;\n\t            isInAnim.start = new Date - isInAnim.ms * status;\n\t        }\n\t        eve(\"raphael.anim.start.\" + element.id, element, anim);\n\t    }\n\t    /*\\\n\t     * Raphael.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n\t     * See also @Animation.delay and @Animation.repeat methods.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     **\n\t     = (object) @Animation\n\t    \\*/\n\t    R.animation = function (params, ms, easing, callback) {\n\t        if (params instanceof Animation) {\n\t            return params;\n\t        }\n\t        if (R.is(easing, \"function\") || !easing) {\n\t            callback = callback || easing || null;\n\t            easing = null;\n\t        }\n\t        params = Object(params);\n\t        ms = +ms || 0;\n\t        var p = {},\n\t            json,\n\t            attr;\n\t        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n\t            json = true;\n\t            p[attr] = params[attr];\n\t        }\n\t        if (!json) {\n\t            // if percent-like syntax is used and end-of-all animation callback used\n\t            if(callback){\n\t                // find the last one\n\t                var lastKey = 0;\n\t                for(var i in params){\n\t                    var percent = toInt(i);\n\t                    if(params[has](i) && percent > lastKey){\n\t                        lastKey = percent;\n\t                    }\n\t                }\n\t                lastKey += '%';\n\t                // if already defined callback in the last keyframe, skip\n\t                !params[lastKey].callback && (params[lastKey].callback = callback);\n\t            }\n\t          return new Animation(params, ms);\n\t        } else {\n\t            easing && (p.easing = easing);\n\t            callback && (p.callback = callback);\n\t            return new Animation({100: p}, ms);\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Creates and starts animation for given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - animation (object) animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animate = function (params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n\t        runAnimation(anim, element, anim.percents[0], null, element.attr());\n\t        return element;\n\t    };\n\t    /*\\\n\t     * Element.setTime\n\t     [ method ]\n\t     **\n\t     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) animation object\n\t     - value (number) number of milliseconds from the beginning of the animation\n\t     **\n\t     = (object) original element if `value` is specified\n\t     * Note, that during animation following events are triggered:\n\t     *\n\t     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n\t    \\*/\n\t    elproto.setTime = function (anim, value) {\n\t        if (anim && value != null) {\n\t            this.status(anim, mmin(value, anim.ms) / anim.ms);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.status\n\t     [ method ]\n\t     **\n\t     * Gets or sets the status of animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n\t     **\n\t     = (number) status\n\t     * or\n\t     = (array) status if `anim` is not specified. Array of objects in format:\n\t     o {\n\t     o     anim: (object) animation object\n\t     o     status: (number) status\n\t     o }\n\t     * or\n\t     = (object) original element if `value` is specified\n\t    \\*/\n\t    elproto.status = function (anim, value) {\n\t        var out = [],\n\t            i = 0,\n\t            len,\n\t            e;\n\t        if (value != null) {\n\t            runAnimation(anim, this, -1, mmin(value, 1));\n\t            return this;\n\t        } else {\n\t            len = animationElements.length;\n\t            for (; i < len; i++) {\n\t                e = animationElements[i];\n\t                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n\t                    if (anim) {\n\t                        return e.status;\n\t                    }\n\t                    out.push({\n\t                        anim: e.anim,\n\t                        status: e.status\n\t                    });\n\t                }\n\t            }\n\t            if (anim) {\n\t                return 0;\n\t            }\n\t            return out;\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.pause\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element with ability to resume it later on.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.pause = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements[i].paused = true;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.resume\n\t     [ method ]\n\t     **\n\t     * Resumes animation if it was paused with @Element.pause method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.resume = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            var e = animationElements[i];\n\t            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n\t                delete e.paused;\n\t                this.status(e.anim, e.status);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.stop = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements.splice(i--, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    function stopAnimation(paper) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n\t            animationElements.splice(i--, 1);\n\t        }\n\t    }\n\t    eve.on(\"raphael.remove\", stopAnimation);\n\t    eve.on(\"raphael.clear\", stopAnimation);\n\t    elproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2019s object\";\n\t    };\n\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set.\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it.\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set.\n\t     *\n\t     * If function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    for (var method in elproto) if (elproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname][apply](el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t    setproto.attr = function (name, value) {\n\t        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n\t            for (var j = 0, jj = name.length; j < jj; j++) {\n\t                this.items[j].attr(name[j]);\n\t            }\n\t        } else {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(name, value);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found & removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t    };\n\t    setproto.animate = function (params, ms, easing, callback) {\n\t        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n\t        var len = this.items.length,\n\t            i = len,\n\t            item,\n\t            set = this,\n\t            collector;\n\t        if (!len) {\n\t            return this;\n\t        }\n\t        callback && (collector = function () {\n\t            !--len && callback.call(set);\n\t        });\n\t        easing = R.is(easing, string) ? easing : collector;\n\t        var anim = R.animation(params, ms, easing, collector);\n\t        item = this.items[--i].animate(anim);\n\t        while (i--) {\n\t            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n\t            (this.items[i] && !this.items[i].removed) || len--;\n\t        }\n\t        return this;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin[apply](0, x);\n\t        y = mmin[apply](0, y);\n\t        x2 = mmax[apply](0, x2);\n\t        y2 = mmax[apply](0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = this.paper.set();\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2018s set\";\n\t    };\n\n\t    setproto.glow = function(glowConfig) {\n\t        var ret = this.paper.set();\n\t        this.forEach(function(shape, index){\n\t            var g = shape.glow(glowConfig);\n\t            if(g != null){\n\t                g.forEach(function(shape2, index2){\n\t                    ret.push(shape2);\n\t                });\n\t            }\n\t        });\n\t        return ret;\n\t    };\n\n\n\t    /*\\\n\t     * Set.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this set’s elements\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point is inside any of the set's elements\n\t     \\*/\n\t    setproto.isPointInside = function (x, y) {\n\t        var isPointInside = false;\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                isPointInside = true;\n\t                return false; // stop loop\n\t            }\n\t        });\n\t        return isPointInside;\n\t    };\n\n\t    /*\\\n\t     * Raphael.registerFont\n\t     [ method ]\n\t     **\n\t     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n\t     * Returns original parameter, so it could be used with chaining.\n\t     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n\t     **\n\t     > Parameters\n\t     **\n\t     - font (object) the font to register\n\t     = (object) the font you passed in\n\t     > Usage\n\t     | Cufon.registerFont(Raphael.registerFont({…}));\n\t    \\*/\n\t    R.registerFont = function (font) {\n\t        if (!font.face) {\n\t            return font;\n\t        }\n\t        this.fonts = this.fonts || {};\n\t        var fontcopy = {\n\t                w: font.w,\n\t                face: {},\n\t                glyphs: {}\n\t            },\n\t            family = font.face[\"font-family\"];\n\t        for (var prop in font.face) if (font.face[has](prop)) {\n\t            fontcopy.face[prop] = font.face[prop];\n\t        }\n\t        if (this.fonts[family]) {\n\t            this.fonts[family].push(fontcopy);\n\t        } else {\n\t            this.fonts[family] = [fontcopy];\n\t        }\n\t        if (!font.svg) {\n\t            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\t            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n\t                var path = font.glyphs[glyph];\n\t                fontcopy.glyphs[glyph] = {\n\t                    w: path.w,\n\t                    k: {},\n\t                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n\t                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n\t                        }) + \"z\"\n\t                };\n\t                if (path.k) {\n\t                    for (var k in path.k) if (path[has](k)) {\n\t                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return font;\n\t    };\n\t    /*\\\n\t     * Paper.getFont\n\t     [ method ]\n\t     **\n\t     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n\t     **\n\t     > Parameters\n\t     **\n\t     - family (string) font family name or any word from it\n\t     - weight (string) #optional font weight\n\t     - style (string) #optional font style\n\t     - stretch (string) #optional font stretch\n\t     = (object) the font object\n\t     > Usage\n\t     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n\t    \\*/\n\t    paperproto.getFont = function (family, weight, style, stretch) {\n\t        stretch = stretch || \"normal\";\n\t        style = style || \"normal\";\n\t        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n\t        if (!R.fonts) {\n\t            return;\n\t        }\n\t        var font = R.fonts[family];\n\t        if (!font) {\n\t            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\t            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n\t                if (name.test(fontName)) {\n\t                    font = R.fonts[fontName];\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        var thefont;\n\t        if (font) {\n\t            for (var i = 0, ii = font.length; i < ii; i++) {\n\t                thefont = font[i];\n\t                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return thefont;\n\t    };\n\t    /*\\\n\t     * Paper.print\n\t     [ method ]\n\t     **\n\t     * Creates path that represent given text written using given font at given position with given size.\n\t     * Result of the method is path element that contains whole text as a separate path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x position of the text\n\t     - y (number) y position of the text\n\t     - string (string) text to print\n\t     - font (object) font object, see @Paper.getFont\n\t     - size (number) #optional size of the font, default is `16`\n\t     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n\t     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n\t     - line_spacing (number) #optional number in range `1..3`, default is `1`\n\t     = (object) resulting path element, which consist of all letters\n\t     > Usage\n\t     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n\t    \\*/\n\t    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n\t        origin = origin || \"middle\"; // baseline|middle\n\t        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n\t        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n\t        var letters = Str(string)[split](E),\n\t            shift = 0,\n\t            notfirst = 0,\n\t            path = E,\n\t            scale;\n\t        R.is(font, \"string\") && (font = this.getFont(font));\n\t        if (font) {\n\t            scale = (size || 16) / font.face[\"units-per-em\"];\n\t            var bb = font.face.bbox[split](separator),\n\t                top = +bb[0],\n\t                lineHeight = bb[3] - bb[1],\n\t                shifty = 0,\n\t                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n\t            for (var i = 0, ii = letters.length; i < ii; i++) {\n\t                if (letters[i] == \"\\n\") {\n\t                    shift = 0;\n\t                    curr = 0;\n\t                    notfirst = 0;\n\t                    shifty += lineHeight * line_spacing;\n\t                } else {\n\t                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n\t                        curr = font.glyphs[letters[i]];\n\t                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n\t                    notfirst = 1;\n\t                }\n\t                if (curr && curr.d) {\n\t                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n\t                }\n\t            }\n\t        }\n\t        return this.path(path).attr({\n\t            fill: \"#000\",\n\t            stroke: \"none\"\n\t        });\n\t    };\n\n\t    /*\\\n\t     * Paper.add\n\t     [ method ]\n\t     **\n\t     * Imports elements in JSON array in format `{type: type, <attributes>}`\n\t     **\n\t     > Parameters\n\t     **\n\t     - json (array)\n\t     = (object) resulting set of imported elements\n\t     > Usage\n\t     | paper.add([\n\t     |     {\n\t     |         type: \"circle\",\n\t     |         cx: 10,\n\t     |         cy: 10,\n\t     |         r: 5\n\t     |     },\n\t     |     {\n\t     |         type: \"rect\",\n\t     |         x: 10,\n\t     |         y: 10,\n\t     |         width: 10,\n\t     |         height: 10,\n\t     |         fill: \"#fc0\"\n\t     |     }\n\t     | ]);\n\t    \\*/\n\t    paperproto.add = function (json) {\n\t        if (R.is(json, \"array\")) {\n\t            var res = this.set(),\n\t                i = 0,\n\t                ii = json.length,\n\t                j;\n\t            for (; i < ii; i++) {\n\t                j = json[i] || {};\n\t                elements[has](j.type) && res.push(this[j.type]().attr(j));\n\t            }\n\t        }\n\t        return res;\n\t    };\n\n\t    /*\\\n\t     * Raphael.format\n\t     [ method ]\n\t     **\n\t     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - … (string) rest of arguments will be treated as parameters for replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | var x = 10,\n\t     |     y = 20,\n\t     |     width = 40,\n\t     |     height = 50;\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n\t    \\*/\n\t    R.format = function (token, params) {\n\t        var args = R.is(params, array) ? [0][concat](params) : arguments;\n\t        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n\t            return args[++i] == null ? E : args[i];\n\t        }));\n\t        return token || E;\n\t    };\n\t    /*\\\n\t     * Raphael.fullfill\n\t     [ method ]\n\t     **\n\t     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - json (object) object which properties will be used as a replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t     |     x: 10,\n\t     |     y: 20,\n\t     |     dim: {\n\t     |         width: 40,\n\t     |         height: 50,\n\t     |         \"negative width\": -40\n\t     |     }\n\t     | }));\n\t    \\*/\n\t    R.fullfill = (function () {\n\t        var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function (all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t        return function (str, obj) {\n\t            return String(str).replace(tokenRegex, function (all, key) {\n\t                return replacer(all, key, obj);\n\t            });\n\t        };\n\t    })();\n\t    /*\\\n\t     * Raphael.ninja\n\t     [ method ]\n\t     **\n\t     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n\t     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n\t     **\n\t     = (object) Raphael object\n\t     > Usage\n\t     | (function (local_raphael) {\n\t     |     var paper = local_raphael(10, 10, 320, 200);\n\t     |     …\n\t     | })(Raphael.ninja());\n\t    \\*/\n\t    R.ninja = function () {\n\t        if (oldRaphael.was) {\n\t            g.win.Raphael = oldRaphael.is;\n\t        } else {\n\t            // IE8 raises an error when deleting window property\n\t            window.Raphael = undefined;\n\t            try {\n\t                delete window.Raphael;\n\t            } catch(e) {}\n\t        }\n\t        return R;\n\t    };\n\t    /*\\\n\t     * Raphael.st\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n\t     * you added, so you will be able to call the same method on sets too.\n\t     **\n\t     * See also @Raphael.el.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | Raphael.st.red = function () {\n\t     |     this.forEach(function (el) {\n\t     |         el.red();\n\t     |     });\n\t     | };\n\t     | // then use it\n\t     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n\t    \\*/\n\t    R.st = setproto;\n\n\t    eve.on(\"raphael.DOMload\", function () {\n\t        loaded = true;\n\t    });\n\n\t    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    (function (doc, loaded, f) {\n\t        if (doc.readyState == null && doc.addEventListener){\n\t            doc.addEventListener(loaded, f = function () {\n\t                doc.removeEventListener(loaded, f, false);\n\t                doc.readyState = \"complete\";\n\t            }, false);\n\t            doc.readyState = \"loading\";\n\t        }\n\t        function isLoaded() {\n\t            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n\t        }\n\t        isLoaded();\n\t    })(document, \"DOMContentLoaded\");\n\n\t    return R;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t        };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\n\t     * Fires event with given `name`, given scope and other parameters.\n\n\t     > Arguments\n\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n\t     > Arguments\n\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\n\t     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\n\t     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.svg) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        math = Math,\n\t        mmax = math.max,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        E = \"\",\n\t        S = \" \";\n\t    var xlink = \"http://www.w3.org/1999/xlink\",\n\t        markers = {\n\t            block: \"M5,0 0,2.5 5,5z\",\n\t            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n\t            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n\t            open: \"M6,1 1,3.5 6,6\",\n\t            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n\t        },\n\t        markerCounter = {};\n\t    R.toString = function () {\n\t        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var $ = function (el, attr) {\n\t        if (attr) {\n\t            if (typeof el == \"string\") {\n\t                el = $(el);\n\t            }\n\t            for (var key in attr) if (attr[has](key)) {\n\t                if (key.substring(0, 6) == \"xlink:\") {\n\t                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n\t                } else {\n\t                    el.setAttribute(key, Str(attr[key]));\n\t                }\n\t            }\n\t        } else {\n\t            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n\t            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n\t        }\n\t        return el;\n\t    },\n\t    addGradientFill = function (element, gradient) {\n\t        var type = \"linear\",\n\t            id = element.id + gradient,\n\t            fx = .5, fy = .5,\n\t            o = element.node,\n\t            SVG = element.paper,\n\t            s = o.style,\n\t            el = R._g.doc.getElementById(id);\n\t        if (!el) {\n\t            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n\t                type = \"radial\";\n\t                if (_fx && _fy) {\n\t                    fx = toFloat(_fx);\n\t                    fy = toFloat(_fy);\n\t                    var dir = ((fy > .5) * 2 - 1);\n\t                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n\t                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n\t                        fy != .5 &&\n\t                        (fy = fy.toFixed(5) - 1e-5 * dir);\n\t                }\n\t                return E;\n\t            });\n\t            gradient = gradient.split(/\\s*\\-\\s*/);\n\t            if (type == \"linear\") {\n\t                var angle = gradient.shift();\n\t                angle = -toFloat(angle);\n\t                if (isNaN(angle)) {\n\t                    return null;\n\t                }\n\t                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n\t                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n\t                vector[2] *= max;\n\t                vector[3] *= max;\n\t                if (vector[2] < 0) {\n\t                    vector[0] = -vector[2];\n\t                    vector[2] = 0;\n\t                }\n\t                if (vector[3] < 0) {\n\t                    vector[1] = -vector[3];\n\t                    vector[3] = 0;\n\t                }\n\t            }\n\t            var dots = R._parseDots(gradient);\n\t            if (!dots) {\n\t                return null;\n\t            }\n\t            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n\t            if (element.gradient && id != element.gradient.id) {\n\t                SVG.defs.removeChild(element.gradient);\n\t                delete element.gradient;\n\t            }\n\n\t            if (!element.gradient) {\n\t                el = $(type + \"Gradient\", {id: id});\n\t                element.gradient = el;\n\t                $(el, type == \"radial\" ? {\n\t                    fx: fx,\n\t                    fy: fy\n\t                } : {\n\t                    x1: vector[0],\n\t                    y1: vector[1],\n\t                    x2: vector[2],\n\t                    y2: vector[3],\n\t                    gradientTransform: element.matrix.invert()\n\t                });\n\t                SVG.defs.appendChild(el);\n\t                for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                    el.appendChild($(\"stop\", {\n\t                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n\t                        \"stop-color\": dots[i].color || \"#fff\",\n\t                        \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n\t                    }));\n\t                }\n\t            }\n\t        }\n\t        $(o, {\n\t            fill: fillurl(id),\n\t            opacity: 1,\n\t            \"fill-opacity\": 1\n\t        });\n\t        s.fill = E;\n\t        s.opacity = 1;\n\t        s.fillOpacity = 1;\n\t        return 1;\n\t    },\n\t    isIE9or10 = function () {\n\t      var mode = document.documentMode;\n\t      return mode && (mode === 9 || mode === 10);\n\t    },\n\t    fillurl = function (id) {\n\t      if (isIE9or10()) {\n\t          return \"url('#\" + id + \"')\";\n\t      }\n\t      var location = document.location;\n\t      var locationString = (\n\t          location.protocol + '//' +\n\t          location.host +\n\t          location.pathname +\n\t          location.search\n\t      );\n\t      return \"url('\" + locationString + \"#\" + id + \"')\";\n\t    },\n\t    updatePosition = function (o) {\n\t        var bbox = o.getBBox(1);\n\t        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n\t    },\n\t    addArrow = function (o, value, isEnd) {\n\t        if (o.type == \"path\") {\n\t            var values = Str(value).toLowerCase().split(\"-\"),\n\t                p = o.paper,\n\t                se = isEnd ? \"end\" : \"start\",\n\t                node = o.node,\n\t                attrs = o.attrs,\n\t                stroke = attrs[\"stroke-width\"],\n\t                i = values.length,\n\t                type = \"classic\",\n\t                from,\n\t                to,\n\t                dx,\n\t                refX,\n\t                attr,\n\t                w = 3,\n\t                h = 3,\n\t                t = 5;\n\t            while (i--) {\n\t                switch (values[i]) {\n\t                    case \"block\":\n\t                    case \"classic\":\n\t                    case \"oval\":\n\t                    case \"diamond\":\n\t                    case \"open\":\n\t                    case \"none\":\n\t                        type = values[i];\n\t                        break;\n\t                    case \"wide\": h = 5; break;\n\t                    case \"narrow\": h = 2; break;\n\t                    case \"long\": w = 5; break;\n\t                    case \"short\": w = 2; break;\n\t                }\n\t            }\n\t            if (type == \"open\") {\n\t                w += 2;\n\t                h += 2;\n\t                t += 2;\n\t                dx = 1;\n\t                refX = isEnd ? 4 : 1;\n\t                attr = {\n\t                    fill: \"none\",\n\t                    stroke: attrs.stroke\n\t                };\n\t            } else {\n\t                refX = dx = w / 2;\n\t                attr = {\n\t                    fill: attrs.stroke,\n\t                    stroke: \"none\"\n\t                };\n\t            }\n\t            if (o._.arrows) {\n\t                if (isEnd) {\n\t                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n\t                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n\t                } else {\n\t                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n\t                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n\t                }\n\t            } else {\n\t                o._.arrows = {};\n\t            }\n\t            if (type != \"none\") {\n\t                var pathId = \"raphael-marker-\" + type,\n\t                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\t                if (!R._g.doc.getElementById(pathId)) {\n\t                    p.defs.appendChild($($(\"path\"), {\n\t                        \"stroke-linecap\": \"round\",\n\t                        d: markers[type],\n\t                        id: pathId\n\t                    }));\n\t                    markerCounter[pathId] = 1;\n\t                } else {\n\t                    markerCounter[pathId]++;\n\t                }\n\t                var marker = R._g.doc.getElementById(markerId),\n\t                    use;\n\t                if (!marker) {\n\t                    marker = $($(\"marker\"), {\n\t                        id: markerId,\n\t                        markerHeight: h,\n\t                        markerWidth: w,\n\t                        orient: \"auto\",\n\t                        refX: refX,\n\t                        refY: h / 2\n\t                    });\n\t                    use = $($(\"use\"), {\n\t                        \"xlink:href\": \"#\" + pathId,\n\t                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n\t                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n\t                    });\n\t                    marker.appendChild(use);\n\t                    p.defs.appendChild(marker);\n\t                    markerCounter[markerId] = 1;\n\t                } else {\n\t                    markerCounter[markerId]++;\n\t                    use = marker.getElementsByTagName(\"use\")[0];\n\t                }\n\t                $(use, attr);\n\t                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - delta * stroke;\n\t                } else {\n\t                    from = delta * stroke;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                attr = {};\n\t                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\t                if (to || from) {\n\t                    attr.d = R.getSubpath(attrs.path, from, to);\n\t                }\n\t                $(node, attr);\n\t                o._.arrows[se + \"Path\"] = pathId;\n\t                o._.arrows[se + \"Marker\"] = markerId;\n\t                o._.arrows[se + \"dx\"] = delta;\n\t                o._.arrows[se + \"Type\"] = type;\n\t                o._.arrows[se + \"String\"] = value;\n\t            } else {\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - from;\n\t                } else {\n\t                    from = 0;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n\t                delete o._.arrows[se + \"Path\"];\n\t                delete o._.arrows[se + \"Marker\"];\n\t                delete o._.arrows[se + \"dx\"];\n\t                delete o._.arrows[se + \"Type\"];\n\t                delete o._.arrows[se + \"String\"];\n\t            }\n\t            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n\t                var item = R._g.doc.getElementById(attr);\n\t                item && item.parentNode.removeChild(item);\n\t            }\n\t        }\n\t    },\n\t    dasharray = {\n\t        \"-\": [3, 1],\n\t        \".\": [1, 1],\n\t        \"-.\": [3, 1, 1, 1],\n\t        \"-..\": [3, 1, 1, 1, 1, 1],\n\t        \". \": [1, 3],\n\t        \"- \": [4, 3],\n\t        \"--\": [8, 3],\n\t        \"- .\": [4, 3, 1, 3],\n\t        \"--.\": [8, 3, 1, 3],\n\t        \"--..\": [8, 3, 1, 3, 1, 3]\n\t    },\n\t    addDashes = function (o, value, params) {\n\t        value = dasharray[Str(value).toLowerCase()];\n\t        if (value) {\n\t            var width = o.attrs[\"stroke-width\"] || \"1\",\n\t                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n\t                dashes = [],\n\t                i = value.length;\n\t            while (i--) {\n\t                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n\t            }\n\t            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n\t        }\n\t        else {\n\t          $(o.node, {\"stroke-dasharray\": \"none\"});\n\t        }\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        var node = o.node,\n\t            attrs = o.attrs,\n\t            vis = node.style.visibility;\n\t        node.style.visibility = \"hidden\";\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                if (!R._availableAttrs[has](att)) {\n\t                    continue;\n\t                }\n\t                var value = params[att];\n\t                attrs[att] = value;\n\t                switch (att) {\n\t                    case \"blur\":\n\t                        o.blur(value);\n\t                        break;\n\t                    case \"title\":\n\t                        var title = node.getElementsByTagName(\"title\");\n\n\t                        // Use the existing <title>.\n\t                        if (title.length && (title = title[0])) {\n\t                          title.firstChild.nodeValue = value;\n\t                        } else {\n\t                          title = $(\"title\");\n\t                          var val = R._g.doc.createTextNode(value);\n\t                          title.appendChild(val);\n\t                          node.appendChild(title);\n\t                        }\n\t                        break;\n\t                    case \"href\":\n\t                    case \"target\":\n\t                        var pn = node.parentNode;\n\t                        if (pn.tagName.toLowerCase() != \"a\") {\n\t                            var hl = $(\"a\");\n\t                            pn.insertBefore(hl, node);\n\t                            hl.appendChild(node);\n\t                            pn = hl;\n\t                        }\n\t                        if (att == \"target\") {\n\t                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n\t                        } else {\n\t                            pn.setAttributeNS(xlink, att, value);\n\t                        }\n\t                        break;\n\t                    case \"cursor\":\n\t                        node.style.cursor = value;\n\t                        break;\n\t                    case \"transform\":\n\t                        o.transform(value);\n\t                        break;\n\t                    case \"arrow-start\":\n\t                        addArrow(o, value);\n\t                        break;\n\t                    case \"arrow-end\":\n\t                        addArrow(o, value, 1);\n\t                        break;\n\t                    case \"clip-rect\":\n\t                        var rect = Str(value).split(separator);\n\t                        if (rect.length == 4) {\n\t                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n\t                            var el = $(\"clipPath\"),\n\t                                rc = $(\"rect\");\n\t                            el.id = R.createUUID();\n\t                            $(rc, {\n\t                                x: rect[0],\n\t                                y: rect[1],\n\t                                width: rect[2],\n\t                                height: rect[3]\n\t                            });\n\t                            el.appendChild(rc);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n\t                            o.clip = rc;\n\t                        }\n\t                        if (!value) {\n\t                            var path = node.getAttribute(\"clip-path\");\n\t                            if (path) {\n\t                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\t                                clip && clip.parentNode.removeChild(clip);\n\t                                $(node, {\"clip-path\": E});\n\t                                delete o.clip;\n\t                            }\n\t                        }\n\t                    break;\n\t                    case \"path\":\n\t                        if (o.type == \"path\") {\n\t                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n\t                            o._.dirty = 1;\n\t                            if (o._.arrows) {\n\t                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                            }\n\t                        }\n\t                        break;\n\t                    case \"width\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fx) {\n\t                            att = \"x\";\n\t                            value = attrs.x;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"x\":\n\t                        if (attrs.fx) {\n\t                            value = -attrs.x - (attrs.width || 0);\n\t                        }\n\t                    case \"rx\":\n\t                        if (att == \"rx\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cx\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"height\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fy) {\n\t                            att = \"y\";\n\t                            value = attrs.y;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"y\":\n\t                        if (attrs.fy) {\n\t                            value = -attrs.y - (attrs.height || 0);\n\t                        }\n\t                    case \"ry\":\n\t                        if (att == \"ry\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cy\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"r\":\n\t                        if (o.type == \"rect\") {\n\t                            $(node, {rx: value, ry: value});\n\t                        } else {\n\t                            node.setAttribute(att, value);\n\t                        }\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"src\":\n\t                        if (o.type == \"image\") {\n\t                            node.setAttributeNS(xlink, \"href\", value);\n\t                        }\n\t                        break;\n\t                    case \"stroke-width\":\n\t                        if (o._.sx != 1 || o._.sy != 1) {\n\t                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n\t                        }\n\t                        node.setAttribute(att, value);\n\t                        if (attrs[\"stroke-dasharray\"]) {\n\t                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n\t                        }\n\t                        if (o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"stroke-dasharray\":\n\t                        addDashes(o, value, params);\n\t                        break;\n\t                    case \"fill\":\n\t                        var isURL = Str(value).match(R._ISURL);\n\t                        if (isURL) {\n\t                            el = $(\"pattern\");\n\t                            var ig = $(\"image\");\n\t                            el.id = R.createUUID();\n\t                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n\t                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n\t                            el.appendChild(ig);\n\n\t                            (function (el) {\n\t                                R._preload(isURL[1], function () {\n\t                                    var w = this.offsetWidth,\n\t                                        h = this.offsetHeight;\n\t                                    $(el, {width: w, height: h});\n\t                                    $(ig, {width: w, height: h});\n\t                                });\n\t                            })(el);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {fill: \"url(#\" + el.id + \")\"});\n\t                            o.pattern = el;\n\t                            o.pattern && updatePosition(o);\n\t                            break;\n\t                        }\n\t                        var clr = R.getRGB(value);\n\t                        if (!clr.error) {\n\t                            delete params.gradient;\n\t                            delete attrs.gradient;\n\t                            !R.is(attrs.opacity, \"undefined\") &&\n\t                                R.is(params.opacity, \"undefined\") &&\n\t                                $(node, {opacity: attrs.opacity});\n\t                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n\t                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n\t                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n\t                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n\t                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n\t                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                                if (gradient) {\n\t                                    var stops = gradient.getElementsByTagName(\"stop\");\n\t                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n\t                                }\n\t                            }\n\t                            attrs.gradient = value;\n\t                            attrs.fill = \"none\";\n\t                            break;\n\t                        }\n\t                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                    case \"stroke\":\n\t                        clr = R.getRGB(value);\n\t                        node.setAttribute(att, clr.hex);\n\t                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                        if (att == \"stroke\" && o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"gradient\":\n\t                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n\t                        break;\n\t                    case \"opacity\":\n\t                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n\t                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n\t                        }\n\t                        // fall\n\t                    case \"fill-opacity\":\n\t                        if (attrs.gradient) {\n\t                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                            if (gradient) {\n\t                                stops = gradient.getElementsByTagName(\"stop\");\n\t                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n\t                            }\n\t                            break;\n\t                        }\n\t                    default:\n\t                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n\t                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n\t                            return w.substring(1).toUpperCase();\n\t                        });\n\t                        node.style[cssrule] = value;\n\t                        o._.dirty = 1;\n\t                        node.setAttribute(att, value);\n\t                        break;\n\t                }\n\t            }\n\t        }\n\n\t        tuneText(o, params);\n\t        node.style.visibility = vis;\n\t    },\n\t    leading = 1.2,\n\t    tuneText = function (el, params) {\n\t        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n\t            return;\n\t        }\n\t        var a = el.attrs,\n\t            node = el.node,\n\t            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n\t        if (params[has](\"text\")) {\n\t            a.text = params.text;\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var texts = Str(params.text).split(\"\\n\"),\n\t                tspans = [],\n\t                tspan;\n\t            for (var i = 0, ii = texts.length; i < ii; i++) {\n\t                tspan = $(\"tspan\");\n\t                i && $(tspan, {dy: fontSize * leading, x: a.x});\n\t                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n\t                node.appendChild(tspan);\n\t                tspans[i] = tspan;\n\t            }\n\t        } else {\n\t            tspans = node.getElementsByTagName(\"tspan\");\n\t            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n\t                $(tspans[i], {dy: fontSize * leading, x: a.x});\n\t            } else {\n\t                $(tspans[0], {dy: 0});\n\t            }\n\t        }\n\t        $(node, {x: a.x, y: a.y});\n\t        el._.dirty = 1;\n\t        var bb = el._getBBox(),\n\t            dif = a.y - (bb.y + bb.height / 2);\n\t        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n\t    },\n\t    getRealNode = function (node) {\n\t        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n\t            return node.parentNode;\n\t        } else {\n\t            return node;\n\t        }\n\t    },\n\t    Element = function (node, svg) {\n\t        var X = 0,\n\t            Y = 0;\n\t        /*\\\n\t         * Element.node\n\t         [ property (object) ]\n\t         **\n\t         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t         **\n\t         * Note: Don’t mess with it.\n\t         > Usage\n\t         | // draw a circle at coordinate 10,10 with radius of 10\n\t         | var c = paper.circle(10, 10, 10);\n\t         | c.node.onclick = function () {\n\t         |     c.attr(\"fill\", \"red\");\n\t         | };\n\t        \\*/\n\t        this[0] = this.node = node;\n\t        /*\\\n\t         * Element.raphael\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to @Raphael object. In case it is not available.\n\t         > Usage\n\t         | Raphael.el.red = function () {\n\t         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n\t         |     hsb.h = 1;\n\t         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n\t         | }\n\t        \\*/\n\t        node.raphael = true;\n\t        /*\\\n\t         * Element.id\n\t         [ property (number) ]\n\t         **\n\t         * Unique id of the element. Especially useful when you want to listen to events of the element,\n\t         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n\t        \\*/\n\t        this.id = guid();\n\t        node.raphaelid = this.id;\n\n\t        /**\n\t        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n\t        * @returns {string} id\n\t        */\n\t        function guid() {\n\t            return (\"0000\" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n\t        }\n\n\t        this.matrix = R.matrix();\n\t        this.realPath = null;\n\t        /*\\\n\t         * Element.paper\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n\t         > Usage\n\t         | Raphael.el.cross = function () {\n\t         |     this.attr({fill: \"red\"});\n\t         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n\t         |         .attr({stroke: \"red\"});\n\t         | }\n\t        \\*/\n\t        this.paper = svg;\n\t        this.attrs = this.attrs || {};\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            deg: 0,\n\t            dx: 0,\n\t            dy: 0,\n\t            dirty: 1\n\t        };\n\t        !svg.bottom && (svg.bottom = this);\n\t        /*\\\n\t         * Element.prev\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the previous element in the hierarchy.\n\t        \\*/\n\t        this.prev = svg.top;\n\t        svg.top && (svg.top.next = this);\n\t        svg.top = this;\n\t        /*\\\n\t         * Element.next\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the next element in the hierarchy.\n\t        \\*/\n\t        this.next = null;\n\t    },\n\t    elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\n\t    R._engine.path = function (pathString, SVG) {\n\t        var el = $(\"path\");\n\t        SVG.canvas && SVG.canvas.appendChild(el);\n\t        var p = new Element(el, SVG);\n\t        p.type = \"path\";\n\t        setFillAndStroke(p, {\n\t            fill: \"none\",\n\t            stroke: \"#000\",\n\t            path: pathString\n\t        });\n\t        return p;\n\t    };\n\t    /*\\\n\t     * Element.rotate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds rotation by given angle around given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     - cx (number) #optional x coordinate of the centre of rotation\n\t     - cy (number) #optional y coordinate of the centre of rotation\n\t     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.scale\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds scale by given amount relative to given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - sx (number) horisontal scale amount\n\t     - sy (number) vertical scale amount\n\t     - cx (number) #optional x coordinate of the centre of scale\n\t     - cy (number) #optional y coordinate of the centre of scale\n\t     * If cx & cy aren’t specified centre of the shape is used instead.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.translate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds translation by given amount to the list of transformations of the element.\n\t     > Parameters\n\t     - dx (number) horisontal shift\n\t     - dy (number) vertical shift\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Adds transformation to the element which is separate to other attributes,\n\t     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n\t     * of transformation string is similar to the path string syntax:\n\t     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n\t     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n\t     * scale and `m` is for matrix.\n\t     *\n\t     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n\t     *\n\t     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n\t     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n\t     * coordinates as optional parameters, the default is the centre point of the element.\n\t     * Matrix accepts six parameters.\n\t     > Usage\n\t     | var el = paper.rect(10, 20, 300, 200);\n\t     | // translate 100, 100, rotate 45°, translate -100, 0\n\t     | el.transform(\"t100,100r45t-100,0\");\n\t     | // if you want you can append or prepend transformations\n\t     | el.transform(\"...t50,50\");\n\t     | el.transform(\"s2...\");\n\t     | // or even wrap\n\t     | el.transform(\"t50,50...t-50-50\");\n\t     | // to reset transformation call method with empty string\n\t     | el.transform(\"\");\n\t     | // to get current value call it without parameters\n\t     | console.log(el.transform());\n\t     > Parameters\n\t     - tstr (string) #optional transformation string\n\t     * If tstr isn’t specified\n\t     = (string) current transformation string\n\t     * else\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            return _.transform;\n\t        }\n\t        R._extractTransform(this, tstr);\n\n\t        this.clip && $(this.clip, {transform: this.matrix.invert()});\n\t        this.pattern && updatePosition(this);\n\t        this.node && $(this.node, {transform: this.matrix});\n\n\t        if (_.sx != 1 || _.sy != 1) {\n\t            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n\t            this.attr({\"stroke-width\": sw});\n\t        }\n\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hide\n\t     [ method ]\n\t     **\n\t     * Makes element invisible. See @Element.show.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hide = function () {\n\t        if(!this.removed) this.node.style.display = \"none\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.show\n\t     [ method ]\n\t     **\n\t     * Makes element visible. See @Element.hide.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.show = function () {\n\t        if(!this.removed) this.node.style.display = \"\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the paper.\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var node = getRealNode(this.node);\n\t        if (this.removed || !node.parentNode) {\n\t            return;\n\t        }\n\t        var paper = this.paper;\n\t        paper.__set__ && paper.__set__.exclude(this);\n\t        eve.unbind(\"raphael.*.*.\" + this.id);\n\t        if (this.gradient) {\n\t            paper.defs.removeChild(this.gradient);\n\t        }\n\t        R._tear(this, paper);\n\n\t        node.parentNode.removeChild(node);\n\n\t        // Remove custom data for element\n\t        this.removeData();\n\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.node.style.display == \"none\") {\n\t            this.show();\n\t            var hide = true;\n\t        }\n\t        var canvasHidden = false,\n\t            containerStyle;\n\t        if (this.paper.canvas.parentElement) {\n\t          containerStyle = this.paper.canvas.parentElement.style;\n\t        } //IE10+ can't find parentElement\n\t        else if (this.paper.canvas.parentNode) {\n\t          containerStyle = this.paper.canvas.parentNode.style;\n\t        }\n\n\t        if(containerStyle && containerStyle.display == \"none\") {\n\t          canvasHidden = true;\n\t          containerStyle.display = \"\";\n\t        }\n\t        var bbox = {};\n\t        try {\n\t            bbox = this.node.getBBox();\n\t        } catch(e) {\n\t            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n\t            bbox = {\n\t                x: this.node.clientLeft,\n\t                y: this.node.clientTop,\n\t                width: this.node.clientWidth,\n\t                height: this.node.clientHeight\n\t            }\n\t        } finally {\n\t            bbox = bbox || {};\n\t            if(canvasHidden){\n\t              containerStyle.display = \"none\";\n\t            }\n\t        }\n\t        hide && this.hide();\n\t        return bbox;\n\t    };\n\t    /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Sets the attributes of the element.\n\t     > Parameters\n\t     - attrName (string) attribute’s name\n\t     - value (string) value\n\t     * or\n\t     - params (object) object of name/value pairs\n\t     * or\n\t     - attrName (string) attribute’s name\n\t     * or\n\t     - attrNames (array) in this case method returns array of current values for given attribute names\n\t     = (object) @Element if attrsName & value or params are passed in.\n\t     = (...) value of the attribute if only attrsName is passed in.\n\t     = (array) array of values of the attribute if attrsNames is passed in.\n\t     = (object) object of attributes if nothing is passed in.\n\t     > Possible parameters\n\t     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n\t     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n\t     o clip-rect (string) comma or space separated values: x, y, width and height\n\t     o cursor (string) CSS type of the cursor\n\t     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n\t     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n\t     o fill (string) colour, gradient or image\n\t     o fill-opacity (number)\n\t     o font (string)\n\t     o font-family (string)\n\t     o font-size (number) font size in pixels\n\t     o font-weight (string)\n\t     o height (number)\n\t     o href (string) URL, if specified element behaves as hyperlink\n\t     o opacity (number)\n\t     o path (string) SVG path string format\n\t     o r (number) radius of the circle, ellipse or rounded corner on the rect\n\t     o rx (number) horisontal radius of the ellipse\n\t     o ry (number) vertical radius of the ellipse\n\t     o src (string) image URL, only works for @Element.image element\n\t     o stroke (string) stroke colour\n\t     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n\t     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n\t     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n\t     o stroke-miterlimit (number)\n\t     o stroke-opacity (number)\n\t     o stroke-width (number) stroke width in pixels, default is '1'\n\t     o target (string) used with href\n\t     o text (string) contents of the text element. Use `\\n` for multiline text\n\t     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n\t     o title (string) will create tooltip with a given text\n\t     o transform (string) see @Element.transform\n\t     o width (number)\n\t     o x (number)\n\t     o y (number)\n\t     > Gradients\n\t     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n\t     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n\t     *\n\t     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n\t     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n\t     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n\t     > Path String\n\t     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n\t     > Colour Parsing\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n\t     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n\t     # </ul>\n\t    \\*/\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            if (name == \"transform\") {\n\t                return this._.transform;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        if (value != null) {\n\t            var params = {};\n\t            params[name] = value;\n\t        } else if (name != null && R.is(name, \"object\")) {\n\t            params = name;\n\t        }\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t            this.attrs[key] = params[key];\n\t            for (var subkey in par) if (par[has](subkey)) {\n\t                params[subkey] = par[subkey];\n\t            }\n\t        }\n\t        setFillAndStroke(this, params);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toFront\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toFront = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        node.parentNode.appendChild(node);\n\t        var svg = this.paper;\n\t        svg.top != this && R._tofront(this, svg);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toBack\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        var parentNode = node.parentNode;\n\t        parentNode.insertBefore(node, parentNode.firstChild);\n\t        R._toback(this, this.paper);\n\t        var svg = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts current object after the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\t        if (afterNode.nextSibling) {\n\t            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n\t        } else {\n\t            afterNode.parentNode.appendChild(node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts current object before the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var beforeNode = getRealNode(element.node || element[0].node);\n\t        beforeNode.parentNode.insertBefore(node, beforeNode);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        // Experimental. No Safari support. Use it on your own risk.\n\t        var t = this;\n\t        if (+size !== 0) {\n\t            var fltr = $(\"filter\"),\n\t                blur = $(\"feGaussianBlur\");\n\t            t.attrs.blur = size;\n\t            fltr.id = R.createUUID();\n\t            $(blur, {stdDeviation: +size || 1.5});\n\t            fltr.appendChild(blur);\n\t            t.paper.defs.appendChild(fltr);\n\t            t._blur = fltr;\n\t            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n\t        } else {\n\t            if (t._blur) {\n\t                t._blur.parentNode.removeChild(t._blur);\n\t                delete t._blur;\n\t                delete t.attrs.blur;\n\t            }\n\t            t.node.removeAttribute(\"filter\");\n\t        }\n\t        return t;\n\t    };\n\t    R._engine.circle = function (svg, x, y, r) {\n\t        var el = $(\"circle\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"circle\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.rect = function (svg, x, y, w, h, r) {\n\t        var el = $(\"rect\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"rect\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (svg, x, y, rx, ry) {\n\t        var el = $(\"ellipse\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"ellipse\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.image = function (svg, src, x, y, w, h) {\n\t        var el = $(\"image\");\n\t        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n\t        el.setAttributeNS(xlink, \"href\", src);\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n\t        res.type = \"image\";\n\t        return res;\n\t    };\n\t    R._engine.text = function (svg, x, y, text) {\n\t        var el = $(\"text\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {\n\t            x: x,\n\t            y: y,\n\t            \"text-anchor\": \"middle\",\n\t            text: text,\n\t            \"font-family\": R._availableAttrs[\"font-family\"],\n\t            \"font-size\": R._availableAttrs[\"font-size\"],\n\t            stroke: \"none\",\n\t            fill: \"#000\"\n\t        };\n\t        res.type = \"text\";\n\t        setFillAndStroke(res, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        this.width = width || this.width;\n\t        this.height = height || this.height;\n\t        this.canvas.setAttribute(\"width\", this.width);\n\t        this.canvas.setAttribute(\"height\", this.height);\n\t        if (this._viewBox) {\n\t            this.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con && con.container,\n\t            x = con.x,\n\t            y = con.y,\n\t            width = con.width,\n\t            height = con.height;\n\t        if (!container) {\n\t            throw new Error(\"SVG container not found.\");\n\t        }\n\t        var cnvs = $(\"svg\"),\n\t            css = \"overflow:hidden;\",\n\t            isFloating;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        $(cnvs, {\n\t            height: height,\n\t            version: 1.1,\n\t            width: width,\n\t            xmlns: \"http://www.w3.org/2000/svg\",\n\t            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n\t        });\n\t        if (container == 1) {\n\t            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\t            R._g.doc.body.appendChild(cnvs);\n\t            isFloating = 1;\n\t        } else {\n\t            cnvs.style.cssText = css + \"position:relative\";\n\t            if (container.firstChild) {\n\t                container.insertBefore(cnvs, container.firstChild);\n\t            } else {\n\t                container.appendChild(cnvs);\n\t            }\n\t        }\n\t        container = new R._Paper;\n\t        container.width = width;\n\t        container.height = height;\n\t        container.canvas = cnvs;\n\t        container.clear();\n\t        container._left = container._top = 0;\n\t        isFloating && (container.renderfix = function () {});\n\t        container.renderfix();\n\t        return container;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            size = mmax(w / paperSize.width, h / paperSize.height),\n\t            top = this.top,\n\t            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n\t            vb,\n\t            sw;\n\t        if (x == null) {\n\t            if (this._vbSize) {\n\t                size = 1;\n\t            }\n\t            delete this._vbSize;\n\t            vb = \"0 0 \" + this.width + S + this.height;\n\t        } else {\n\t            this._vbSize = size;\n\t            vb = x + S + y + S + w + S + h;\n\t        }\n\t        $(this.canvas, {\n\t            viewBox: vb,\n\t            preserveAspectRatio: aspectRatio\n\t        });\n\t        while (size && top) {\n\t            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n\t            top.attr({\"stroke-width\": sw});\n\t            top._.dirty = 1;\n\t            top._.dirtyT = 1;\n\t            top = top.prev;\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.renderfix\n\t     [ method ]\n\t     **\n\t     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n\t     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n\t     * This method fixes the issue.\n\t     **\n\t       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n\t    \\*/\n\t    R.prototype.renderfix = function () {\n\t        var cnvs = this.canvas,\n\t            s = cnvs.style,\n\t            pos;\n\t        try {\n\t            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n\t        } catch (e) {\n\t            pos = cnvs.createSVGMatrix();\n\t        }\n\t        var left = -pos.e % 1,\n\t            top = -pos.f % 1;\n\t        if (left || top) {\n\t            if (left) {\n\t                this._left = (this._left + left) % 1;\n\t                s.left = this._left + \"px\";\n\t            }\n\t            if (top) {\n\t                this._top = (this._top + top) % 1;\n\t                s.top = this._top + \"px\";\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.clear\n\t     [ method ]\n\t     **\n\t     * Clears the paper, i.e. removes all the elements.\n\t    \\*/\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        var c = this.canvas;\n\t        while (c.firstChild) {\n\t            c.removeChild(c.firstChild);\n\t        }\n\t        this.bottom = this.top = null;\n\t        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n\t        c.appendChild(this.desc);\n\t        c.appendChild(this.defs = $(\"defs\"));\n\t    };\n\t    /*\\\n\t     * Paper.remove\n\t     [ method ]\n\t     **\n\t     * Removes the paper from the DOM.\n\t    \\*/\n\t    R.prototype.remove = function () {\n\t        eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t    };\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.vml) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        round = math.round,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        fillString = \"fill\",\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        ms = \" progid:DXImageTransform.Microsoft\",\n\t        S = \" \",\n\t        E = \"\",\n\t        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n\t        bites = /([clmz]),?([^clmz]*)/gi,\n\t        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n\t        val = /-?[^,\\s-]+/g,\n\t        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n\t        zoom = 21600,\n\t        pathTypes = {path: 1, rect: 1, image: 1},\n\t        ovalTypes = {circle: 1, ellipse: 1},\n\t        path2vml = function (path) {\n\t            var total =  /[ahqstv]/ig,\n\t                command = R._pathToAbsolute;\n\t            Str(path).match(total) && (command = R._path2curve);\n\t            total = /[clmz]/g;\n\t            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n\t                var res = Str(path).replace(bites, function (all, command, args) {\n\t                    var vals = [],\n\t                        isMove = command.toLowerCase() == \"m\",\n\t                        res = map[command];\n\t                    args.replace(val, function (value) {\n\t                        if (isMove && vals.length == 2) {\n\t                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n\t                            vals = [];\n\t                        }\n\t                        vals.push(round(value * zoom));\n\t                    });\n\t                    return res + vals;\n\t                });\n\t                return res;\n\t            }\n\t            var pa = command(path), p, r;\n\t            res = [];\n\t            for (var i = 0, ii = pa.length; i < ii; i++) {\n\t                p = pa[i];\n\t                r = pa[i][0].toLowerCase();\n\t                r == \"z\" && (r = \"x\");\n\t                for (var j = 1, jj = p.length; j < jj; j++) {\n\t                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n\t                }\n\t                res.push(r);\n\t            }\n\t            return res.join(S);\n\t        },\n\t        compensation = function (deg, dx, dy) {\n\t            var m = R.matrix();\n\t            m.rotate(-deg, .5, .5);\n\t            return {\n\t                dx: m.x(dx, dy),\n\t                dy: m.y(dx, dy)\n\t            };\n\t        },\n\t        setCoords = function (p, sx, sy, dx, dy, deg) {\n\t            var _ = p._,\n\t                m = p.matrix,\n\t                fillpos = _.fillpos,\n\t                o = p.node,\n\t                s = o.style,\n\t                y = 1,\n\t                flip = \"\",\n\t                dxdy,\n\t                kx = zoom / sx,\n\t                ky = zoom / sy;\n\t            s.visibility = \"hidden\";\n\t            if (!sx || !sy) {\n\t                return;\n\t            }\n\t            o.coordsize = abs(kx) + S + abs(ky);\n\t            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\t            if (deg) {\n\t                var c = compensation(deg, dx, dy);\n\t                dx = c.dx;\n\t                dy = c.dy;\n\t            }\n\t            sx < 0 && (flip += \"x\");\n\t            sy < 0 && (flip += \" y\") && (y = -1);\n\t            s.flip = flip;\n\t            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n\t            if (fillpos || _.fillsize) {\n\t                var fill = o.getElementsByTagName(fillString);\n\t                fill = fill && fill[0];\n\t                o.removeChild(fill);\n\t                if (fillpos) {\n\t                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n\t                    fill.position = c.dx * y + S + c.dy * y;\n\t                }\n\t                if (_.fillsize) {\n\t                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n\t                }\n\t                o.appendChild(fill);\n\t            }\n\t            s.visibility = \"visible\";\n\t        };\n\t    R.toString = function () {\n\t        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var addArrow = function (o, value, isEnd) {\n\t        var values = Str(value).toLowerCase().split(\"-\"),\n\t            se = isEnd ? \"end\" : \"start\",\n\t            i = values.length,\n\t            type = \"classic\",\n\t            w = \"medium\",\n\t            h = \"medium\";\n\t        while (i--) {\n\t            switch (values[i]) {\n\t                case \"block\":\n\t                case \"classic\":\n\t                case \"oval\":\n\t                case \"diamond\":\n\t                case \"open\":\n\t                case \"none\":\n\t                    type = values[i];\n\t                    break;\n\t                case \"wide\":\n\t                case \"narrow\": h = values[i]; break;\n\t                case \"long\":\n\t                case \"short\": w = values[i]; break;\n\t            }\n\t        }\n\t        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n\t        stroke[se + \"arrow\"] = type;\n\t        stroke[se + \"arrowlength\"] = w;\n\t        stroke[se + \"arrowwidth\"] = h;\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        // o.paper.canvas.style.display = \"none\";\n\t        o.attrs = o.attrs || {};\n\t        var node = o.node,\n\t            a = o.attrs,\n\t            s = node.style,\n\t            xy,\n\t            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n\t            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n\t            res = o;\n\n\n\t        for (var par in params) if (params[has](par)) {\n\t            a[par] = params[par];\n\t        }\n\t        if (newpath) {\n\t            a.path = R._getPath[o.type](o);\n\t            o._.dirty = 1;\n\t        }\n\t        params.href && (node.href = params.href);\n\t        params.title && (node.title = params.title);\n\t        params.target && (node.target = params.target);\n\t        params.cursor && (s.cursor = params.cursor);\n\t        \"blur\" in params && o.blur(params.blur);\n\t        if (params.path && o.type == \"path\" || newpath) {\n\t            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n\t            o._.dirty = 1;\n\t            if (o.type == \"image\") {\n\t                o._.fillpos = [a.x, a.y];\n\t                o._.fillsize = [a.width, a.height];\n\t                setCoords(o, 1, 1, 0, 0, 0);\n\t            }\n\t        }\n\t        \"transform\" in params && o.transform(params.transform);\n\t        if (isOval) {\n\t            var cx = +a.cx,\n\t                cy = +a.cy,\n\t                rx = +a.rx || +a.r || 0,\n\t                ry = +a.ry || +a.r || 0;\n\t            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n\t            o._.dirty = 1;\n\t        }\n\t        if (\"clip-rect\" in params) {\n\t            var rect = Str(params[\"clip-rect\"]).split(separator);\n\t            if (rect.length == 4) {\n\t                rect[2] = +rect[2] + (+rect[0]);\n\t                rect[3] = +rect[3] + (+rect[1]);\n\t                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n\t                    dstyle = div.style;\n\t                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\t                if (!node.clipRect) {\n\t                    dstyle.position = \"absolute\";\n\t                    dstyle.top = 0;\n\t                    dstyle.left = 0;\n\t                    dstyle.width = o.paper.width + \"px\";\n\t                    dstyle.height = o.paper.height + \"px\";\n\t                    node.parentNode.insertBefore(div, node);\n\t                    div.appendChild(node);\n\t                    node.clipRect = div;\n\t                }\n\t            }\n\t            if (!params[\"clip-rect\"]) {\n\t                node.clipRect && (node.clipRect.style.clip = \"auto\");\n\t            }\n\t        }\n\t        if (o.textpath) {\n\t            var textpathStyle = o.textpath.style;\n\t            params.font && (textpathStyle.font = params.font);\n\t            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n\t            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n\t            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n\t            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n\t        }\n\t        if (\"arrow-start\" in params) {\n\t            addArrow(res, params[\"arrow-start\"]);\n\t        }\n\t        if (\"arrow-end\" in params) {\n\t            addArrow(res, params[\"arrow-end\"], 1);\n\t        }\n\t        if (params.opacity != null ||\n\t            params.fill != null ||\n\t            params.src != null ||\n\t            params.stroke != null ||\n\t            params[\"stroke-width\"] != null ||\n\t            params[\"stroke-opacity\"] != null ||\n\t            params[\"fill-opacity\"] != null ||\n\t            params[\"stroke-dasharray\"] != null ||\n\t            params[\"stroke-miterlimit\"] != null ||\n\t            params[\"stroke-linejoin\"] != null ||\n\t            params[\"stroke-linecap\"] != null) {\n\t            var fill = node.getElementsByTagName(fillString),\n\t                newfill = false;\n\t            fill = fill && fill[0];\n\t            !fill && (newfill = fill = createNode(fillString));\n\t            if (o.type == \"image\" && params.src) {\n\t                fill.src = params.src;\n\t            }\n\t            params.fill && (fill.on = true);\n\t            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n\t                fill.on = false;\n\t            }\n\t            if (fill.on && params.fill) {\n\t                var isURL = Str(params.fill).match(R._ISURL);\n\t                if (isURL) {\n\t                    fill.parentNode == node && node.removeChild(fill);\n\t                    fill.rotate = true;\n\t                    fill.src = isURL[1];\n\t                    fill.type = \"tile\";\n\t                    var bbox = o.getBBox(1);\n\t                    fill.position = bbox.x + S + bbox.y;\n\t                    o._.fillpos = [bbox.x, bbox.y];\n\n\t                    R._preload(isURL[1], function () {\n\t                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n\t                    });\n\t                } else {\n\t                    fill.color = R.getRGB(params.fill).hex;\n\t                    fill.src = E;\n\t                    fill.type = \"solid\";\n\t                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n\t                        a.fill = \"none\";\n\t                        a.gradient = params.fill;\n\t                        fill.rotate = false;\n\t                    }\n\t                }\n\t            }\n\t            if (\"fill-opacity\" in params || \"opacity\" in params) {\n\t                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                fill.opacity = opacity;\n\t                if (fill.src) {\n\t                    fill.color = \"none\";\n\t                }\n\t            }\n\t            node.appendChild(fill);\n\t            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n\t            newstroke = false;\n\t            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\t            if ((params.stroke && params.stroke != \"none\") ||\n\t                params[\"stroke-width\"] ||\n\t                params[\"stroke-opacity\"] != null ||\n\t                params[\"stroke-dasharray\"] ||\n\t                params[\"stroke-miterlimit\"] ||\n\t                params[\"stroke-linejoin\"] ||\n\t                params[\"stroke-linecap\"]) {\n\t                stroke.on = true;\n\t            }\n\t            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n\t            var strokeColor = R.getRGB(params.stroke);\n\t            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n\t            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n\t            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n\t            opacity = mmin(mmax(opacity, 0), 1);\n\t            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n\t            params[\"stroke-width\"] && (stroke.weight = width);\n\t            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n\t            stroke.opacity = opacity;\n\n\t            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n\t            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n\t            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\t            if (\"stroke-dasharray\" in params) {\n\t                var dasharray = {\n\t                    \"-\": \"shortdash\",\n\t                    \".\": \"shortdot\",\n\t                    \"-.\": \"shortdashdot\",\n\t                    \"-..\": \"shortdashdotdot\",\n\t                    \". \": \"dot\",\n\t                    \"- \": \"dash\",\n\t                    \"--\": \"longdash\",\n\t                    \"- .\": \"dashdot\",\n\t                    \"--.\": \"longdashdot\",\n\t                    \"--..\": \"longdashdotdot\"\n\t                };\n\t                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n\t            }\n\t            newstroke && node.appendChild(stroke);\n\t        }\n\t        if (res.type == \"text\") {\n\t            res.paper.canvas.style.display = E;\n\t            var span = res.paper.span,\n\t                m = 100,\n\t                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n\t            s = span.style;\n\t            a.font && (s.font = a.font);\n\t            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n\t            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n\t            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n\t            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n\t            s.fontSize = fontSize * m + \"px\";\n\t            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n\t            var brect = span.getBoundingClientRect();\n\t            res.W = a.w = (brect.right - brect.left) / m;\n\t            res.H = a.h = (brect.bottom - brect.top) / m;\n\t            // res.paper.canvas.style.display = \"none\";\n\t            res.X = a.x;\n\t            res.Y = a.y + res.H / 2;\n\n\t            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n\t            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\t            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n\t                res._.dirty = 1;\n\t                break;\n\t            }\n\n\t            // text-anchor emulation\n\t            switch (a[\"text-anchor\"]) {\n\t                case \"start\":\n\t                    res.textpath.style[\"v-text-align\"] = \"left\";\n\t                    res.bbx = res.W / 2;\n\t                break;\n\t                case \"end\":\n\t                    res.textpath.style[\"v-text-align\"] = \"right\";\n\t                    res.bbx = -res.W / 2;\n\t                break;\n\t                default:\n\t                    res.textpath.style[\"v-text-align\"] = \"center\";\n\t                    res.bbx = 0;\n\t                break;\n\t            }\n\t            res.textpath.style[\"v-text-kern\"] = true;\n\t        }\n\t        // res.paper.canvas.style.display = E;\n\t    },\n\t    addGradientFill = function (o, gradient, fill) {\n\t        o.attrs = o.attrs || {};\n\t        var attrs = o.attrs,\n\t            pow = Math.pow,\n\t            opacity,\n\t            oindex,\n\t            type = \"linear\",\n\t            fxfy = \".5 .5\";\n\t        o.attrs.gradient = gradient;\n\t        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n\t            type = \"radial\";\n\t            if (fx && fy) {\n\t                fx = toFloat(fx);\n\t                fy = toFloat(fy);\n\t                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n\t                fxfy = fx + S + fy;\n\t            }\n\t            return E;\n\t        });\n\t        gradient = gradient.split(/\\s*\\-\\s*/);\n\t        if (type == \"linear\") {\n\t            var angle = gradient.shift();\n\t            angle = -toFloat(angle);\n\t            if (isNaN(angle)) {\n\t                return null;\n\t            }\n\t        }\n\t        var dots = R._parseDots(gradient);\n\t        if (!dots) {\n\t            return null;\n\t        }\n\t        o = o.shape || o.node;\n\t        if (dots.length) {\n\t            o.removeChild(fill);\n\t            fill.on = true;\n\t            fill.method = \"none\";\n\t            fill.color = dots[0].color;\n\t            fill.color2 = dots[dots.length - 1].color;\n\t            var clrs = [];\n\t            for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n\t            }\n\t            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\t            if (type == \"radial\") {\n\t                fill.type = \"gradientTitle\";\n\t                fill.focus = \"100%\";\n\t                fill.focussize = \"0 0\";\n\t                fill.focusposition = fxfy;\n\t                fill.angle = 0;\n\t            } else {\n\t                // fill.rotate= true;\n\t                fill.type = \"gradient\";\n\t                fill.angle = (270 - angle) % 360;\n\t            }\n\t            o.appendChild(fill);\n\t        }\n\t        return 1;\n\t    },\n\t    Element = function (node, vml) {\n\t        this[0] = this.node = node;\n\t        node.raphael = true;\n\t        this.id = R._oid++;\n\t        node.raphaelid = this.id;\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.attrs = {};\n\t        this.paper = vml;\n\t        this.matrix = R.matrix();\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            dx: 0,\n\t            dy: 0,\n\t            deg: 0,\n\t            dirty: 1,\n\t            dirtyT: 1\n\t        };\n\t        !vml.bottom && (vml.bottom = this);\n\t        this.prev = vml.top;\n\t        vml.top && (vml.top.next = this);\n\t        vml.top = this;\n\t        this.next = null;\n\t    };\n\t    var elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\t    elproto.transform = function (tstr) {\n\t        if (tstr == null) {\n\t            return this._.transform;\n\t        }\n\t        var vbs = this.paper._viewBoxShift,\n\t            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n\t            oldt;\n\t        if (vbs) {\n\t            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n\t        }\n\t        R._extractTransform(this, vbt + tstr);\n\t        var matrix = this.matrix.clone(),\n\t            skew = this.skew,\n\t            o = this.node,\n\t            split,\n\t            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n\t            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n\t        matrix.translate(1, 1);\n\t        if (isPatt || isGrad || this.type == \"image\") {\n\t            skew.matrix = \"1 0 0 1\";\n\t            skew.offset = \"0 0\";\n\t            split = matrix.split();\n\t            if ((isGrad && split.noRotation) || !split.isSimple) {\n\t                o.style.filter = matrix.toFilter();\n\t                var bb = this.getBBox(),\n\t                    bbt = this.getBBox(1),\n\t                    dx = bb.x - bbt.x,\n\t                    dy = bb.y - bbt.y;\n\t                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n\t                setCoords(this, 1, 1, dx, dy, 0);\n\t            } else {\n\t                o.style.filter = E;\n\t                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n\t            }\n\t        } else {\n\t            o.style.filter = E;\n\t            skew.matrix = Str(matrix);\n\t            skew.offset = matrix.offset();\n\t        }\n\t        if (oldt !== null) { // empty string value is true as well\n\t            this._.transform = oldt;\n\t            R._extractTransform(this, oldt);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (deg == null) {\n\t            return;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this._.dirtyT = 1;\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        if (this._.bbox) {\n\t            this._.bbox.x += dx;\n\t            this._.bbox.y += dy;\n\t        }\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t            isNaN(cx) && (cx = null);\n\t            isNaN(cy) && (cy = null);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        this._.dirtyT = 1;\n\t        return this;\n\t    };\n\t    elproto.hide = function () {\n\t        !this.removed && (this.node.style.display = \"none\");\n\t        return this;\n\t    };\n\t    elproto.show = function () {\n\t        !this.removed && (this.node.style.display = E);\n\t        return this;\n\t    };\n\t    // Needed to fix the vml setViewBox issues\n\t    elproto.auxGetBBox = R.el.getBBox;\n\t    elproto.getBBox = function(){\n\t      var b = this.auxGetBBox();\n\t      if (this.paper && this.paper._viewBoxShift)\n\t      {\n\t        var c = {};\n\t        var z = 1/this.paper._viewBoxShift.scale;\n\t        c.x = b.x - this.paper._viewBoxShift.dx;\n\t        c.x *= z;\n\t        c.y = b.y - this.paper._viewBoxShift.dy;\n\t        c.y *= z;\n\t        c.width  = b.width  * z;\n\t        c.height = b.height * z;\n\t        c.x2 = c.x + c.width;\n\t        c.y2 = c.y + c.height;\n\t        return c;\n\t      }\n\t      return b;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        return {\n\t            x: this.X + (this.bbx || 0) - this.W / 2,\n\t            y: this.Y - this.H,\n\t            width: this.W,\n\t            height: this.H\n\t        };\n\t    };\n\t    elproto.remove = function () {\n\t        if (this.removed || !this.node.parentNode) {\n\t            return;\n\t        }\n\t        this.paper.__set__ && this.paper.__set__.exclude(this);\n\t        R.eve.unbind(\"raphael.*.*.\" + this.id);\n\t        R._tear(this, this.paper);\n\t        this.node.parentNode.removeChild(this.node);\n\t        this.shape && this.shape.parentNode.removeChild(this.shape);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (this.attrs && value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        var params;\n\t        if (value != null) {\n\t            params = {};\n\t            params[name] = value;\n\t        }\n\t        value == null && R.is(name, \"object\") && (params = name);\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        if (params) {\n\t            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t                this.attrs[key] = params[key];\n\t                for (var subkey in par) if (par[has](subkey)) {\n\t                    params[subkey] = par[subkey];\n\t                }\n\t            }\n\t            // this.paper.canvas.style.display = \"none\";\n\t            if (params.text && this.type == \"text\") {\n\t                this.textpath.string = params.text;\n\t            }\n\t            setFillAndStroke(this, params);\n\t            // this.paper.canvas.style.display = E;\n\t        }\n\t        return this;\n\t    };\n\t    elproto.toFront = function () {\n\t        !this.removed && this.node.parentNode.appendChild(this.node);\n\t        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n\t        return this;\n\t    };\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (this.node.parentNode.firstChild != this.node) {\n\t            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\t            R._toback(this, this.paper);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[element.length - 1];\n\t        }\n\t        if (element.node.nextSibling) {\n\t            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n\t        } else {\n\t            element.node.parentNode.appendChild(this.node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[0];\n\t        }\n\t        element.node.parentNode.insertBefore(this.node, element.node);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        var s = this.node.runtimeStyle,\n\t            f = s.filter;\n\t        f = f.replace(blurregexp, E);\n\t        if (+size !== 0) {\n\t            this.attrs.blur = size;\n\t            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n\t            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n\t        } else {\n\t            s.filter = f;\n\t            s.margin = 0;\n\t            delete this.attrs.blur;\n\t        }\n\t        return this;\n\t    };\n\n\t    R._engine.path = function (pathString, vml) {\n\t        var el = createNode(\"shape\");\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = vml.coordorigin;\n\t        var p = new Element(el, vml),\n\t            attr = {fill: \"none\", stroke: \"#000\"};\n\t        pathString && (attr.path = pathString);\n\t        p.type = \"path\";\n\t        p.path = [];\n\t        p.Path = E;\n\t        setFillAndStroke(p, attr);\n\t        vml.canvas && vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.rect = function (vml, x, y, w, h, r) {\n\t        var path = R._rectPath(x, y, w, h, r),\n\t            res = vml.path(path),\n\t            a = res.attrs;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.r = r;\n\t        a.path = path;\n\t        res.type = \"rect\";\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (vml, x, y, rx, ry) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - rx;\n\t        res.Y = y - ry;\n\t        res.W = rx * 2;\n\t        res.H = ry * 2;\n\t        res.type = \"ellipse\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            rx: rx,\n\t            ry: ry\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.circle = function (vml, x, y, r) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - r;\n\t        res.Y = y - r;\n\t        res.W = res.H = r * 2;\n\t        res.type = \"circle\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            r: r\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.image = function (vml, src, x, y, w, h) {\n\t        var path = R._rectPath(x, y, w, h),\n\t            res = vml.path(path).attr({stroke: \"none\"}),\n\t            a = res.attrs,\n\t            node = res.node,\n\t            fill = node.getElementsByTagName(fillString)[0];\n\t        a.src = src;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.path = path;\n\t        res.type = \"image\";\n\t        fill.parentNode == node && node.removeChild(fill);\n\t        fill.rotate = true;\n\t        fill.src = src;\n\t        fill.type = \"tile\";\n\t        res._.fillpos = [x, y];\n\t        res._.fillsize = [w, h];\n\t        node.appendChild(fill);\n\t        setCoords(res, 1, 1, 0, 0, 0);\n\t        return res;\n\t    };\n\t    R._engine.text = function (vml, x, y, text) {\n\t        var el = createNode(\"shape\"),\n\t            path = createNode(\"path\"),\n\t            o = createNode(\"textpath\");\n\t        x = x || 0;\n\t        y = y || 0;\n\t        text = text || \"\";\n\t        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n\t        path.textpathok = true;\n\t        o.string = Str(text);\n\t        o.on = true;\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = \"0 0\";\n\t        var p = new Element(el, vml),\n\t            attr = {\n\t                fill: \"#000\",\n\t                stroke: \"none\",\n\t                font: R._availableAttrs.font,\n\t                text: text\n\t            };\n\t        p.shape = el;\n\t        p.path = path;\n\t        p.textpath = o;\n\t        p.type = \"text\";\n\t        p.attrs.text = Str(text);\n\t        p.attrs.x = x;\n\t        p.attrs.y = y;\n\t        p.attrs.w = 1;\n\t        p.attrs.h = 1;\n\t        setFillAndStroke(p, attr);\n\t        el.appendChild(o);\n\t        el.appendChild(path);\n\t        vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        var cs = this.canvas.style;\n\t        this.width = width;\n\t        this.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        cs.width = width;\n\t        cs.height = height;\n\t        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\t        if (this._viewBox) {\n\t            R._engine.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            width = paperSize.width,\n\t            height = paperSize.height,\n\t            H, W;\n\t        if (fit) {\n\t            H = height / h;\n\t            W = width / w;\n\t            if (w * H < width) {\n\t                x -= (width - w * H) / 2 / H;\n\t            }\n\t            if (h * W < height) {\n\t                y -= (height - h * W) / 2 / W;\n\t            }\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        this._viewBoxShift = {\n\t            dx: -x,\n\t            dy: -y,\n\t            scale: paperSize\n\t        };\n\t        this.forEach(function (el) {\n\t            el.transform(\"...\");\n\t        });\n\t        return this;\n\t    };\n\t    var createNode;\n\t    R._engine.initWin = function (win) {\n\t            var doc = win.document;\n\t            if (doc.styleSheets.length < 31) {\n\t                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            } else {\n\t                // no more room, add to the existing one\n\t                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            }\n\t            try {\n\t                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n\t                };\n\t            } catch (e) {\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n\t                };\n\t            }\n\t        };\n\t    R._engine.initWin(R._g.win);\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con.container,\n\t            height = con.height,\n\t            s,\n\t            width = con.width,\n\t            x = con.x,\n\t            y = con.y;\n\t        if (!container) {\n\t            throw new Error(\"VML container not found.\");\n\t        }\n\t        var res = new R._Paper,\n\t            c = res.canvas = R._g.doc.createElement(\"div\"),\n\t            cs = c.style;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        res.width = width;\n\t        res.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n\t        res.coordorigin = \"0 0\";\n\t        res.span = R._g.doc.createElement(\"span\");\n\t        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n\t        c.appendChild(res.span);\n\t        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\t        if (container == 1) {\n\t            R._g.doc.body.appendChild(c);\n\t            cs.left = x + \"px\";\n\t            cs.top = y + \"px\";\n\t            cs.position = \"absolute\";\n\t        } else {\n\t            if (container.firstChild) {\n\t                container.insertBefore(c, container.firstChild);\n\t            } else {\n\t                container.appendChild(c);\n\t            }\n\t        }\n\t        res.renderfix = function () {};\n\t        return res;\n\t    };\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        this.canvas.innerHTML = E;\n\t        this.span = R._g.doc.createElement(\"span\");\n\t        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n\t        this.canvas.appendChild(this.span);\n\t        this.bottom = this.top = null;\n\t    };\n\t    R.prototype.remove = function () {\n\t        R.eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        return true;\n\t    };\n\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": _vm.id\n    }\n  })\n},staticRenderFns: []}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nvar _Donut = __webpack_require__(0);\n\nvar _Donut2 = _interopRequireDefault(_Donut);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar VueMorris = {\n  Donut: _Donut2.default\n};\n\nmodule.exports = VueMorris;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// vue-morris.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 409e27bc92ba7da79ae9","var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = require(\"!!babel-loader!vue-loader/lib/selector?type=script&index=0!./Donut.vue\")\n\n/* template */\nvar __vue_template__ = require(\"!!vue-loader/lib/template-compiler?id=data-v-1d36c436!vue-loader/lib/selector?type=template&index=0!./Donut.vue\")\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Donut.vue\n// module id = 0\n// module chunks = 0","<template>\r\n  <div :id=\"id\"></div>\r\n</template>\r\n\r\n<script>\r\nimport Raphael from 'raphael/raphael'\r\nwindow.Raphael = Raphael\r\nimport 'morris.js/morris'\r\n\r\nexport default {\r\n  name: 'donut',\r\n\r\n  data () {\r\n    return {\r\n      chart: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    chartData () {\r\n      if (typeof this.data === 'string') {\r\n        return JSON.parse(this.data)\r\n      }\r\n      return this.data\r\n    },\r\n\r\n    chartResize () {\r\n      if (typeof this.resize === 'string') {\r\n        return this.resize === 'true'\r\n      }\r\n      return false\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    data (val) {\r\n      this.$nextTick(() => {\r\n        this.chart.setData(this.data)\r\n      })\r\n    }\r\n  },\r\n\r\n  props: {\r\n    id: { type: String, required: true }, \r\n    data: { required: true },\r\n    colors: { required: false },\r\n    formatter: { type: Function, required: false },\r\n    resize: { required: false }\r\n  },\r\n\r\n  mounted () {\r\n    let options = {\r\n      element: this.id,\r\n      data: this.chartData,\r\n      resize: this.chartResize\r\n    }\r\n\r\n    if (this.colors) {\r\n      options.colors = this.colors\r\n    }\r\n\r\n    if (this.formatter) {\r\n      options.formatter = this.formatter\r\n    }\r\n\r\n    this.chart = Morris.Donut(options)\r\n  }\r\n}\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// Donut.vue?21fece20","/* @license\nmorris.js v0.5.0\nCopyright 2014 Olly Smith All rights reserved.\nLicensed under the BSD-2-Clause License.\n*/\n\n\n(function() {\n  var $, Morris, minutesSpecHelper, secondsSpecHelper,\n    __slice = [].slice,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  Morris = window.Morris = {};\n\n  $ = jQuery;\n\n  Morris.EventEmitter = (function() {\n    function EventEmitter() {}\n\n    EventEmitter.prototype.on = function(name, handler) {\n      if (this.handlers == null) {\n        this.handlers = {};\n      }\n      if (this.handlers[name] == null) {\n        this.handlers[name] = [];\n      }\n      this.handlers[name].push(handler);\n      return this;\n    };\n\n    EventEmitter.prototype.fire = function() {\n      var args, handler, name, _i, _len, _ref, _results;\n      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if ((this.handlers != null) && (this.handlers[name] != null)) {\n        _ref = this.handlers[name];\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          handler = _ref[_i];\n          _results.push(handler.apply(null, args));\n        }\n        return _results;\n      }\n    };\n\n    return EventEmitter;\n\n  })();\n\n  Morris.commas = function(num) {\n    var absnum, intnum, ret, strabsnum;\n    if (num != null) {\n      ret = num < 0 ? \"-\" : \"\";\n      absnum = Math.abs(num);\n      intnum = Math.floor(absnum).toFixed(0);\n      ret += intnum.replace(/(?=(?:\\d{3})+$)(?!^)/g, ',');\n      strabsnum = absnum.toString();\n      if (strabsnum.length > intnum.length) {\n        ret += strabsnum.slice(intnum.length);\n      }\n      return ret;\n    } else {\n      return '-';\n    }\n  };\n\n  Morris.pad2 = function(number) {\n    return (number < 10 ? '0' : '') + number;\n  };\n\n  Morris.Grid = (function(_super) {\n    __extends(Grid, _super);\n\n    function Grid(options) {\n      this.resizeHandler = __bind(this.resizeHandler, this);\n      var _this = this;\n      if (typeof options.element === 'string') {\n        this.el = $(document.getElementById(options.element));\n      } else {\n        this.el = $(options.element);\n      }\n      if ((this.el == null) || this.el.length === 0) {\n        throw new Error(\"Graph container element not found\");\n      }\n      if (this.el.css('position') === 'static') {\n        this.el.css('position', 'relative');\n      }\n      this.options = $.extend({}, this.gridDefaults, this.defaults || {}, options);\n      if (typeof this.options.units === 'string') {\n        this.options.postUnits = options.units;\n      }\n      this.raphael = new Raphael(this.el[0]);\n      this.elementWidth = null;\n      this.elementHeight = null;\n      this.dirty = false;\n      this.selectFrom = null;\n      if (this.init) {\n        this.init();\n      }\n      this.setData(this.options.data);\n      this.el.bind('mousemove', function(evt) {\n        var left, offset, right, width, x;\n        offset = _this.el.offset();\n        x = evt.pageX - offset.left;\n        if (_this.selectFrom) {\n          left = _this.data[_this.hitTest(Math.min(x, _this.selectFrom))]._x;\n          right = _this.data[_this.hitTest(Math.max(x, _this.selectFrom))]._x;\n          width = right - left;\n          return _this.selectionRect.attr({\n            x: left,\n            width: width\n          });\n        } else {\n          return _this.fire('hovermove', x, evt.pageY - offset.top);\n        }\n      });\n      this.el.bind('mouseleave', function(evt) {\n        if (_this.selectFrom) {\n          _this.selectionRect.hide();\n          _this.selectFrom = null;\n        }\n        return _this.fire('hoverout');\n      });\n      this.el.bind('touchstart touchmove touchend', function(evt) {\n        var offset, touch;\n        touch = evt.originalEvent.touches[0] || evt.originalEvent.changedTouches[0];\n        offset = _this.el.offset();\n        return _this.fire('hovermove', touch.pageX - offset.left, touch.pageY - offset.top);\n      });\n      this.el.bind('click', function(evt) {\n        var offset;\n        offset = _this.el.offset();\n        return _this.fire('gridclick', evt.pageX - offset.left, evt.pageY - offset.top);\n      });\n      if (this.options.rangeSelect) {\n        this.selectionRect = this.raphael.rect(0, 0, 0, this.el.innerHeight()).attr({\n          fill: this.options.rangeSelectColor,\n          stroke: false\n        }).toBack().hide();\n        this.el.bind('mousedown', function(evt) {\n          var offset;\n          offset = _this.el.offset();\n          return _this.startRange(evt.pageX - offset.left);\n        });\n        this.el.bind('mouseup', function(evt) {\n          var offset;\n          offset = _this.el.offset();\n          _this.endRange(evt.pageX - offset.left);\n          return _this.fire('hovermove', evt.pageX - offset.left, evt.pageY - offset.top);\n        });\n      }\n      if (this.options.resize) {\n        $(window).bind('resize', function(evt) {\n          if (_this.timeoutId != null) {\n            window.clearTimeout(_this.timeoutId);\n          }\n          return _this.timeoutId = window.setTimeout(_this.resizeHandler, 100);\n        });\n      }\n      this.el.css('-webkit-tap-highlight-color', 'rgba(0,0,0,0)');\n      if (this.postInit) {\n        this.postInit();\n      }\n    }\n\n    Grid.prototype.gridDefaults = {\n      dateFormat: null,\n      axes: true,\n      grid: true,\n      gridLineColor: '#aaa',\n      gridStrokeWidth: 0.5,\n      gridTextColor: '#888',\n      gridTextSize: 12,\n      gridTextFamily: 'sans-serif',\n      gridTextWeight: 'normal',\n      hideHover: false,\n      yLabelFormat: null,\n      xLabelAngle: 0,\n      numLines: 5,\n      padding: 25,\n      parseTime: true,\n      postUnits: '',\n      preUnits: '',\n      ymax: 'auto',\n      ymin: 'auto 0',\n      goals: [],\n      goalStrokeWidth: 1.0,\n      goalLineColors: ['#666633', '#999966', '#cc6666', '#663333'],\n      events: [],\n      eventStrokeWidth: 1.0,\n      eventLineColors: ['#005a04', '#ccffbb', '#3a5f0b', '#005502'],\n      rangeSelect: null,\n      rangeSelectColor: '#eef',\n      resize: false\n    };\n\n    Grid.prototype.setData = function(data, redraw) {\n      var e, idx, index, maxGoal, minGoal, ret, row, step, total, y, ykey, ymax, ymin, yval, _ref;\n      if (redraw == null) {\n        redraw = true;\n      }\n      this.options.data = data;\n      if ((data == null) || data.length === 0) {\n        this.data = [];\n        this.raphael.clear();\n        if (this.hover != null) {\n          this.hover.hide();\n        }\n        return;\n      }\n      ymax = this.cumulative ? 0 : null;\n      ymin = this.cumulative ? 0 : null;\n      if (this.options.goals.length > 0) {\n        minGoal = Math.min.apply(Math, this.options.goals);\n        maxGoal = Math.max.apply(Math, this.options.goals);\n        ymin = ymin != null ? Math.min(ymin, minGoal) : minGoal;\n        ymax = ymax != null ? Math.max(ymax, maxGoal) : maxGoal;\n      }\n      this.data = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {\n          row = data[index];\n          ret = {\n            src: row\n          };\n          ret.label = row[this.options.xkey];\n          if (this.options.parseTime) {\n            ret.x = Morris.parseDate(ret.label);\n            if (this.options.dateFormat) {\n              ret.label = this.options.dateFormat(ret.x);\n            } else if (typeof ret.label === 'number') {\n              ret.label = new Date(ret.label).toString();\n            }\n          } else {\n            ret.x = index;\n            if (this.options.xLabelFormat) {\n              ret.label = this.options.xLabelFormat(ret);\n            }\n          }\n          total = 0;\n          ret.y = (function() {\n            var _j, _len1, _ref, _results1;\n            _ref = this.options.ykeys;\n            _results1 = [];\n            for (idx = _j = 0, _len1 = _ref.length; _j < _len1; idx = ++_j) {\n              ykey = _ref[idx];\n              yval = row[ykey];\n              if (typeof yval === 'string') {\n                yval = parseFloat(yval);\n              }\n              if ((yval != null) && typeof yval !== 'number') {\n                yval = null;\n              }\n              if (yval != null) {\n                if (this.cumulative) {\n                  total += yval;\n                } else {\n                  if (ymax != null) {\n                    ymax = Math.max(yval, ymax);\n                    ymin = Math.min(yval, ymin);\n                  } else {\n                    ymax = ymin = yval;\n                  }\n                }\n              }\n              if (this.cumulative && (total != null)) {\n                ymax = Math.max(total, ymax);\n                ymin = Math.min(total, ymin);\n              }\n              _results1.push(yval);\n            }\n            return _results1;\n          }).call(this);\n          _results.push(ret);\n        }\n        return _results;\n      }).call(this);\n      if (this.options.parseTime) {\n        this.data = this.data.sort(function(a, b) {\n          return (a.x > b.x) - (b.x > a.x);\n        });\n      }\n      this.xmin = this.data[0].x;\n      this.xmax = this.data[this.data.length - 1].x;\n      this.events = [];\n      if (this.options.events.length > 0) {\n        if (this.options.parseTime) {\n          this.events = (function() {\n            var _i, _len, _ref, _results;\n            _ref = this.options.events;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              e = _ref[_i];\n              _results.push(Morris.parseDate(e));\n            }\n            return _results;\n          }).call(this);\n        } else {\n          this.events = this.options.events;\n        }\n        this.xmax = Math.max(this.xmax, Math.max.apply(Math, this.events));\n        this.xmin = Math.min(this.xmin, Math.min.apply(Math, this.events));\n      }\n      if (this.xmin === this.xmax) {\n        this.xmin -= 1;\n        this.xmax += 1;\n      }\n      this.ymin = this.yboundary('min', ymin);\n      this.ymax = this.yboundary('max', ymax);\n      if (this.ymin === this.ymax) {\n        if (ymin) {\n          this.ymin -= 1;\n        }\n        this.ymax += 1;\n      }\n      if (((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') || this.options.grid === true) {\n        if (this.options.ymax === this.gridDefaults.ymax && this.options.ymin === this.gridDefaults.ymin) {\n          this.grid = this.autoGridLines(this.ymin, this.ymax, this.options.numLines);\n          this.ymin = Math.min(this.ymin, this.grid[0]);\n          this.ymax = Math.max(this.ymax, this.grid[this.grid.length - 1]);\n        } else {\n          step = (this.ymax - this.ymin) / (this.options.numLines - 1);\n          this.grid = (function() {\n            var _i, _ref1, _ref2, _results;\n            _results = [];\n            for (y = _i = _ref1 = this.ymin, _ref2 = this.ymax; step > 0 ? _i <= _ref2 : _i >= _ref2; y = _i += step) {\n              _results.push(y);\n            }\n            return _results;\n          }).call(this);\n        }\n      }\n      this.dirty = true;\n      if (redraw) {\n        return this.redraw();\n      }\n    };\n\n    Grid.prototype.yboundary = function(boundaryType, currentValue) {\n      var boundaryOption, suggestedValue;\n      boundaryOption = this.options[\"y\" + boundaryType];\n      if (typeof boundaryOption === 'string') {\n        if (boundaryOption.slice(0, 4) === 'auto') {\n          if (boundaryOption.length > 5) {\n            suggestedValue = parseInt(boundaryOption.slice(5), 10);\n            if (currentValue == null) {\n              return suggestedValue;\n            }\n            return Math[boundaryType](currentValue, suggestedValue);\n          } else {\n            if (currentValue != null) {\n              return currentValue;\n            } else {\n              return 0;\n            }\n          }\n        } else {\n          return parseInt(boundaryOption, 10);\n        }\n      } else {\n        return boundaryOption;\n      }\n    };\n\n    Grid.prototype.autoGridLines = function(ymin, ymax, nlines) {\n      var gmax, gmin, grid, smag, span, step, unit, y, ymag;\n      span = ymax - ymin;\n      ymag = Math.floor(Math.log(span) / Math.log(10));\n      unit = Math.pow(10, ymag);\n      gmin = Math.floor(ymin / unit) * unit;\n      gmax = Math.ceil(ymax / unit) * unit;\n      step = (gmax - gmin) / (nlines - 1);\n      if (unit === 1 && step > 1 && Math.ceil(step) !== step) {\n        step = Math.ceil(step);\n        gmax = gmin + step * (nlines - 1);\n      }\n      if (gmin < 0 && gmax > 0) {\n        gmin = Math.floor(ymin / step) * step;\n        gmax = Math.ceil(ymax / step) * step;\n      }\n      if (step < 1) {\n        smag = Math.floor(Math.log(step) / Math.log(10));\n        grid = (function() {\n          var _i, _results;\n          _results = [];\n          for (y = _i = gmin; step > 0 ? _i <= gmax : _i >= gmax; y = _i += step) {\n            _results.push(parseFloat(y.toFixed(1 - smag)));\n          }\n          return _results;\n        })();\n      } else {\n        grid = (function() {\n          var _i, _results;\n          _results = [];\n          for (y = _i = gmin; step > 0 ? _i <= gmax : _i >= gmax; y = _i += step) {\n            _results.push(y);\n          }\n          return _results;\n        })();\n      }\n      return grid;\n    };\n\n    Grid.prototype._calc = function() {\n      var bottomOffsets, gridLine, h, i, w, yLabelWidths, _ref, _ref1;\n      w = this.el.width();\n      h = this.el.height();\n      if (this.elementWidth !== w || this.elementHeight !== h || this.dirty) {\n        this.elementWidth = w;\n        this.elementHeight = h;\n        this.dirty = false;\n        this.left = this.options.padding;\n        this.right = this.elementWidth - this.options.padding;\n        this.top = this.options.padding;\n        this.bottom = this.elementHeight - this.options.padding;\n        if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') {\n          yLabelWidths = (function() {\n            var _i, _len, _ref1, _results;\n            _ref1 = this.grid;\n            _results = [];\n            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n              gridLine = _ref1[_i];\n              _results.push(this.measureText(this.yAxisFormat(gridLine)).width);\n            }\n            return _results;\n          }).call(this);\n          this.left += Math.max.apply(Math, yLabelWidths);\n        }\n        if ((_ref1 = this.options.axes) === true || _ref1 === 'both' || _ref1 === 'x') {\n          bottomOffsets = (function() {\n            var _i, _ref2, _results;\n            _results = [];\n            for (i = _i = 0, _ref2 = this.data.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {\n              _results.push(this.measureText(this.data[i].text, -this.options.xLabelAngle).height);\n            }\n            return _results;\n          }).call(this);\n          this.bottom -= Math.max.apply(Math, bottomOffsets);\n        }\n        this.width = Math.max(1, this.right - this.left);\n        this.height = Math.max(1, this.bottom - this.top);\n        this.dx = this.width / (this.xmax - this.xmin);\n        this.dy = this.height / (this.ymax - this.ymin);\n        if (this.calc) {\n          return this.calc();\n        }\n      }\n    };\n\n    Grid.prototype.transY = function(y) {\n      return this.bottom - (y - this.ymin) * this.dy;\n    };\n\n    Grid.prototype.transX = function(x) {\n      if (this.data.length === 1) {\n        return (this.left + this.right) / 2;\n      } else {\n        return this.left + (x - this.xmin) * this.dx;\n      }\n    };\n\n    Grid.prototype.redraw = function() {\n      this.raphael.clear();\n      this._calc();\n      this.drawGrid();\n      this.drawGoals();\n      this.drawEvents();\n      if (this.draw) {\n        return this.draw();\n      }\n    };\n\n    Grid.prototype.measureText = function(text, angle) {\n      var ret, tt;\n      if (angle == null) {\n        angle = 0;\n      }\n      tt = this.raphael.text(100, 100, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).rotate(angle);\n      ret = tt.getBBox();\n      tt.remove();\n      return ret;\n    };\n\n    Grid.prototype.yAxisFormat = function(label) {\n      return this.yLabelFormat(label);\n    };\n\n    Grid.prototype.yLabelFormat = function(label) {\n      if (typeof this.options.yLabelFormat === 'function') {\n        return this.options.yLabelFormat(label);\n      } else {\n        return \"\" + this.options.preUnits + (Morris.commas(label)) + this.options.postUnits;\n      }\n    };\n\n    Grid.prototype.drawGrid = function() {\n      var lineY, y, _i, _len, _ref, _ref1, _ref2, _results;\n      if (this.options.grid === false && ((_ref = this.options.axes) !== true && _ref !== 'both' && _ref !== 'y')) {\n        return;\n      }\n      _ref1 = this.grid;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        lineY = _ref1[_i];\n        y = this.transY(lineY);\n        if ((_ref2 = this.options.axes) === true || _ref2 === 'both' || _ref2 === 'y') {\n          this.drawYAxisLabel(this.left - this.options.padding / 2, y, this.yAxisFormat(lineY));\n        }\n        if (this.options.grid) {\n          _results.push(this.drawGridLine(\"M\" + this.left + \",\" + y + \"H\" + (this.left + this.width)));\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawGoals = function() {\n      var color, goal, i, _i, _len, _ref, _results;\n      _ref = this.options.goals;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        goal = _ref[i];\n        color = this.options.goalLineColors[i % this.options.goalLineColors.length];\n        _results.push(this.drawGoal(goal, color));\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawEvents = function() {\n      var color, event, i, _i, _len, _ref, _results;\n      _ref = this.events;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        event = _ref[i];\n        color = this.options.eventLineColors[i % this.options.eventLineColors.length];\n        _results.push(this.drawEvent(event, color));\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawGoal = function(goal, color) {\n      return this.raphael.path(\"M\" + this.left + \",\" + (this.transY(goal)) + \"H\" + this.right).attr('stroke', color).attr('stroke-width', this.options.goalStrokeWidth);\n    };\n\n    Grid.prototype.drawEvent = function(event, color) {\n      return this.raphael.path(\"M\" + (this.transX(event)) + \",\" + this.bottom + \"V\" + this.top).attr('stroke', color).attr('stroke-width', this.options.eventStrokeWidth);\n    };\n\n    Grid.prototype.drawYAxisLabel = function(xPos, yPos, text) {\n      return this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor).attr('text-anchor', 'end');\n    };\n\n    Grid.prototype.drawGridLine = function(path) {\n      return this.raphael.path(path).attr('stroke', this.options.gridLineColor).attr('stroke-width', this.options.gridStrokeWidth);\n    };\n\n    Grid.prototype.startRange = function(x) {\n      this.hover.hide();\n      this.selectFrom = x;\n      return this.selectionRect.attr({\n        x: x,\n        width: 0\n      }).show();\n    };\n\n    Grid.prototype.endRange = function(x) {\n      var end, start;\n      if (this.selectFrom) {\n        start = Math.min(this.selectFrom, x);\n        end = Math.max(this.selectFrom, x);\n        this.options.rangeSelect.call(this.el, {\n          start: this.data[this.hitTest(start)].x,\n          end: this.data[this.hitTest(end)].x\n        });\n        return this.selectFrom = null;\n      }\n    };\n\n    Grid.prototype.resizeHandler = function() {\n      this.timeoutId = null;\n      this.raphael.setSize(this.el.width(), this.el.height());\n      return this.redraw();\n    };\n\n    return Grid;\n\n  })(Morris.EventEmitter);\n\n  Morris.parseDate = function(date) {\n    var isecs, m, msecs, n, o, offsetmins, p, q, r, ret, secs;\n    if (typeof date === 'number') {\n      return date;\n    }\n    m = date.match(/^(\\d+) Q(\\d)$/);\n    n = date.match(/^(\\d+)-(\\d+)$/);\n    o = date.match(/^(\\d+)-(\\d+)-(\\d+)$/);\n    p = date.match(/^(\\d+) W(\\d+)$/);\n    q = date.match(/^(\\d+)-(\\d+)-(\\d+)[ T](\\d+):(\\d+)(Z|([+-])(\\d\\d):?(\\d\\d))?$/);\n    r = date.match(/^(\\d+)-(\\d+)-(\\d+)[ T](\\d+):(\\d+):(\\d+(\\.\\d+)?)(Z|([+-])(\\d\\d):?(\\d\\d))?$/);\n    if (m) {\n      return new Date(parseInt(m[1], 10), parseInt(m[2], 10) * 3 - 1, 1).getTime();\n    } else if (n) {\n      return new Date(parseInt(n[1], 10), parseInt(n[2], 10) - 1, 1).getTime();\n    } else if (o) {\n      return new Date(parseInt(o[1], 10), parseInt(o[2], 10) - 1, parseInt(o[3], 10)).getTime();\n    } else if (p) {\n      ret = new Date(parseInt(p[1], 10), 0, 1);\n      if (ret.getDay() !== 4) {\n        ret.setMonth(0, 1 + ((4 - ret.getDay()) + 7) % 7);\n      }\n      return ret.getTime() + parseInt(p[2], 10) * 604800000;\n    } else if (q) {\n      if (!q[6]) {\n        return new Date(parseInt(q[1], 10), parseInt(q[2], 10) - 1, parseInt(q[3], 10), parseInt(q[4], 10), parseInt(q[5], 10)).getTime();\n      } else {\n        offsetmins = 0;\n        if (q[6] !== 'Z') {\n          offsetmins = parseInt(q[8], 10) * 60 + parseInt(q[9], 10);\n          if (q[7] === '+') {\n            offsetmins = 0 - offsetmins;\n          }\n        }\n        return Date.UTC(parseInt(q[1], 10), parseInt(q[2], 10) - 1, parseInt(q[3], 10), parseInt(q[4], 10), parseInt(q[5], 10) + offsetmins);\n      }\n    } else if (r) {\n      secs = parseFloat(r[6]);\n      isecs = Math.floor(secs);\n      msecs = Math.round((secs - isecs) * 1000);\n      if (!r[8]) {\n        return new Date(parseInt(r[1], 10), parseInt(r[2], 10) - 1, parseInt(r[3], 10), parseInt(r[4], 10), parseInt(r[5], 10), isecs, msecs).getTime();\n      } else {\n        offsetmins = 0;\n        if (r[8] !== 'Z') {\n          offsetmins = parseInt(r[10], 10) * 60 + parseInt(r[11], 10);\n          if (r[9] === '+') {\n            offsetmins = 0 - offsetmins;\n          }\n        }\n        return Date.UTC(parseInt(r[1], 10), parseInt(r[2], 10) - 1, parseInt(r[3], 10), parseInt(r[4], 10), parseInt(r[5], 10) + offsetmins, isecs, msecs);\n      }\n    } else {\n      return new Date(parseInt(date, 10), 0, 1).getTime();\n    }\n  };\n\n  Morris.Hover = (function() {\n    Hover.defaults = {\n      \"class\": 'morris-hover morris-default-style'\n    };\n\n    function Hover(options) {\n      if (options == null) {\n        options = {};\n      }\n      this.options = $.extend({}, Morris.Hover.defaults, options);\n      this.el = $(\"<div class='\" + this.options[\"class\"] + \"'></div>\");\n      this.el.hide();\n      this.options.parent.append(this.el);\n    }\n\n    Hover.prototype.update = function(html, x, y) {\n      if (!html) {\n        return this.hide();\n      } else {\n        this.html(html);\n        this.show();\n        return this.moveTo(x, y);\n      }\n    };\n\n    Hover.prototype.html = function(content) {\n      return this.el.html(content);\n    };\n\n    Hover.prototype.moveTo = function(x, y) {\n      var hoverHeight, hoverWidth, left, parentHeight, parentWidth, top;\n      parentWidth = this.options.parent.innerWidth();\n      parentHeight = this.options.parent.innerHeight();\n      hoverWidth = this.el.outerWidth();\n      hoverHeight = this.el.outerHeight();\n      left = Math.min(Math.max(0, x - hoverWidth / 2), parentWidth - hoverWidth);\n      if (y != null) {\n        top = y - hoverHeight - 10;\n        if (top < 0) {\n          top = y + 10;\n          if (top + hoverHeight > parentHeight) {\n            top = parentHeight / 2 - hoverHeight / 2;\n          }\n        }\n      } else {\n        top = parentHeight / 2 - hoverHeight / 2;\n      }\n      return this.el.css({\n        left: left + \"px\",\n        top: parseInt(top) + \"px\"\n      });\n    };\n\n    Hover.prototype.show = function() {\n      return this.el.show();\n    };\n\n    Hover.prototype.hide = function() {\n      return this.el.hide();\n    };\n\n    return Hover;\n\n  })();\n\n  Morris.Line = (function(_super) {\n    __extends(Line, _super);\n\n    function Line(options) {\n      this.hilight = __bind(this.hilight, this);\n      this.onHoverOut = __bind(this.onHoverOut, this);\n      this.onHoverMove = __bind(this.onHoverMove, this);\n      this.onGridClick = __bind(this.onGridClick, this);\n      if (!(this instanceof Morris.Line)) {\n        return new Morris.Line(options);\n      }\n      Line.__super__.constructor.call(this, options);\n    }\n\n    Line.prototype.init = function() {\n      if (this.options.hideHover !== 'always') {\n        this.hover = new Morris.Hover({\n          parent: this.el\n        });\n        this.on('hovermove', this.onHoverMove);\n        this.on('hoverout', this.onHoverOut);\n        return this.on('gridclick', this.onGridClick);\n      }\n    };\n\n    Line.prototype.defaults = {\n      lineWidth: 3,\n      pointSize: 4,\n      lineColors: ['#0b62a4', '#7A92A3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed'],\n      pointStrokeWidths: [1],\n      pointStrokeColors: ['#ffffff'],\n      pointFillColors: [],\n      smooth: true,\n      xLabels: 'auto',\n      xLabelFormat: null,\n      xLabelMargin: 24,\n      hideHover: false\n    };\n\n    Line.prototype.calc = function() {\n      this.calcPoints();\n      return this.generatePaths();\n    };\n\n    Line.prototype.calcPoints = function() {\n      var row, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        row._x = this.transX(row.x);\n        row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(this.transY(y));\n            } else {\n              _results1.push(y);\n            }\n          }\n          return _results1;\n        }).call(this);\n        _results.push(row._ymax = Math.min.apply(Math, [this.bottom].concat((function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row._y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(y);\n            }\n          }\n          return _results1;\n        })())));\n      }\n      return _results;\n    };\n\n    Line.prototype.hitTest = function(x) {\n      var index, r, _i, _len, _ref;\n      if (this.data.length === 0) {\n        return null;\n      }\n      _ref = this.data.slice(1);\n      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {\n        r = _ref[index];\n        if (x < (r._x + this.data[index]._x) / 2) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    Line.prototype.onGridClick = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.fire('click', index, this.data[index].src, x, y);\n    };\n\n    Line.prototype.onHoverMove = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.displayHoverForRow(index);\n    };\n\n    Line.prototype.onHoverOut = function() {\n      if (this.options.hideHover !== false) {\n        return this.displayHoverForRow(null);\n      }\n    };\n\n    Line.prototype.displayHoverForRow = function(index) {\n      var _ref;\n      if (index != null) {\n        (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(index));\n        return this.hilight(index);\n      } else {\n        this.hover.hide();\n        return this.hilight();\n      }\n    };\n\n    Line.prototype.hoverContentForRow = function(index) {\n      var content, j, row, y, _i, _len, _ref;\n      row = this.data[index];\n      content = \"<div class='morris-hover-row-label'>\" + row.label + \"</div>\";\n      _ref = row.y;\n      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {\n        y = _ref[j];\n        content += \"<div class='morris-hover-point' style='color: \" + (this.colorFor(row, j, 'label')) + \"'>\\n  \" + this.options.labels[j] + \":\\n  \" + (this.yLabelFormat(y)) + \"\\n</div>\";\n      }\n      if (typeof this.options.hoverCallback === 'function') {\n        content = this.options.hoverCallback(index, this.options, content, row.src);\n      }\n      return [content, row._x, row._ymax];\n    };\n\n    Line.prototype.generatePaths = function() {\n      var coords, i, r, smooth;\n      return this.paths = (function() {\n        var _i, _ref, _ref1, _results;\n        _results = [];\n        for (i = _i = 0, _ref = this.options.ykeys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n          smooth = typeof this.options.smooth === \"boolean\" ? this.options.smooth : (_ref1 = this.options.ykeys[i], __indexOf.call(this.options.smooth, _ref1) >= 0);\n          coords = (function() {\n            var _j, _len, _ref2, _results1;\n            _ref2 = this.data;\n            _results1 = [];\n            for (_j = 0, _len = _ref2.length; _j < _len; _j++) {\n              r = _ref2[_j];\n              if (r._y[i] !== void 0) {\n                _results1.push({\n                  x: r._x,\n                  y: r._y[i]\n                });\n              }\n            }\n            return _results1;\n          }).call(this);\n          if (coords.length > 1) {\n            _results.push(Morris.Line.createPath(coords, smooth, this.bottom));\n          } else {\n            _results.push(null);\n          }\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Line.prototype.draw = function() {\n      var _ref;\n      if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'x') {\n        this.drawXAxis();\n      }\n      this.drawSeries();\n      if (this.options.hideHover === false) {\n        return this.displayHoverForRow(this.data.length - 1);\n      }\n    };\n\n    Line.prototype.drawXAxis = function() {\n      var drawLabel, l, labels, prevAngleMargin, prevLabelMargin, row, ypos, _i, _len, _results,\n        _this = this;\n      ypos = this.bottom + this.options.padding / 2;\n      prevLabelMargin = null;\n      prevAngleMargin = null;\n      drawLabel = function(labelText, xpos) {\n        var label, labelBox, margin, offset, textBox;\n        label = _this.drawXAxisLabel(_this.transX(xpos), ypos, labelText);\n        textBox = label.getBBox();\n        label.transform(\"r\" + (-_this.options.xLabelAngle));\n        labelBox = label.getBBox();\n        label.transform(\"t0,\" + (labelBox.height / 2) + \"...\");\n        if (_this.options.xLabelAngle !== 0) {\n          offset = -0.5 * textBox.width * Math.cos(_this.options.xLabelAngle * Math.PI / 180.0);\n          label.transform(\"t\" + offset + \",0...\");\n        }\n        labelBox = label.getBBox();\n        if (((prevLabelMargin == null) || prevLabelMargin >= labelBox.x + labelBox.width || (prevAngleMargin != null) && prevAngleMargin >= labelBox.x) && labelBox.x >= 0 && (labelBox.x + labelBox.width) < _this.el.width()) {\n          if (_this.options.xLabelAngle !== 0) {\n            margin = 1.25 * _this.options.gridTextSize / Math.sin(_this.options.xLabelAngle * Math.PI / 180.0);\n            prevAngleMargin = labelBox.x - margin;\n          }\n          return prevLabelMargin = labelBox.x - _this.options.xLabelMargin;\n        } else {\n          return label.remove();\n        }\n      };\n      if (this.options.parseTime) {\n        if (this.data.length === 1 && this.options.xLabels === 'auto') {\n          labels = [[this.data[0].label, this.data[0].x]];\n        } else {\n          labels = Morris.labelSeries(this.xmin, this.xmax, this.width, this.options.xLabels, this.options.xLabelFormat);\n        }\n      } else {\n        labels = (function() {\n          var _i, _len, _ref, _results;\n          _ref = this.data;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            row = _ref[_i];\n            _results.push([row.label, row.x]);\n          }\n          return _results;\n        }).call(this);\n      }\n      labels.reverse();\n      _results = [];\n      for (_i = 0, _len = labels.length; _i < _len; _i++) {\n        l = labels[_i];\n        _results.push(drawLabel(l[0], l[1]));\n      }\n      return _results;\n    };\n\n    Line.prototype.drawSeries = function() {\n      var i, _i, _j, _ref, _ref1, _results;\n      this.seriesPoints = [];\n      for (i = _i = _ref = this.options.ykeys.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {\n        this._drawLineFor(i);\n      }\n      _results = [];\n      for (i = _j = _ref1 = this.options.ykeys.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; i = _ref1 <= 0 ? ++_j : --_j) {\n        _results.push(this._drawPointFor(i));\n      }\n      return _results;\n    };\n\n    Line.prototype._drawPointFor = function(index) {\n      var circle, row, _i, _len, _ref, _results;\n      this.seriesPoints[index] = [];\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        circle = null;\n        if (row._y[index] != null) {\n          circle = this.drawLinePoint(row._x, row._y[index], this.colorFor(row, index, 'point'), index);\n        }\n        _results.push(this.seriesPoints[index].push(circle));\n      }\n      return _results;\n    };\n\n    Line.prototype._drawLineFor = function(index) {\n      var path;\n      path = this.paths[index];\n      if (path !== null) {\n        return this.drawLinePath(path, this.colorFor(null, index, 'line'), index);\n      }\n    };\n\n    Line.createPath = function(coords, smooth, bottom) {\n      var coord, g, grads, i, ix, lg, path, prevCoord, x1, x2, y1, y2, _i, _len;\n      path = \"\";\n      if (smooth) {\n        grads = Morris.Line.gradients(coords);\n      }\n      prevCoord = {\n        y: null\n      };\n      for (i = _i = 0, _len = coords.length; _i < _len; i = ++_i) {\n        coord = coords[i];\n        if (coord.y != null) {\n          if (prevCoord.y != null) {\n            if (smooth) {\n              g = grads[i];\n              lg = grads[i - 1];\n              ix = (coord.x - prevCoord.x) / 4;\n              x1 = prevCoord.x + ix;\n              y1 = Math.min(bottom, prevCoord.y + ix * lg);\n              x2 = coord.x - ix;\n              y2 = Math.min(bottom, coord.y - ix * g);\n              path += \"C\" + x1 + \",\" + y1 + \",\" + x2 + \",\" + y2 + \",\" + coord.x + \",\" + coord.y;\n            } else {\n              path += \"L\" + coord.x + \",\" + coord.y;\n            }\n          } else {\n            if (!smooth || (grads[i] != null)) {\n              path += \"M\" + coord.x + \",\" + coord.y;\n            }\n          }\n        }\n        prevCoord = coord;\n      }\n      return path;\n    };\n\n    Line.gradients = function(coords) {\n      var coord, grad, i, nextCoord, prevCoord, _i, _len, _results;\n      grad = function(a, b) {\n        return (a.y - b.y) / (a.x - b.x);\n      };\n      _results = [];\n      for (i = _i = 0, _len = coords.length; _i < _len; i = ++_i) {\n        coord = coords[i];\n        if (coord.y != null) {\n          nextCoord = coords[i + 1] || {\n            y: null\n          };\n          prevCoord = coords[i - 1] || {\n            y: null\n          };\n          if ((prevCoord.y != null) && (nextCoord.y != null)) {\n            _results.push(grad(prevCoord, nextCoord));\n          } else if (prevCoord.y != null) {\n            _results.push(grad(prevCoord, coord));\n          } else if (nextCoord.y != null) {\n            _results.push(grad(coord, nextCoord));\n          } else {\n            _results.push(null);\n          }\n        } else {\n          _results.push(null);\n        }\n      }\n      return _results;\n    };\n\n    Line.prototype.hilight = function(index) {\n      var i, _i, _j, _ref, _ref1;\n      if (this.prevHilight !== null && this.prevHilight !== index) {\n        for (i = _i = 0, _ref = this.seriesPoints.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\n          if (this.seriesPoints[i][this.prevHilight]) {\n            this.seriesPoints[i][this.prevHilight].animate(this.pointShrinkSeries(i));\n          }\n        }\n      }\n      if (index !== null && this.prevHilight !== index) {\n        for (i = _j = 0, _ref1 = this.seriesPoints.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n          if (this.seriesPoints[i][index]) {\n            this.seriesPoints[i][index].animate(this.pointGrowSeries(i));\n          }\n        }\n      }\n      return this.prevHilight = index;\n    };\n\n    Line.prototype.colorFor = function(row, sidx, type) {\n      if (typeof this.options.lineColors === 'function') {\n        return this.options.lineColors.call(this, row, sidx, type);\n      } else if (type === 'point') {\n        return this.options.pointFillColors[sidx % this.options.pointFillColors.length] || this.options.lineColors[sidx % this.options.lineColors.length];\n      } else {\n        return this.options.lineColors[sidx % this.options.lineColors.length];\n      }\n    };\n\n    Line.prototype.drawXAxisLabel = function(xPos, yPos, text) {\n      return this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor);\n    };\n\n    Line.prototype.drawLinePath = function(path, lineColor, lineIndex) {\n      return this.raphael.path(path).attr('stroke', lineColor).attr('stroke-width', this.lineWidthForSeries(lineIndex));\n    };\n\n    Line.prototype.drawLinePoint = function(xPos, yPos, pointColor, lineIndex) {\n      return this.raphael.circle(xPos, yPos, this.pointSizeForSeries(lineIndex)).attr('fill', pointColor).attr('stroke-width', this.pointStrokeWidthForSeries(lineIndex)).attr('stroke', this.pointStrokeColorForSeries(lineIndex));\n    };\n\n    Line.prototype.pointStrokeWidthForSeries = function(index) {\n      return this.options.pointStrokeWidths[index % this.options.pointStrokeWidths.length];\n    };\n\n    Line.prototype.pointStrokeColorForSeries = function(index) {\n      return this.options.pointStrokeColors[index % this.options.pointStrokeColors.length];\n    };\n\n    Line.prototype.lineWidthForSeries = function(index) {\n      if (this.options.lineWidth instanceof Array) {\n        return this.options.lineWidth[index % this.options.lineWidth.length];\n      } else {\n        return this.options.lineWidth;\n      }\n    };\n\n    Line.prototype.pointSizeForSeries = function(index) {\n      if (this.options.pointSize instanceof Array) {\n        return this.options.pointSize[index % this.options.pointSize.length];\n      } else {\n        return this.options.pointSize;\n      }\n    };\n\n    Line.prototype.pointGrowSeries = function(index) {\n      return Raphael.animation({\n        r: this.pointSizeForSeries(index) + 3\n      }, 25, 'linear');\n    };\n\n    Line.prototype.pointShrinkSeries = function(index) {\n      return Raphael.animation({\n        r: this.pointSizeForSeries(index)\n      }, 25, 'linear');\n    };\n\n    return Line;\n\n  })(Morris.Grid);\n\n  Morris.labelSeries = function(dmin, dmax, pxwidth, specName, xLabelFormat) {\n    var d, d0, ddensity, name, ret, s, spec, t, _i, _len, _ref;\n    ddensity = 200 * (dmax - dmin) / pxwidth;\n    d0 = new Date(dmin);\n    spec = Morris.LABEL_SPECS[specName];\n    if (spec === void 0) {\n      _ref = Morris.AUTO_LABEL_ORDER;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        name = _ref[_i];\n        s = Morris.LABEL_SPECS[name];\n        if (ddensity >= s.span) {\n          spec = s;\n          break;\n        }\n      }\n    }\n    if (spec === void 0) {\n      spec = Morris.LABEL_SPECS[\"second\"];\n    }\n    if (xLabelFormat) {\n      spec = $.extend({}, spec, {\n        fmt: xLabelFormat\n      });\n    }\n    d = spec.start(d0);\n    ret = [];\n    while ((t = d.getTime()) <= dmax) {\n      if (t >= dmin) {\n        ret.push([spec.fmt(d), t]);\n      }\n      spec.incr(d);\n    }\n    return ret;\n  };\n\n  minutesSpecHelper = function(interval) {\n    return {\n      span: interval * 60 * 1000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours());\n      },\n      fmt: function(d) {\n        return \"\" + (Morris.pad2(d.getHours())) + \":\" + (Morris.pad2(d.getMinutes()));\n      },\n      incr: function(d) {\n        return d.setUTCMinutes(d.getUTCMinutes() + interval);\n      }\n    };\n  };\n\n  secondsSpecHelper = function(interval) {\n    return {\n      span: interval * 1000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes());\n      },\n      fmt: function(d) {\n        return \"\" + (Morris.pad2(d.getHours())) + \":\" + (Morris.pad2(d.getMinutes())) + \":\" + (Morris.pad2(d.getSeconds()));\n      },\n      incr: function(d) {\n        return d.setUTCSeconds(d.getUTCSeconds() + interval);\n      }\n    };\n  };\n\n  Morris.LABEL_SPECS = {\n    \"decade\": {\n      span: 172800000000,\n      start: function(d) {\n        return new Date(d.getFullYear() - d.getFullYear() % 10, 0, 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear());\n      },\n      incr: function(d) {\n        return d.setFullYear(d.getFullYear() + 10);\n      }\n    },\n    \"year\": {\n      span: 17280000000,\n      start: function(d) {\n        return new Date(d.getFullYear(), 0, 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear());\n      },\n      incr: function(d) {\n        return d.setFullYear(d.getFullYear() + 1);\n      }\n    },\n    \"month\": {\n      span: 2419200000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1));\n      },\n      incr: function(d) {\n        return d.setMonth(d.getMonth() + 1);\n      }\n    },\n    \"week\": {\n      span: 604800000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1)) + \"-\" + (Morris.pad2(d.getDate()));\n      },\n      incr: function(d) {\n        return d.setDate(d.getDate() + 7);\n      }\n    },\n    \"day\": {\n      span: 86400000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1)) + \"-\" + (Morris.pad2(d.getDate()));\n      },\n      incr: function(d) {\n        return d.setDate(d.getDate() + 1);\n      }\n    },\n    \"hour\": minutesSpecHelper(60),\n    \"30min\": minutesSpecHelper(30),\n    \"15min\": minutesSpecHelper(15),\n    \"10min\": minutesSpecHelper(10),\n    \"5min\": minutesSpecHelper(5),\n    \"minute\": minutesSpecHelper(1),\n    \"30sec\": secondsSpecHelper(30),\n    \"15sec\": secondsSpecHelper(15),\n    \"10sec\": secondsSpecHelper(10),\n    \"5sec\": secondsSpecHelper(5),\n    \"second\": secondsSpecHelper(1)\n  };\n\n  Morris.AUTO_LABEL_ORDER = [\"decade\", \"year\", \"month\", \"week\", \"day\", \"hour\", \"30min\", \"15min\", \"10min\", \"5min\", \"minute\", \"30sec\", \"15sec\", \"10sec\", \"5sec\", \"second\"];\n\n  Morris.Area = (function(_super) {\n    var areaDefaults;\n\n    __extends(Area, _super);\n\n    areaDefaults = {\n      fillOpacity: 'auto',\n      behaveLikeLine: false\n    };\n\n    function Area(options) {\n      var areaOptions;\n      if (!(this instanceof Morris.Area)) {\n        return new Morris.Area(options);\n      }\n      areaOptions = $.extend({}, areaDefaults, options);\n      this.cumulative = !areaOptions.behaveLikeLine;\n      if (areaOptions.fillOpacity === 'auto') {\n        areaOptions.fillOpacity = areaOptions.behaveLikeLine ? .8 : 1;\n      }\n      Area.__super__.constructor.call(this, areaOptions);\n    }\n\n    Area.prototype.calcPoints = function() {\n      var row, total, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        row._x = this.transX(row.x);\n        total = 0;\n        row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (this.options.behaveLikeLine) {\n              _results1.push(this.transY(y));\n            } else {\n              total += y || 0;\n              _results1.push(this.transY(total));\n            }\n          }\n          return _results1;\n        }).call(this);\n        _results.push(row._ymax = Math.max.apply(Math, row._y));\n      }\n      return _results;\n    };\n\n    Area.prototype.drawSeries = function() {\n      var i, range, _i, _j, _k, _len, _ref, _ref1, _results, _results1, _results2;\n      this.seriesPoints = [];\n      if (this.options.behaveLikeLine) {\n        range = (function() {\n          _results = [];\n          for (var _i = 0, _ref = this.options.ykeys.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }\n          return _results;\n        }).apply(this);\n      } else {\n        range = (function() {\n          _results1 = [];\n          for (var _j = _ref1 = this.options.ykeys.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; _ref1 <= 0 ? _j++ : _j--){ _results1.push(_j); }\n          return _results1;\n        }).apply(this);\n      }\n      _results2 = [];\n      for (_k = 0, _len = range.length; _k < _len; _k++) {\n        i = range[_k];\n        this._drawFillFor(i);\n        this._drawLineFor(i);\n        _results2.push(this._drawPointFor(i));\n      }\n      return _results2;\n    };\n\n    Area.prototype._drawFillFor = function(index) {\n      var path;\n      path = this.paths[index];\n      if (path !== null) {\n        path = path + (\"L\" + (this.transX(this.xmax)) + \",\" + this.bottom + \"L\" + (this.transX(this.xmin)) + \",\" + this.bottom + \"Z\");\n        return this.drawFilledPath(path, this.fillForSeries(index));\n      }\n    };\n\n    Area.prototype.fillForSeries = function(i) {\n      var color;\n      color = Raphael.rgb2hsl(this.colorFor(this.data[i], i, 'line'));\n      return Raphael.hsl(color.h, this.options.behaveLikeLine ? color.s * 0.9 : color.s * 0.75, Math.min(0.98, this.options.behaveLikeLine ? color.l * 1.2 : color.l * 1.25));\n    };\n\n    Area.prototype.drawFilledPath = function(path, fill) {\n      return this.raphael.path(path).attr('fill', fill).attr('fill-opacity', this.options.fillOpacity).attr('stroke', 'none');\n    };\n\n    return Area;\n\n  })(Morris.Line);\n\n  Morris.Bar = (function(_super) {\n    __extends(Bar, _super);\n\n    function Bar(options) {\n      this.onHoverOut = __bind(this.onHoverOut, this);\n      this.onHoverMove = __bind(this.onHoverMove, this);\n      this.onGridClick = __bind(this.onGridClick, this);\n      if (!(this instanceof Morris.Bar)) {\n        return new Morris.Bar(options);\n      }\n      Bar.__super__.constructor.call(this, $.extend({}, options, {\n        parseTime: false\n      }));\n    }\n\n    Bar.prototype.init = function() {\n      this.cumulative = this.options.stacked;\n      if (this.options.hideHover !== 'always') {\n        this.hover = new Morris.Hover({\n          parent: this.el\n        });\n        this.on('hovermove', this.onHoverMove);\n        this.on('hoverout', this.onHoverOut);\n        return this.on('gridclick', this.onGridClick);\n      }\n    };\n\n    Bar.prototype.defaults = {\n      barSizeRatio: 0.75,\n      barGap: 3,\n      barColors: ['#0b62a4', '#7a92a3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed'],\n      barOpacity: 1.0,\n      barRadius: [0, 0, 0, 0],\n      xLabelMargin: 50\n    };\n\n    Bar.prototype.calc = function() {\n      var _ref;\n      this.calcBars();\n      if (this.options.hideHover === false) {\n        return (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(this.data.length - 1));\n      }\n    };\n\n    Bar.prototype.calcBars = function() {\n      var idx, row, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {\n        row = _ref[idx];\n        row._x = this.left + this.width * (idx + 0.5) / this.data.length;\n        _results.push(row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(this.transY(y));\n            } else {\n              _results1.push(null);\n            }\n          }\n          return _results1;\n        }).call(this));\n      }\n      return _results;\n    };\n\n    Bar.prototype.draw = function() {\n      var _ref;\n      if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'x') {\n        this.drawXAxis();\n      }\n      return this.drawSeries();\n    };\n\n    Bar.prototype.drawXAxis = function() {\n      var i, label, labelBox, margin, offset, prevAngleMargin, prevLabelMargin, row, textBox, ypos, _i, _ref, _results;\n      ypos = this.bottom + (this.options.xAxisLabelTopPadding || this.options.padding / 2);\n      prevLabelMargin = null;\n      prevAngleMargin = null;\n      _results = [];\n      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n        row = this.data[this.data.length - 1 - i];\n        label = this.drawXAxisLabel(row._x, ypos, row.label);\n        textBox = label.getBBox();\n        label.transform(\"r\" + (-this.options.xLabelAngle));\n        labelBox = label.getBBox();\n        label.transform(\"t0,\" + (labelBox.height / 2) + \"...\");\n        if (this.options.xLabelAngle !== 0) {\n          offset = -0.5 * textBox.width * Math.cos(this.options.xLabelAngle * Math.PI / 180.0);\n          label.transform(\"t\" + offset + \",0...\");\n        }\n        if (((prevLabelMargin == null) || prevLabelMargin >= labelBox.x + labelBox.width || (prevAngleMargin != null) && prevAngleMargin >= labelBox.x) && labelBox.x >= 0 && (labelBox.x + labelBox.width) < this.el.width()) {\n          if (this.options.xLabelAngle !== 0) {\n            margin = 1.25 * this.options.gridTextSize / Math.sin(this.options.xLabelAngle * Math.PI / 180.0);\n            prevAngleMargin = labelBox.x - margin;\n          }\n          _results.push(prevLabelMargin = labelBox.x - this.options.xLabelMargin);\n        } else {\n          _results.push(label.remove());\n        }\n      }\n      return _results;\n    };\n\n    Bar.prototype.drawSeries = function() {\n      var barWidth, bottom, groupWidth, idx, lastTop, left, leftPadding, numBars, row, sidx, size, spaceLeft, top, ypos, zeroPos;\n      groupWidth = this.width / this.options.data.length;\n      numBars = this.options.stacked ? 1 : this.options.ykeys.length;\n      barWidth = (groupWidth * this.options.barSizeRatio - this.options.barGap * (numBars - 1)) / numBars;\n      if (this.options.barSize) {\n        barWidth = Math.min(barWidth, this.options.barSize);\n      }\n      spaceLeft = groupWidth - barWidth * numBars - this.options.barGap * (numBars - 1);\n      leftPadding = spaceLeft / 2;\n      zeroPos = this.ymin <= 0 && this.ymax >= 0 ? this.transY(0) : null;\n      return this.bars = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.data;\n        _results = [];\n        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {\n          row = _ref[idx];\n          lastTop = 0;\n          _results.push((function() {\n            var _j, _len1, _ref1, _results1;\n            _ref1 = row._y;\n            _results1 = [];\n            for (sidx = _j = 0, _len1 = _ref1.length; _j < _len1; sidx = ++_j) {\n              ypos = _ref1[sidx];\n              if (ypos !== null) {\n                if (zeroPos) {\n                  top = Math.min(ypos, zeroPos);\n                  bottom = Math.max(ypos, zeroPos);\n                } else {\n                  top = ypos;\n                  bottom = this.bottom;\n                }\n                left = this.left + idx * groupWidth + leftPadding;\n                if (!this.options.stacked) {\n                  left += sidx * (barWidth + this.options.barGap);\n                }\n                size = bottom - top;\n                if (this.options.verticalGridCondition && this.options.verticalGridCondition(row.x)) {\n                  this.drawBar(this.left + idx * groupWidth, this.top, groupWidth, Math.abs(this.top - this.bottom), this.options.verticalGridColor, this.options.verticalGridOpacity, this.options.barRadius);\n                }\n                if (this.options.stacked) {\n                  top -= lastTop;\n                }\n                this.drawBar(left, top, barWidth, size, this.colorFor(row, sidx, 'bar'), this.options.barOpacity, this.options.barRadius);\n                _results1.push(lastTop += size);\n              } else {\n                _results1.push(null);\n              }\n            }\n            return _results1;\n          }).call(this));\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Bar.prototype.colorFor = function(row, sidx, type) {\n      var r, s;\n      if (typeof this.options.barColors === 'function') {\n        r = {\n          x: row.x,\n          y: row.y[sidx],\n          label: row.label\n        };\n        s = {\n          index: sidx,\n          key: this.options.ykeys[sidx],\n          label: this.options.labels[sidx]\n        };\n        return this.options.barColors.call(this, r, s, type);\n      } else {\n        return this.options.barColors[sidx % this.options.barColors.length];\n      }\n    };\n\n    Bar.prototype.hitTest = function(x) {\n      if (this.data.length === 0) {\n        return null;\n      }\n      x = Math.max(Math.min(x, this.right), this.left);\n      return Math.min(this.data.length - 1, Math.floor((x - this.left) / (this.width / this.data.length)));\n    };\n\n    Bar.prototype.onGridClick = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.fire('click', index, this.data[index].src, x, y);\n    };\n\n    Bar.prototype.onHoverMove = function(x, y) {\n      var index, _ref;\n      index = this.hitTest(x);\n      return (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(index));\n    };\n\n    Bar.prototype.onHoverOut = function() {\n      if (this.options.hideHover !== false) {\n        return this.hover.hide();\n      }\n    };\n\n    Bar.prototype.hoverContentForRow = function(index) {\n      var content, j, row, x, y, _i, _len, _ref;\n      row = this.data[index];\n      content = \"<div class='morris-hover-row-label'>\" + row.label + \"</div>\";\n      _ref = row.y;\n      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {\n        y = _ref[j];\n        content += \"<div class='morris-hover-point' style='color: \" + (this.colorFor(row, j, 'label')) + \"'>\\n  \" + this.options.labels[j] + \":\\n  \" + (this.yLabelFormat(y)) + \"\\n</div>\";\n      }\n      if (typeof this.options.hoverCallback === 'function') {\n        content = this.options.hoverCallback(index, this.options, content, row.src);\n      }\n      x = this.left + (index + 0.5) * this.width / this.data.length;\n      return [content, x];\n    };\n\n    Bar.prototype.drawXAxisLabel = function(xPos, yPos, text) {\n      var label;\n      return label = this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor);\n    };\n\n    Bar.prototype.drawBar = function(xPos, yPos, width, height, barColor, opacity, radiusArray) {\n      var maxRadius, path;\n      maxRadius = Math.max.apply(Math, radiusArray);\n      if (maxRadius === 0 || maxRadius > height) {\n        path = this.raphael.rect(xPos, yPos, width, height);\n      } else {\n        path = this.raphael.path(this.roundedRect(xPos, yPos, width, height, radiusArray));\n      }\n      return path.attr('fill', barColor).attr('fill-opacity', opacity).attr('stroke', 'none');\n    };\n\n    Bar.prototype.roundedRect = function(x, y, w, h, r) {\n      if (r == null) {\n        r = [0, 0, 0, 0];\n      }\n      return [\"M\", x, r[0] + y, \"Q\", x, y, x + r[0], y, \"L\", x + w - r[1], y, \"Q\", x + w, y, x + w, y + r[1], \"L\", x + w, y + h - r[2], \"Q\", x + w, y + h, x + w - r[2], y + h, \"L\", x + r[3], y + h, \"Q\", x, y + h, x, y + h - r[3], \"Z\"];\n    };\n\n    return Bar;\n\n  })(Morris.Grid);\n\n  Morris.Donut = (function(_super) {\n    __extends(Donut, _super);\n\n    Donut.prototype.defaults = {\n      colors: ['#0B62A4', '#3980B5', '#679DC6', '#95BBD7', '#B0CCE1', '#095791', '#095085', '#083E67', '#052C48', '#042135'],\n      backgroundColor: '#FFFFFF',\n      labelColor: '#000000',\n      formatter: Morris.commas,\n      resize: false\n    };\n\n    function Donut(options) {\n      this.resizeHandler = __bind(this.resizeHandler, this);\n      this.select = __bind(this.select, this);\n      this.click = __bind(this.click, this);\n      var _this = this;\n      if (!(this instanceof Morris.Donut)) {\n        return new Morris.Donut(options);\n      }\n      this.options = $.extend({}, this.defaults, options);\n      if (typeof options.element === 'string') {\n        this.el = $(document.getElementById(options.element));\n      } else {\n        this.el = $(options.element);\n      }\n      if (this.el === null || this.el.length === 0) {\n        throw new Error(\"Graph placeholder not found.\");\n      }\n      if (options.data === void 0 || options.data.length === 0) {\n        return;\n      }\n      this.raphael = new Raphael(this.el[0]);\n      if (this.options.resize) {\n        $(window).bind('resize', function(evt) {\n          if (_this.timeoutId != null) {\n            window.clearTimeout(_this.timeoutId);\n          }\n          return _this.timeoutId = window.setTimeout(_this.resizeHandler, 100);\n        });\n      }\n      this.setData(options.data);\n    }\n\n    Donut.prototype.redraw = function() {\n      var C, cx, cy, i, idx, last, max_value, min, next, seg, total, value, w, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\n      this.raphael.clear();\n      cx = this.el.width() / 2;\n      cy = this.el.height() / 2;\n      w = (Math.min(cx, cy) - 10) / 3;\n      total = 0;\n      _ref = this.values;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        value = _ref[_i];\n        total += value;\n      }\n      min = 5 / (2 * w);\n      C = 1.9999 * Math.PI - min * this.data.length;\n      last = 0;\n      idx = 0;\n      this.segments = [];\n      _ref1 = this.values;\n      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {\n        value = _ref1[i];\n        next = last + min + C * (value / total);\n        seg = new Morris.DonutSegment(cx, cy, w * 2, w, last, next, this.data[i].color || this.options.colors[idx % this.options.colors.length], this.options.backgroundColor, idx, this.raphael);\n        seg.render();\n        this.segments.push(seg);\n        seg.on('hover', this.select);\n        seg.on('click', this.click);\n        last = next;\n        idx += 1;\n      }\n      this.text1 = this.drawEmptyDonutLabel(cx, cy - 10, this.options.labelColor, 15, 800);\n      this.text2 = this.drawEmptyDonutLabel(cx, cy + 10, this.options.labelColor, 14);\n      max_value = Math.max.apply(Math, this.values);\n      idx = 0;\n      _ref2 = this.values;\n      _results = [];\n      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n        value = _ref2[_k];\n        if (value === max_value) {\n          this.select(idx);\n          break;\n        }\n        _results.push(idx += 1);\n      }\n      return _results;\n    };\n\n    Donut.prototype.setData = function(data) {\n      var row;\n      this.data = data;\n      this.values = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.data;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          row = _ref[_i];\n          _results.push(parseFloat(row.value));\n        }\n        return _results;\n      }).call(this);\n      return this.redraw();\n    };\n\n    Donut.prototype.click = function(idx) {\n      return this.fire('click', idx, this.data[idx]);\n    };\n\n    Donut.prototype.select = function(idx) {\n      var row, s, segment, _i, _len, _ref;\n      _ref = this.segments;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        s = _ref[_i];\n        s.deselect();\n      }\n      segment = this.segments[idx];\n      segment.select();\n      row = this.data[idx];\n      return this.setLabels(row.label, this.options.formatter(row.value, row));\n    };\n\n    Donut.prototype.setLabels = function(label1, label2) {\n      var inner, maxHeightBottom, maxHeightTop, maxWidth, text1bbox, text1scale, text2bbox, text2scale;\n      inner = (Math.min(this.el.width() / 2, this.el.height() / 2) - 10) * 2 / 3;\n      maxWidth = 1.8 * inner;\n      maxHeightTop = inner / 2;\n      maxHeightBottom = inner / 3;\n      this.text1.attr({\n        text: label1,\n        transform: ''\n      });\n      text1bbox = this.text1.getBBox();\n      text1scale = Math.min(maxWidth / text1bbox.width, maxHeightTop / text1bbox.height);\n      this.text1.attr({\n        transform: \"S\" + text1scale + \",\" + text1scale + \",\" + (text1bbox.x + text1bbox.width / 2) + \",\" + (text1bbox.y + text1bbox.height)\n      });\n      this.text2.attr({\n        text: label2,\n        transform: ''\n      });\n      text2bbox = this.text2.getBBox();\n      text2scale = Math.min(maxWidth / text2bbox.width, maxHeightBottom / text2bbox.height);\n      return this.text2.attr({\n        transform: \"S\" + text2scale + \",\" + text2scale + \",\" + (text2bbox.x + text2bbox.width / 2) + \",\" + text2bbox.y\n      });\n    };\n\n    Donut.prototype.drawEmptyDonutLabel = function(xPos, yPos, color, fontSize, fontWeight) {\n      var text;\n      text = this.raphael.text(xPos, yPos, '').attr('font-size', fontSize).attr('fill', color);\n      if (fontWeight != null) {\n        text.attr('font-weight', fontWeight);\n      }\n      return text;\n    };\n\n    Donut.prototype.resizeHandler = function() {\n      this.timeoutId = null;\n      this.raphael.setSize(this.el.width(), this.el.height());\n      return this.redraw();\n    };\n\n    return Donut;\n\n  })(Morris.EventEmitter);\n\n  Morris.DonutSegment = (function(_super) {\n    __extends(DonutSegment, _super);\n\n    function DonutSegment(cx, cy, inner, outer, p0, p1, color, backgroundColor, index, raphael) {\n      this.cx = cx;\n      this.cy = cy;\n      this.inner = inner;\n      this.outer = outer;\n      this.color = color;\n      this.backgroundColor = backgroundColor;\n      this.index = index;\n      this.raphael = raphael;\n      this.deselect = __bind(this.deselect, this);\n      this.select = __bind(this.select, this);\n      this.sin_p0 = Math.sin(p0);\n      this.cos_p0 = Math.cos(p0);\n      this.sin_p1 = Math.sin(p1);\n      this.cos_p1 = Math.cos(p1);\n      this.is_long = (p1 - p0) > Math.PI ? 1 : 0;\n      this.path = this.calcSegment(this.inner + 3, this.inner + this.outer - 5);\n      this.selectedPath = this.calcSegment(this.inner + 3, this.inner + this.outer);\n      this.hilight = this.calcArc(this.inner);\n    }\n\n    DonutSegment.prototype.calcArcPoints = function(r) {\n      return [this.cx + r * this.sin_p0, this.cy + r * this.cos_p0, this.cx + r * this.sin_p1, this.cy + r * this.cos_p1];\n    };\n\n    DonutSegment.prototype.calcSegment = function(r1, r2) {\n      var ix0, ix1, iy0, iy1, ox0, ox1, oy0, oy1, _ref, _ref1;\n      _ref = this.calcArcPoints(r1), ix0 = _ref[0], iy0 = _ref[1], ix1 = _ref[2], iy1 = _ref[3];\n      _ref1 = this.calcArcPoints(r2), ox0 = _ref1[0], oy0 = _ref1[1], ox1 = _ref1[2], oy1 = _ref1[3];\n      return (\"M\" + ix0 + \",\" + iy0) + (\"A\" + r1 + \",\" + r1 + \",0,\" + this.is_long + \",0,\" + ix1 + \",\" + iy1) + (\"L\" + ox1 + \",\" + oy1) + (\"A\" + r2 + \",\" + r2 + \",0,\" + this.is_long + \",1,\" + ox0 + \",\" + oy0) + \"Z\";\n    };\n\n    DonutSegment.prototype.calcArc = function(r) {\n      var ix0, ix1, iy0, iy1, _ref;\n      _ref = this.calcArcPoints(r), ix0 = _ref[0], iy0 = _ref[1], ix1 = _ref[2], iy1 = _ref[3];\n      return (\"M\" + ix0 + \",\" + iy0) + (\"A\" + r + \",\" + r + \",0,\" + this.is_long + \",0,\" + ix1 + \",\" + iy1);\n    };\n\n    DonutSegment.prototype.render = function() {\n      var _this = this;\n      this.arc = this.drawDonutArc(this.hilight, this.color);\n      return this.seg = this.drawDonutSegment(this.path, this.color, this.backgroundColor, function() {\n        return _this.fire('hover', _this.index);\n      }, function() {\n        return _this.fire('click', _this.index);\n      });\n    };\n\n    DonutSegment.prototype.drawDonutArc = function(path, color) {\n      return this.raphael.path(path).attr({\n        stroke: color,\n        'stroke-width': 2,\n        opacity: 0\n      });\n    };\n\n    DonutSegment.prototype.drawDonutSegment = function(path, fillColor, strokeColor, hoverFunction, clickFunction) {\n      return this.raphael.path(path).attr({\n        fill: fillColor,\n        stroke: strokeColor,\n        'stroke-width': 3\n      }).hover(hoverFunction).click(clickFunction);\n    };\n\n    DonutSegment.prototype.select = function() {\n      if (!this.selected) {\n        this.seg.animate({\n          path: this.selectedPath\n        }, 150, '<>');\n        this.arc.animate({\n          opacity: 1\n        }, 150, '<>');\n        return this.selected = true;\n      }\n    };\n\n    DonutSegment.prototype.deselect = function() {\n      if (this.selected) {\n        this.seg.animate({\n          path: this.path\n        }, 150, '<>');\n        this.arc.animate({\n          opacity: 0\n        }, 150, '<>');\n        return this.selected = false;\n      }\n    };\n\n    return DonutSegment;\n\n  })(Morris.EventEmitter);\n\n}).call(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/morris.js/morris.js\n// module id = 2\n// module chunks = 0","// ┌───────────────────────────────────────────────────────────────────────────────────────────────────────┐ \\\\\n// │ Raphaël 2.2.0 - JavaScript Vector Library                                                             │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Copyright © 2008-2016 Dmitry Baranovskiy (http://raphaeljs.com)                                       │ \\\\\n// │ Copyright © 2008-2016 Sencha Labs (http://sencha.com)                                                 │ \\\\\n// ├───────────────────────────────────────────────────────────────────────────────────────────────────────┤ \\\\\n// │ Licensed under the MIT (https://github.com/DmitryBaranovskiy/raphael/blob/master/license.txt) license.│ \\\\\n// └───────────────────────────────────────────────────────────────────────────────────────────────────────┘ \\\\\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Raphael\"] = factory();\n\telse\n\t\troot[\"Raphael\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(3), __webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\n\t    return R;\n\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(eve) {\n\n\t    /*\\\n\t     * Raphael\n\t     [ method ]\n\t     **\n\t     * Creates a canvas object on which to draw.\n\t     * You must do this first, as all future calls to drawing methods\n\t     * from this instance will be bound to this canvas.\n\t     > Parameters\n\t     **\n\t     - container (HTMLElement|string) DOM element or its ID which is going to be a parent for drawing surface\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - all (array) (first 3 or 4 elements in the array are equal to [containerID, width, height] or [x, y, width, height]. The rest are element descriptions in format {type: type, <attributes>}). See @Paper.add.\n\t     - callback (function) #optional callback function which is going to be executed in the context of newly created paper\n\t     * or\n\t     - onReadyCallback (function) function that is going to be called on DOM ready event. You can also subscribe to this event via Eve’s “DOMLoad” event. In this case method returns `undefined`.\n\t     = (object) @Paper\n\t     > Usage\n\t     | // Each of the following examples create a canvas\n\t     | // that is 320px wide by 200px high.\n\t     | // Canvas is created at the viewport’s 10,50 coordinate.\n\t     | var paper = Raphael(10, 50, 320, 200);\n\t     | // Canvas is created at the top left corner of the #notepad element\n\t     | // (or its top right corner in dir=\"rtl\" elements)\n\t     | var paper = Raphael(document.getElementById(\"notepad\"), 320, 200);\n\t     | // Same as above\n\t     | var paper = Raphael(\"notepad\", 320, 200);\n\t     | // Image dump\n\t     | var set = Raphael([\"notepad\", 320, 200, {\n\t     |     type: \"rect\",\n\t     |     x: 10,\n\t     |     y: 10,\n\t     |     width: 25,\n\t     |     height: 25,\n\t     |     stroke: \"#f00\"\n\t     | }, {\n\t     |     type: \"text\",\n\t     |     x: 30,\n\t     |     y: 40,\n\t     |     text: \"Dump\"\n\t     | }]);\n\t    \\*/\n\t    function R(first) {\n\t        if (R.is(first, \"function\")) {\n\t            return loaded ? first() : eve.on(\"raphael.DOMload\", first);\n\t        } else if (R.is(first, array)) {\n\t            return R._engine.create[apply](R, first.splice(0, 3 + R.is(first[0], nu))).add(first);\n\t        } else {\n\t            var args = Array.prototype.slice.call(arguments, 0);\n\t            if (R.is(args[args.length - 1], \"function\")) {\n\t                var f = args.pop();\n\t                return loaded ? f.call(R._engine.create[apply](R, args)) : eve.on(\"raphael.DOMload\", function () {\n\t                    f.call(R._engine.create[apply](R, args));\n\t                });\n\t            } else {\n\t                return R._engine.create[apply](R, arguments);\n\t            }\n\t        }\n\t    }\n\t    R.version = \"2.2.0\";\n\t    R.eve = eve;\n\t    var loaded,\n\t        separator = /[, ]+/,\n\t        elements = {circle: 1, rect: 1, path: 1, ellipse: 1, text: 1, image: 1},\n\t        formatrg = /\\{(\\d+)\\}/g,\n\t        proto = \"prototype\",\n\t        has = \"hasOwnProperty\",\n\t        g = {\n\t            doc: document,\n\t            win: window\n\t        },\n\t        oldRaphael = {\n\t            was: Object.prototype[has].call(g.win, \"Raphael\"),\n\t            is: g.win.Raphael\n\t        },\n\t        Paper = function () {\n\t            /*\\\n\t             * Paper.ca\n\t             [ property (object) ]\n\t             **\n\t             * Shortcut for @Paper.customAttributes\n\t            \\*/\n\t            /*\\\n\t             * Paper.customAttributes\n\t             [ property (object) ]\n\t             **\n\t             * If you have a set of attributes that you would like to represent\n\t             * as a function of some number you can do it easily with custom attributes:\n\t             > Usage\n\t             | paper.customAttributes.hue = function (num) {\n\t             |     num = num % 1;\n\t             |     return {fill: \"hsb(\" + num + \", 0.75, 1)\"};\n\t             | };\n\t             | // Custom attribute “hue” will change fill\n\t             | // to be given hue with fixed saturation and brightness.\n\t             | // Now you can use it like this:\n\t             | var c = paper.circle(10, 10, 10).attr({hue: .45});\n\t             | // or even like this:\n\t             | c.animate({hue: 1}, 1e3);\n\t             |\n\t             | // You could also create custom attribute\n\t             | // with multiple parameters:\n\t             | paper.customAttributes.hsb = function (h, s, b) {\n\t             |     return {fill: \"hsb(\" + [h, s, b].join(\",\") + \")\"};\n\t             | };\n\t             | c.attr({hsb: \"0.5 .8 1\"});\n\t             | c.animate({hsb: [1, 0, 0.5]}, 1e3);\n\t            \\*/\n\t            this.ca = this.customAttributes = {};\n\t        },\n\t        paperproto,\n\t        appendChild = \"appendChild\",\n\t        apply = \"apply\",\n\t        concat = \"concat\",\n\t        supportsTouch = ('ontouchstart' in g.win) || g.win.DocumentTouch && g.doc instanceof DocumentTouch, //taken from Modernizr touch test\n\t        E = \"\",\n\t        S = \" \",\n\t        Str = String,\n\t        split = \"split\",\n\t        events = \"click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel\"[split](S),\n\t        touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t        lowerCase = Str.prototype.toLowerCase,\n\t        math = Math,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        PI = math.PI,\n\t        nu = \"number\",\n\t        string = \"string\",\n\t        array = \"array\",\n\t        toString = \"toString\",\n\t        fillString = \"fill\",\n\t        objectToString = Object.prototype.toString,\n\t        paper = {},\n\t        push = \"push\",\n\t        ISURL = R._ISURL = /^url\\(['\"]?(.+?)['\"]?\\)$/i,\n\t        colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?)%?\\s*\\))\\s*$/i,\n\t        isnan = {\"NaN\": 1, \"Infinity\": 1, \"-Infinity\": 1},\n\t        bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t        round = math.round,\n\t        setAttribute = \"setAttribute\",\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        upperCase = Str.prototype.toUpperCase,\n\t        availableAttrs = R._availableAttrs = {\n\t            \"arrow-end\": \"none\",\n\t            \"arrow-start\": \"none\",\n\t            blur: 0,\n\t            \"clip-rect\": \"0 0 1e9 1e9\",\n\t            cursor: \"default\",\n\t            cx: 0,\n\t            cy: 0,\n\t            fill: \"#fff\",\n\t            \"fill-opacity\": 1,\n\t            font: '10px \"Arial\"',\n\t            \"font-family\": '\"Arial\"',\n\t            \"font-size\": \"10\",\n\t            \"font-style\": \"normal\",\n\t            \"font-weight\": 400,\n\t            gradient: 0,\n\t            height: 0,\n\t            href: \"http://raphaeljs.com/\",\n\t            \"letter-spacing\": 0,\n\t            opacity: 1,\n\t            path: \"M0,0\",\n\t            r: 0,\n\t            rx: 0,\n\t            ry: 0,\n\t            src: \"\",\n\t            stroke: \"#000\",\n\t            \"stroke-dasharray\": \"\",\n\t            \"stroke-linecap\": \"butt\",\n\t            \"stroke-linejoin\": \"butt\",\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 1,\n\t            \"stroke-width\": 1,\n\t            target: \"_blank\",\n\t            \"text-anchor\": \"middle\",\n\t            title: \"Raphael\",\n\t            transform: \"\",\n\t            width: 0,\n\t            x: 0,\n\t            y: 0,\n\t            \"class\": \"\"\n\t        },\n\t        availableAnimAttrs = R._availableAnimAttrs = {\n\t            blur: nu,\n\t            \"clip-rect\": \"csv\",\n\t            cx: nu,\n\t            cy: nu,\n\t            fill: \"colour\",\n\t            \"fill-opacity\": nu,\n\t            \"font-size\": nu,\n\t            height: nu,\n\t            opacity: nu,\n\t            path: \"path\",\n\t            r: nu,\n\t            rx: nu,\n\t            ry: nu,\n\t            stroke: \"colour\",\n\t            \"stroke-opacity\": nu,\n\t            \"stroke-width\": nu,\n\t            transform: \"transform\",\n\t            width: nu,\n\t            x: nu,\n\t            y: nu\n\t        },\n\t        whitespace = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]/g,\n\t        commaSpaces = /[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/,\n\t        hsrg = {hs: 1, rg: 1},\n\t        p2s = /,?([achlmqrstvxz]),?/gi,\n\t        pathCommand = /([achlmrqstvz])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        tCommand = /([rstm])[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*)+)/ig,\n\t        pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,?[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*/ig,\n\t        radial_gradient = R._radial_gradient = /^r(?:\\(([^,]+?)[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*,[\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029]*([^\\)]+?)\\))?/,\n\t        eldata = {},\n\t        sortByKey = function (a, b) {\n\t            return a.key - b.key;\n\t        },\n\t        sortByNumber = function (a, b) {\n\t            return toFloat(a) - toFloat(b);\n\t        },\n\t        fun = function () {},\n\t        pipe = function (x) {\n\t            return x;\n\t        },\n\t        rectPath = R._rectPath = function (x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", x + r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            return [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        },\n\t        ellipsePath = function (x, y, rx, ry) {\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            return [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t        },\n\t        getPath = R._getPath = {\n\t            path: function (el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.r);\n\t            },\n\t            ellipse: function (el) {\n\t                var a = el.attrs;\n\t                return ellipsePath(a.cx, a.cy, a.rx, a.ry);\n\t            },\n\t            rect: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height, a.r);\n\t            },\n\t            image: function (el) {\n\t                var a = el.attrs;\n\t                return rectPath(a.x, a.y, a.width, a.height);\n\t            },\n\t            text: function (el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            },\n\t            set : function(el) {\n\t                var bbox = el._getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        },\n\t        /*\\\n\t         * Raphael.mapPath\n\t         [ method ]\n\t         **\n\t         * Transform the path string with given matrix.\n\t         > Parameters\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        mapPath = R.mapPath = function (path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        };\n\n\t    R._g = g;\n\t    /*\\\n\t     * Raphael.type\n\t     [ property (string) ]\n\t     **\n\t     * Can be “SVG”, “VML” or empty, depending on browser support.\n\t    \\*/\n\t    R.type = (g.win.SVGAngle || g.doc.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\") ? \"SVG\" : \"VML\");\n\t    if (R.type == \"VML\") {\n\t        var d = g.doc.createElement(\"div\"),\n\t            b;\n\t        d.innerHTML = '<v:shape adj=\"1\"/>';\n\t        b = d.firstChild;\n\t        b.style.behavior = \"url(#default#VML)\";\n\t        if (!(b && typeof b.adj == \"object\")) {\n\t            return (R.type = E);\n\t        }\n\t        d = null;\n\t    }\n\t    /*\\\n\t     * Raphael.svg\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports SVG.\n\t    \\*/\n\t    /*\\\n\t     * Raphael.vml\n\t     [ property (boolean) ]\n\t     **\n\t     * `true` if browser supports VML.\n\t    \\*/\n\t    R.svg = !(R.vml = R.type == \"VML\");\n\t    R._Paper = Paper;\n\t    /*\\\n\t     * Raphael.fn\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to the canvas. For example if you want to draw a pie chart,\n\t     * you can create your own pie chart function and ship it as a Raphaël plugin. To do this\n\t     * you need to extend the `Raphael.fn` object. You should modify the `fn` object before a\n\t     * Raphaël instance is created, otherwise it will take no effect. Please note that the\n\t     * ability for namespaced plugins was removed in Raphael 2.0. It is up to the plugin to\n\t     * ensure any namespacing ensures proper context.\n\t     > Usage\n\t     | Raphael.fn.arrow = function (x1, y1, x2, y2, size) {\n\t     |     return this.path( ... );\n\t     | };\n\t     | // or create namespace\n\t     | Raphael.fn.mystuff = {\n\t     |     arrow: function () {…},\n\t     |     star: function () {…},\n\t     |     // etc…\n\t     | };\n\t     | var paper = Raphael(10, 10, 630, 480);\n\t     | // then use it\n\t     | paper.arrow(10, 10, 30, 30, 5).attr({fill: \"#f00\"});\n\t     | paper.mystuff.arrow();\n\t     | paper.mystuff.star();\n\t    \\*/\n\t    R.fn = paperproto = Paper.prototype = R.prototype;\n\t    R._id = 0;\n\t    /*\\\n\t     * Raphael.is\n\t     [ method ]\n\t     **\n\t     * Handful of replacements for `typeof` operator.\n\t     > Parameters\n\t     - o (…) any object or primitive\n\t     - type (string) name of the type, i.e. “string”, “function”, “number”, etc.\n\t     = (boolean) is given value is of given type\n\t    \\*/\n\t    R.is = function (o, type) {\n\t        type = lowerCase.call(type);\n\t        if (type == \"finite\") {\n\t            return !isnan[has](+o);\n\t        }\n\t        if (type == \"array\") {\n\t            return o instanceof Array;\n\t        }\n\t        return  (type == \"null\" && o === null) ||\n\t                (type == typeof o && o !== null) ||\n\t                (type == \"object\" && o === Object(o)) ||\n\t                (type == \"array\" && Array.isArray && Array.isArray(o)) ||\n\t                objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t    };\n\n\t    function clone(obj) {\n\t        if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t            return obj;\n\t        }\n\t        var res = new obj.constructor;\n\t        for (var key in obj) if (obj[has](key)) {\n\t            res[key] = clone(obj[key]);\n\t        }\n\t        return res;\n\t    }\n\n\t    /*\\\n\t     * Raphael.angle\n\t     [ method ]\n\t     **\n\t     * Returns angle between two or three points\n\t     > Parameters\n\t     - x1 (number) x coord of first point\n\t     - y1 (number) y coord of first point\n\t     - x2 (number) x coord of second point\n\t     - y2 (number) y coord of second point\n\t     - x3 (number) #optional x coord of third point\n\t     - y3 (number) #optional y coord of third point\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.angle = function (x1, y1, x2, y2, x3, y3) {\n\t        if (x3 == null) {\n\t            var x = x1 - x2,\n\t                y = y1 - y2;\n\t            if (!x && !y) {\n\t                return 0;\n\t            }\n\t            return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t        } else {\n\t            return R.angle(x1, y1, x3, y3) - R.angle(x2, y2, x3, y3);\n\t        }\n\t    };\n\t    /*\\\n\t     * Raphael.rad\n\t     [ method ]\n\t     **\n\t     * Transform angle to radians\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     = (number) angle in radians.\n\t    \\*/\n\t    R.rad = function (deg) {\n\t        return deg % 360 * PI / 180;\n\t    };\n\t    /*\\\n\t     * Raphael.deg\n\t     [ method ]\n\t     **\n\t     * Transform angle to degrees\n\t     > Parameters\n\t     - rad (number) angle in radians\n\t     = (number) angle in degrees.\n\t    \\*/\n\t    R.deg = function (rad) {\n\t        return Math.round ((rad * 180 / PI% 360)* 1000) / 1000;\n\t    };\n\t    /*\\\n\t     * Raphael.snapTo\n\t     [ method ]\n\t     **\n\t     * Snaps given value to given grid.\n\t     > Parameters\n\t     - values (array|number) given array of values or step of the grid\n\t     - value (number) value to adjust\n\t     - tolerance (number) #optional tolerance for snapping. Default is `10`.\n\t     = (number) adjusted value.\n\t    \\*/\n\t    R.snapTo = function (values, value, tolerance) {\n\t        tolerance = R.is(tolerance, \"finite\") ? tolerance : 10;\n\t        if (R.is(values, array)) {\n\t            var i = values.length;\n\t            while (i--) if (abs(values[i] - value) <= tolerance) {\n\t                return values[i];\n\t            }\n\t        } else {\n\t            values = +values;\n\t            var rem = value % values;\n\t            if (rem < tolerance) {\n\t                return value - rem;\n\t            }\n\t            if (rem > values - tolerance) {\n\t                return value - rem + values;\n\t            }\n\t        }\n\t        return value;\n\t    };\n\n\t    /*\\\n\t     * Raphael.createUUID\n\t     [ method ]\n\t     **\n\t     * Returns RFC4122, version 4 ID\n\t    \\*/\n\t    var createUUID = R.createUUID = (function (uuidRegEx, uuidReplacer) {\n\t        return function () {\n\t            return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(uuidRegEx, uuidReplacer).toUpperCase();\n\t        };\n\t    })(/[xy]/g, function (c) {\n\t        var r = math.random() * 16 | 0,\n\t            v = c == \"x\" ? r : (r & 3 | 8);\n\t        return v.toString(16);\n\t    });\n\n\t    /*\\\n\t     * Raphael.setWindow\n\t     [ method ]\n\t     **\n\t     * Used when you need to draw in `&lt;iframe>`. Switched window to the iframe one.\n\t     > Parameters\n\t     - newwin (window) new window object\n\t    \\*/\n\t    R.setWindow = function (newwin) {\n\t        eve(\"raphael.setWindow\", R, g.win, newwin);\n\t        g.win = newwin;\n\t        g.doc = g.win.document;\n\t        if (R._engine.initWin) {\n\t            R._engine.initWin(g.win);\n\t        }\n\t    };\n\t    var toHex = function (color) {\n\t        if (R.vml) {\n\t            // http://dean.edwards.name/weblog/2009/10/convert-any-colour-value-to-hex-in-msie/\n\t            var trim = /^\\s+|\\s+$/g;\n\t            var bod;\n\t            try {\n\t                var docum = new ActiveXObject(\"htmlfile\");\n\t                docum.write(\"<body>\");\n\t                docum.close();\n\t                bod = docum.body;\n\t            } catch(e) {\n\t                bod = createPopup().document.body;\n\t            }\n\t            var range = bod.createTextRange();\n\t            toHex = cacher(function (color) {\n\t                try {\n\t                    bod.style.color = Str(color).replace(trim, E);\n\t                    var value = range.queryCommandValue(\"ForeColor\");\n\t                    value = ((value & 255) << 16) | (value & 65280) | ((value & 16711680) >>> 16);\n\t                    return \"#\" + (\"000000\" + value.toString(16)).slice(-6);\n\t                } catch(e) {\n\t                    return \"none\";\n\t                }\n\t            });\n\t        } else {\n\t            var i = g.doc.createElement(\"i\");\n\t            i.title = \"Rapha\\xebl Colour Picker\";\n\t            i.style.display = \"none\";\n\t            g.doc.body.appendChild(i);\n\t            toHex = cacher(function (color) {\n\t                i.style.color = color;\n\t                return g.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t            });\n\t        }\n\t        return toHex(color);\n\t    },\n\t    hsbtoString = function () {\n\t        return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t    },\n\t    hsltoString = function () {\n\t        return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t    },\n\t    rgbtoString = function () {\n\t        return this.hex;\n\t    },\n\t    prepareRGB = function (r, g, b) {\n\t        if (g == null && R.is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t            b = r.b;\n\t            g = r.g;\n\t            r = r.r;\n\t        }\n\t        if (g == null && R.is(r, string)) {\n\t            var clr = R.getRGB(r);\n\t            r = clr.r;\n\t            g = clr.g;\n\t            b = clr.b;\n\t        }\n\t        if (r > 1 || g > 1 || b > 1) {\n\t            r /= 255;\n\t            g /= 255;\n\t            b /= 255;\n\t        }\n\n\t        return [r, g, b];\n\t    },\n\t    packageRGB = function (r, g, b, o) {\n\t        r *= 255;\n\t        g *= 255;\n\t        b *= 255;\n\t        var rgb = {\n\t            r: r,\n\t            g: g,\n\t            b: b,\n\t            hex: R.rgb(r, g, b),\n\t            toString: rgbtoString\n\t        };\n\t        R.is(o, \"finite\") && (rgb.opacity = o);\n\t        return rgb;\n\t    };\n\n\t    /*\\\n\t     * Raphael.color\n\t     [ method ]\n\t     **\n\t     * Parses the color string and returns object with all values for the given color.\n\t     > Parameters\n\t     - clr (string) color string in one of the supported formats (see @Raphael.getRGB)\n\t     = (object) Combined RGB & HSB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) `true` if string can’t be parsed,\n\t     o     h (number) hue,\n\t     o     s (number) saturation,\n\t     o     v (number) value (brightness),\n\t     o     l (number) lightness\n\t     o }\n\t    \\*/\n\t    R.color = function (clr) {\n\t        var rgb;\n\t        if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t            rgb = R.hsb2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else if (R.is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t            rgb = R.hsl2rgb(clr);\n\t            clr.r = rgb.r;\n\t            clr.g = rgb.g;\n\t            clr.b = rgb.b;\n\t            clr.hex = rgb.hex;\n\t        } else {\n\t            if (R.is(clr, \"string\")) {\n\t                clr = R.getRGB(clr);\n\t            }\n\t            if (R.is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr) {\n\t                rgb = R.rgb2hsl(clr);\n\t                clr.h = rgb.h;\n\t                clr.s = rgb.s;\n\t                clr.l = rgb.l;\n\t                rgb = R.rgb2hsb(clr);\n\t                clr.v = rgb.b;\n\t            } else {\n\t                clr = {hex: \"none\"};\n\t                clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            }\n\t        }\n\t        clr.toString = rgbtoString;\n\t        return clr;\n\t    };\n\t    /*\\\n\t     * Raphael.hsb2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - v (number) value or brightness\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsb2rgb = function (h, s, v, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t            v = h.b;\n\t            s = h.s;\n\t            o = h.o;\n\t            h = h.h;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = v * s;\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = v - C;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.hsl2rgb\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to RGB object.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue,\n\t     o     hex (string) color in HTML/CSS format: #••••••\n\t     o }\n\t    \\*/\n\t    R.hsl2rgb = function (h, s, l, o) {\n\t        if (this.is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t            l = h.l;\n\t            s = h.s;\n\t            h = h.h;\n\t        }\n\t        if (h > 1 || s > 1 || l > 1) {\n\t            h /= 360;\n\t            s /= 100;\n\t            l /= 100;\n\t        }\n\t        h *= 360;\n\t        var R, G, B, X, C;\n\t        h = (h % 360) / 60;\n\t        C = 2 * s * (l < .5 ? l : 1 - l);\n\t        X = C * (1 - abs(h % 2 - 1));\n\t        R = G = B = l - C / 2;\n\n\t        h = ~~h;\n\t        R += [C, X, 0, 0, X, C][h];\n\t        G += [X, C, C, X, 0, 0][h];\n\t        B += [0, 0, X, C, C, X][h];\n\t        return packageRGB(R, G, B, o);\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSB object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSB object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     b (number) brightness\n\t     o }\n\t    \\*/\n\t    R.rgb2hsb = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, V, C;\n\t        V = mmax(r, g, b);\n\t        C = V - mmin(r, g, b);\n\t        H = (C == 0 ? null :\n\t             V == r ? (g - b) / C :\n\t             V == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4\n\t            );\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        S = C == 0 ? 0 : C / V;\n\t        return {h: H, s: S, b: V, toString: hsbtoString};\n\t    };\n\t    /*\\\n\t     * Raphael.rgb2hsl\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to HSL object.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (object) HSL object in format:\n\t     o {\n\t     o     h (number) hue\n\t     o     s (number) saturation\n\t     o     l (number) luminosity\n\t     o }\n\t    \\*/\n\t    R.rgb2hsl = function (r, g, b) {\n\t        b = prepareRGB(r, g, b);\n\t        r = b[0];\n\t        g = b[1];\n\t        b = b[2];\n\n\t        var H, S, L, M, m, C;\n\t        M = mmax(r, g, b);\n\t        m = mmin(r, g, b);\n\t        C = M - m;\n\t        H = (C == 0 ? null :\n\t             M == r ? (g - b) / C :\n\t             M == g ? (b - r) / C + 2 :\n\t                      (r - g) / C + 4);\n\t        H = ((H + 360) % 6) * 60 / 360;\n\t        L = (M + m) / 2;\n\t        S = (C == 0 ? 0 :\n\t             L < .5 ? C / (2 * L) :\n\t                      C / (2 - 2 * L));\n\t        return {h: H, s: S, l: L, toString: hsltoString};\n\t    };\n\t    R._path2string = function () {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    };\n\t    function repush(array, item) {\n\t        for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t            return array.push(array.splice(i, 1)[0]);\n\t        }\n\t    }\n\t    function cacher(f, scope, postprocessor) {\n\t        function newf() {\n\t            var arg = Array.prototype.slice.call(arguments, 0),\n\t                args = arg.join(\"\\u2400\"),\n\t                cache = newf.cache = newf.cache || {},\n\t                count = newf.count = newf.count || [];\n\t            if (cache[has](args)) {\n\t                repush(count, args);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            count.length >= 1e3 && delete cache[count.shift()];\n\t            count.push(args);\n\t            cache[args] = f[apply](scope, arg);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        return newf;\n\t    }\n\n\t    var preload = R._preload = function (src, f) {\n\t        var img = g.doc.createElement(\"img\");\n\t        img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t        img.onload = function () {\n\t            f.call(this);\n\t            this.onload = null;\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        img.onerror = function () {\n\t            g.doc.body.removeChild(this);\n\t        };\n\t        g.doc.body.appendChild(img);\n\t        img.src = src;\n\t    };\n\n\t    function clrToString() {\n\t        return this.hex;\n\t    }\n\n\t    /*\\\n\t     * Raphael.getRGB\n\t     [ method ]\n\t     **\n\t     * Parses colour string as RGB object\n\t     > Parameters\n\t     - colour (string) colour string in one of formats:\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsl(•••, •••, •••) — same as hsb</li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as hsb</li>\n\t     # </ul>\n\t     = (object) RGB object in format:\n\t     o {\n\t     o     r (number) red,\n\t     o     g (number) green,\n\t     o     b (number) blue\n\t     o     hex (string) color in HTML/CSS format: #••••••,\n\t     o     error (boolean) true if string can’t be parsed\n\t     o }\n\t    \\*/\n\t    R.getRGB = cacher(function (colour) {\n\t        if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t        }\n\t        if (colour == \"none\") {\n\t            return {r: -1, g: -1, b: -1, hex: \"none\", toString: clrToString};\n\t        }\n\t        !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t        var res,\n\t            red,\n\t            green,\n\t            blue,\n\t            opacity,\n\t            t,\n\t            values,\n\t            rgb = colour.match(colourRegExp);\n\t        if (rgb) {\n\t            if (rgb[2]) {\n\t                blue = toInt(rgb[2].substring(5), 16);\n\t                green = toInt(rgb[2].substring(3, 5), 16);\n\t                red = toInt(rgb[2].substring(1, 3), 16);\n\t            }\n\t            if (rgb[3]) {\n\t                blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t            }\n\t            if (rgb[4]) {\n\t                values = rgb[4][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            }\n\t            if (rgb[5]) {\n\t                values = rgb[5][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsb2rgb(red, green, blue, opacity);\n\t            }\n\t            if (rgb[6]) {\n\t                values = rgb[6][split](commaSpaces);\n\t                red = toFloat(values[0]);\n\t                values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                green = toFloat(values[1]);\n\t                values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                blue = toFloat(values[2]);\n\t                values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                return R.hsl2rgb(red, green, blue, opacity);\n\t            }\n\t            rgb = {r: red, g: green, b: blue, toString: clrToString};\n\t            rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t            R.is(opacity, \"finite\") && (rgb.opacity = opacity);\n\t            return rgb;\n\t        }\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: clrToString};\n\t    }, R);\n\t    /*\\\n\t     * Raphael.hsb\n\t     [ method ]\n\t     **\n\t     * Converts HSB values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - b (number) value or brightness\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsb = cacher(function (h, s, b) {\n\t        return R.hsb2rgb(h, s, b).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.hsl\n\t     [ method ]\n\t     **\n\t     * Converts HSL values to hex representation of the colour.\n\t     > Parameters\n\t     - h (number) hue\n\t     - s (number) saturation\n\t     - l (number) luminosity\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.hsl = cacher(function (h, s, l) {\n\t        return R.hsl2rgb(h, s, l).hex;\n\t    });\n\t    /*\\\n\t     * Raphael.rgb\n\t     [ method ]\n\t     **\n\t     * Converts RGB values to hex representation of the colour.\n\t     > Parameters\n\t     - r (number) red\n\t     - g (number) green\n\t     - b (number) blue\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.rgb = cacher(function (r, g, b) {\n\t        function round(x) { return (x + 0.5) | 0; }\n\t        return \"#\" + (16777216 | round(b) | (round(g) << 8) | (round(r) << 16)).toString(16).slice(1);\n\t    });\n\t    /*\\\n\t     * Raphael.getColor\n\t     [ method ]\n\t     **\n\t     * On each call returns next colour in the spectrum. To reset it back to red call @Raphael.getColor.reset\n\t     > Parameters\n\t     - value (number) #optional brightness, default is `0.75`\n\t     = (string) hex representation of the colour.\n\t    \\*/\n\t    R.getColor = function (value) {\n\t        var start = this.getColor.start = this.getColor.start || {h: 0, s: 1, b: value || .75},\n\t            rgb = this.hsb2rgb(start.h, start.s, start.b);\n\t        start.h += .075;\n\t        if (start.h > 1) {\n\t            start.h = 0;\n\t            start.s -= .2;\n\t            start.s <= 0 && (this.getColor.start = {h: 0, s: 1, b: start.b});\n\t        }\n\t        return rgb.hex;\n\t    };\n\t    /*\\\n\t     * Raphael.getColor.reset\n\t     [ method ]\n\t     **\n\t     * Resets spectrum position for @Raphael.getColor back to red.\n\t    \\*/\n\t    R.getColor.reset = function () {\n\t        delete this.start;\n\t    };\n\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\n\t        return d;\n\t    }\n\t    /*\\\n\t     * Raphael.parsePathString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of arrays of path segments.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments (in the last case it will be returned straight away)\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.parsePathString = function (pathString) {\n\t        if (!pathString) {\n\t            return null;\n\t        }\n\t        var pth = paths(pathString);\n\t        if (pth.arr) {\n\t            return pathClone(pth.arr);\n\t        }\n\n\t        var paramCounts = {a: 7, c: 6, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, z: 0},\n\t            data = [];\n\t        if (R.is(pathString, array) && R.is(pathString[0], array)) { // rough assumption\n\t            data = pathClone(pathString);\n\t        }\n\t        if (!data.length) {\n\t            Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = b.toLowerCase();\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                if (name == \"m\" && params.length > 2) {\n\t                    data.push([b][concat](params.splice(0, 2)));\n\t                    name = \"l\";\n\t                    b = b == \"m\" ? \"l\" : \"L\";\n\t                }\n\t                if (name == \"r\") {\n\t                    data.push([b][concat](params));\n\t                } else while (params.length >= paramCounts[name]) {\n\t                    data.push([b][concat](params.splice(0, paramCounts[name])));\n\t                    if (!paramCounts[name]) {\n\t                        break;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        pth.arr = pathClone(data);\n\t        return data;\n\t    };\n\t    /*\\\n\t     * Raphael.parseTransformString\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Parses given path string into an array of transformations.\n\t     > Parameters\n\t     - TString (string|array) transform string or array of transformations (in the last case it will be returned straight away)\n\t     = (array) array of transformations.\n\t    \\*/\n\t    R.parseTransformString = cacher(function (TString) {\n\t        if (!TString) {\n\t            return null;\n\t        }\n\t        var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t            data = [];\n\t        if (R.is(TString, array) && R.is(TString[0], array)) { // rough assumption\n\t            data = pathClone(TString);\n\t        }\n\t        if (!data.length) {\n\t            Str(TString).replace(tCommand, function (a, b, c) {\n\t                var params = [],\n\t                    name = lowerCase.call(b);\n\t                c.replace(pathValues, function (a, b) {\n\t                    b && params.push(+b);\n\t                });\n\t                data.push([b][concat](params));\n\t            });\n\t        }\n\t        data.toString = R._path2string;\n\t        return data;\n\t    });\n\t    // PATHS\n\t    var paths = function (ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    };\n\t    /*\\\n\t     * Raphael.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Find dot coordinates on the given cubic bezier curve at the given t.\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point\n\t     o     y: (number) y coordinate of the point\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     }\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     }\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     }\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     }\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    R.findDotsAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given cubic bezier curve\n\t     > Parameters\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for bezier curve\n\t     = (object) point information in format:\n\t     o {\n\t     o     min: {\n\t     o         x: (number) x coordinate of the left point\n\t     o         y: (number) y coordinate of the top point\n\t     o     }\n\t     o     max: {\n\t     o         x: (number) x coordinate of the right point\n\t     o         y: (number) y coordinate of the bottom point\n\t     o     }\n\t     o }\n\t    \\*/\n\t    R.bezierBBox = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!R.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return {\n\t            x: bbox.min.x,\n\t            y: bbox.min.y,\n\t            x2: bbox.max.x,\n\t            y2: bbox.max.y,\n\t            width: bbox.max.x - bbox.min.x,\n\t            height: bbox.max.y - bbox.min.y\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding boxes.\n\t     > Parameters\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point inside\n\t    \\*/\n\t    R.isPointInsideBBox = function (bbox, x, y) {\n\t        return x >= bbox.x && x <= bbox.x2 && y >= bbox.y && y <= bbox.y2;\n\t    };\n\t    /*\\\n\t     * Raphael.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     > Parameters\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if they intersect\n\t    \\*/\n\t    R.isBBoxIntersect = function (bbox1, bbox2) {\n\t        var i = R.isPointInsideBBox;\n\t        return i(bbox2, bbox1.x, bbox1.y)\n\t            || i(bbox2, bbox1.x2, bbox1.y)\n\t            || i(bbox2, bbox1.x, bbox1.y2)\n\t            || i(bbox2, bbox1.x2, bbox1.y2)\n\t            || i(bbox1, bbox2.x, bbox2.y)\n\t            || i(bbox1, bbox2.x2, bbox2.y)\n\t            || i(bbox1, bbox2.x, bbox2.y2)\n\t            || i(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    };\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTatLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = R.bezierBBox(bez1),\n\t            bbox2 = R.bezierBBox(bez2);\n\t        if (!R.isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = mmax(~~(l1 / 5), 1),\n\t            n2 = mmax(~~(l2 / 5), 1),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = R.findDotsAtSegment.apply(R, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = R.findDotsAtSegment.apply(R, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1.001 && t2 >= 0 && t2 <= 1.001) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: mmin(t1, 1),\n\t                                t2: mmin(t2, 1)\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.pathIntersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     > Parameters\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point\n\t     o         y: (number) y coordinate of the point\n\t     o         t1: (number) t value for segment of path1\n\t     o         t2: (number) t value for segment of path2\n\t     o         segment1: (number) order number for segment of path1\n\t     o         segment2: (number) order number for segment of path2\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    R.pathIntersection = function (path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    };\n\t    R.pathIntersectionNumber = function (path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    };\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = R._path2curve(path1);\n\t        path2 = R._path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    /*\\\n\t     * Raphael.isPointInsidePath\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     > Parameters\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) true, if point is inside the path\n\t    \\*/\n\t    R.isPointInsidePath = function (path, x, y) {\n\t        var bbox = R.pathBBox(path);\n\t        return R.isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    };\n\t    R._removedFactory = function (methodname) {\n\t        return function () {\n\t            eve(\"raphael.log\", null, \"Rapha\\xebl: you are calling to method \\u201c\" + methodname + \"\\u201d of removed object\", methodname);\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Return bounding box of a given path\n\t     > Parameters\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box\n\t     o     y: (number) y coordinate of the left top point of the box\n\t     o     x2: (number) x coordinate of the right bottom point of the box\n\t     o     y2: (number) y coordinate of the right bottom point of the box\n\t     o     width: (number) width of the box\n\t     o     height: (number) height of the box\n\t     o     cx: (number) x coordinate of the center of the box\n\t     o     cy: (number) y coordinate of the center of the box\n\t     o }\n\t    \\*/\n\t    var pathDimensions = R.pathBBox = function (path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return {x: 0, y: 0, width: 0, height: 0, x2: 0, y2: 0};\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X[concat](dim.min.x, dim.max.x);\n\t                Y = Y[concat](dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin[apply](0, X),\n\t            ymin = mmin[apply](0, Y),\n\t            xmax = mmax[apply](0, X),\n\t            ymax = mmax[apply](0, Y),\n\t            width = xmax - xmin,\n\t            height = ymax - ymin,\n\t                bb = {\n\t                x: xmin,\n\t                y: ymin,\n\t                x2: xmax,\n\t                y2: ymax,\n\t                width: width,\n\t                height: height,\n\t                cx: xmin + width / 2,\n\t                cy: ymin + height / 2\n\t            };\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    },\n\t        pathClone = function (pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = R._path2string;\n\t            return res;\n\t        },\n\t        pathToRelative = R._pathToRelative = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        },\n\t        pathToAbsolute = R._pathToAbsolute = function (pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!R.is(pathArray, array) || !R.is(pathArray && pathArray[0], array)) { // rough assumption\n\t                pathArray = R.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                if (pa[0] != upperCase.call(pa[0])) {\n\t                    r[0] = upperCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] + x);\n\t                            r[7] = +(pa[7] + y);\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y][concat](pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res[concat](catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa[0] == \"R\") {\n\t                    dots = [x, y][concat](pa.slice(1));\n\t                    res.pop();\n\t                    res = res[concat](catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"][concat](pa.slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t            res.toString = R._path2string;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        },\n\t        l2c = function (x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        },\n\t        q2c = function (x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [\n\t                    _13 * x1 + _23 * ax,\n\t                    _13 * y1 + _23 * ay,\n\t                    _13 * x2 + _23 * ax,\n\t                    _13 * y2 + _23 * ay,\n\t                    x2,\n\t                    y2\n\t                ];\n\t        },\n\t        a2c = function (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = cacher(function (x, y, rad) {\n\t                    var X = x * math.cos(rad) - y * math.sin(rad),\n\t                        Y = x * math.sin(rad) + y * math.cos(rad);\n\t                    return {x: X, y: Y};\n\t                });\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                        math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4][concat](res);\n\t            } else {\n\t                res = [m2, m3, m4][concat](res).join()[split](\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        },\n\t        findDotAtSegment = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        },\n\t        curveDim = cacher(function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            var a = (c2x - 2 * c1x + p1x) - (p2x - 2 * c2x + c1x),\n\t                b = 2 * (c1x - p1x) - 2 * (c2x - c1x),\n\t                c = p1x - c1x,\n\t                t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a,\n\t                y = [p1y, p2y],\n\t                x = [p1x, p2x],\n\t                dot;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            a = (c2y - 2 * c1y + p1y) - (p2y - 2 * c2y + c1y);\n\t            b = 2 * (c1y - p1y) - 2 * (c2y - c1y);\n\t            c = p1y - c1y;\n\t            t1 = (-b + math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            t2 = (-b - math.sqrt(b * b - 4 * a * c)) / 2 / a;\n\t            abs(t1) > \"1e12\" && (t1 = .5);\n\t            abs(t2) > \"1e12\" && (t2 = .5);\n\t            if (t1 > 0 && t1 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t1);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            if (t2 > 0 && t2 < 1) {\n\t                dot = findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t2);\n\t                x.push(dot.x);\n\t                y.push(dot.y);\n\t            }\n\t            return {\n\t                min: {x: mmin[apply](0, x), y: mmin[apply](0, y)},\n\t                max: {x: mmax[apply](0, x), y: mmax[apply](0, y)}\n\t            };\n\t        }),\n\t        path2curve = R._path2curve = cacher(function (path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t                processPath = function (path, d, pcom) {\n\t                    var nx, ny, tq = {T:1, Q:1};\n\t                    if (!path) {\n\t                        return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                    }\n\t                    !(path[0] in tq) && (d.qx = d.qy = null);\n\t                    switch (path[0]) {\n\t                        case \"M\":\n\t                            d.X = path[1];\n\t                            d.Y = path[2];\n\t                            break;\n\t                        case \"A\":\n\t                            path = [\"C\"][concat](a2c[apply](0, [d.x, d.y][concat](path.slice(1))));\n\t                            break;\n\t                        case \"S\":\n\t                            if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                                nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                                ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                            }\n\t                            else {                            // or some else or nothing\n\t                                nx = d.x;\n\t                                ny = d.y;\n\t                            }\n\t                            path = [\"C\", nx, ny][concat](path.slice(1));\n\t                            break;\n\t                        case \"T\":\n\t                            if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                                d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                                d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                            }\n\t                            else {                            // or something else or nothing\n\t                                d.qx = d.x;\n\t                                d.qy = d.y;\n\t                            }\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                            break;\n\t                        case \"Q\":\n\t                            d.qx = path[1];\n\t                            d.qy = path[2];\n\t                            path = [\"C\"][concat](q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                            break;\n\t                        case \"L\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], path[2]));\n\t                            break;\n\t                        case \"H\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, path[1], d.y));\n\t                            break;\n\t                        case \"V\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.x, path[1]));\n\t                            break;\n\t                        case \"Z\":\n\t                            path = [\"C\"][concat](l2c(d.x, d.y, d.X, d.Y));\n\t                            break;\n\t                    }\n\t                    return path;\n\t                },\n\t                fixArc = function (pp, i) {\n\t                    if (pp[i].length > 7) {\n\t                        pp[i].shift();\n\t                        var pi = pp[i];\n\t                        while (pi.length) {\n\t                            pcoms1[i]=\"A\"; // if created multiple C:s, their original seg is saved\n\t                            p2 && (pcoms2[i]=\"A\"); // the same as above\n\t                            pp.splice(i++, 0, [\"C\"][concat](pi.splice(0, 6)));\n\t                        }\n\t                        pp.splice(i, 1);\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                fixM = function (path1, path2, a1, a2, i) {\n\t                    if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                        path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                        a1.bx = 0;\n\t                        a1.by = 0;\n\t                        a1.x = path1[i][1];\n\t                        a1.y = path1[i][2];\n\t                        ii = mmax(p.length, p2 && p2.length || 0);\n\t                    }\n\t                },\n\t                pcoms1 = [], // path commands of original path p\n\t                pcoms2 = [], // path commands of original path p2\n\t                pfirst = \"\", // temporary holder for original path command\n\t                pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                {\n\t                    pcoms1[i] = pfirst; // Save current path command\n\t                    i && ( pcom = pcoms1[i-1]); // Get previous path command pcom\n\t                }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n\t                if (p2) { // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\")\n\t                    {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i-1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\n\t                    if (pcoms2[i]!=\"A\" && pfirst==\"C\") pcoms2[i]=\"C\";\n\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }, null, pathClone),\n\t        parseDots = R._parseDots = cacher(function (gradient) {\n\t            var dots = [];\n\t            for (var i = 0, ii = gradient.length; i < ii; i++) {\n\t                var dot = {},\n\t                    par = gradient[i].match(/^([^:]*):?([\\d\\.]*)/);\n\t                dot.color = R.getRGB(par[1]);\n\t                if (dot.color.error) {\n\t                    return null;\n\t                }\n\t                dot.opacity = dot.color.opacity;\n\t                dot.color = dot.color.hex;\n\t                par[2] && (dot.offset = par[2] + \"%\");\n\t                dots.push(dot);\n\t            }\n\t            for (i = 1, ii = dots.length - 1; i < ii; i++) {\n\t                if (!dots[i].offset) {\n\t                    var start = toFloat(dots[i - 1].offset || 0),\n\t                        end = 0;\n\t                    for (var j = i + 1; j < ii; j++) {\n\t                        if (dots[j].offset) {\n\t                            end = dots[j].offset;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!end) {\n\t                        end = 100;\n\t                        j = ii;\n\t                    }\n\t                    end = toFloat(end);\n\t                    var d = (end - start) / (j - i + 1);\n\t                    for (; i < j; i++) {\n\t                        start += d;\n\t                        dots[i].offset = start + \"%\";\n\t                    }\n\t                }\n\t            }\n\t            return dots;\n\t        }),\n\t        tear = R._tear = function (el, paper) {\n\t            el == paper.top && (paper.top = el.prev);\n\t            el == paper.bottom && (paper.bottom = el.next);\n\t            el.next && (el.next.prev = el.prev);\n\t            el.prev && (el.prev.next = el.next);\n\t        },\n\t        tofront = R._tofront = function (el, paper) {\n\t            if (paper.top === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = null;\n\t            el.prev = paper.top;\n\t            paper.top.next = el;\n\t            paper.top = el;\n\t        },\n\t        toback = R._toback = function (el, paper) {\n\t            if (paper.bottom === el) {\n\t                return;\n\t            }\n\t            tear(el, paper);\n\t            el.next = paper.bottom;\n\t            el.prev = null;\n\t            paper.bottom.prev = el;\n\t            paper.bottom = el;\n\t        },\n\t        insertafter = R._insertafter = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.top && (paper.top = el);\n\t            el2.next && (el2.next.prev = el);\n\t            el.next = el2.next;\n\t            el.prev = el2;\n\t            el2.next = el;\n\t        },\n\t        insertbefore = R._insertbefore = function (el, el2, paper) {\n\t            tear(el, paper);\n\t            el2 == paper.bottom && (paper.bottom = el);\n\t            el2.prev && (el2.prev.next = el);\n\t            el.prev = el2.prev;\n\t            el2.prev = el;\n\t            el.next = el2;\n\t        },\n\t        /*\\\n\t         * Raphael.toMatrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns matrix of transformations applied to a given path\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (object) @Matrix\n\t        \\*/\n\t        toMatrix = R.toMatrix = function (path, transform) {\n\t            var bb = pathDimensions(path),\n\t                el = {\n\t                    _: {\n\t                        transform: E\n\t                    },\n\t                    getBBox: function () {\n\t                        return bb;\n\t                    }\n\t                };\n\t            extractTransform(el, transform);\n\t            return el.matrix;\n\t        },\n\t        /*\\\n\t         * Raphael.transformPath\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns path transformed by a given transformation\n\t         > Parameters\n\t         - path (string) path string\n\t         - transform (string|array) transformation string\n\t         = (string) path\n\t        \\*/\n\t        transformPath = R.transformPath = function (path, transform) {\n\t            return mapPath(path, toMatrix(path, transform));\n\t        },\n\t        extractTransform = R._extractTransform = function (el, tstr) {\n\t            if (tstr == null) {\n\t                return el._.transform;\n\t            }\n\t            tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            var tdata = R.parseTransformString(tstr),\n\t                deg = 0,\n\t                dx = 0,\n\t                dy = 0,\n\t                sx = 1,\n\t                sy = 1,\n\t                _ = el._,\n\t                m = new Matrix;\n\t            _.transform = tdata || [];\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            deg += t[1];\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                            deg += t[1];\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || el.getBBox(1);\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                            sx *= t[1];\n\t                            sy *= t[tlen - 1];\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                            sx *= t[1];\n\t                            sy *= t[2];\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                    _.dirtyT = 1;\n\t                    el.matrix = m;\n\t                }\n\t            }\n\n\t            /*\\\n\t             * Element.matrix\n\t             [ property (object) ]\n\t             **\n\t             * Keeps @Matrix object, which represents element transformation\n\t            \\*/\n\t            el.matrix = m;\n\n\t            _.sx = sx;\n\t            _.sy = sy;\n\t            _.deg = deg;\n\t            _.dx = dx = m.e;\n\t            _.dy = dy = m.f;\n\n\t            if (sx == 1 && sy == 1 && !deg && _.bbox) {\n\t                _.bbox.x += +dx;\n\t                _.bbox.y += +dy;\n\t            } else {\n\t                _.dirtyT = 1;\n\t            }\n\t        },\n\t        getEmpty = function (item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\": return [l, 0, 0];\n\t                case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\": if (item.length == 4) {\n\t                    return [l, 0, item[2], item[3]];\n\t                } else {\n\t                    return [l, 0];\n\t                }\n\t                case \"s\": if (item.length == 5) {\n\t                    return [l, 1, 1, item[3], item[4]];\n\t                } else if (item.length == 3) {\n\t                    return [l, 1, 1];\n\t                } else {\n\t                    return [l, 1];\n\t                }\n\t            }\n\t        },\n\t        equaliseTransform = R._equaliseTransform = function (t1, t2) {\n\t            t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t            t1 = R.parseTransformString(t1) || [];\n\t            t2 = R.parseTransformString(t2) || [];\n\t            var maxlength = mmax(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0, j, jj,\n\t                tt1, tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if ((tt1[0] != tt2[0]) ||\n\t                    (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                    (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                    ) {\n\t                    return;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = mmax(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: from,\n\t                to: to\n\t            };\n\t        };\n\t    R._getContainer = function (x, y, w, h) {\n\t        var container;\n\t        container = h == null && !R.is(x, \"object\") ? g.doc.getElementById(x) : x;\n\t        if (container == null) {\n\t            return;\n\t        }\n\t        if (container.tagName) {\n\t            if (y == null) {\n\t                return {\n\t                    container: container,\n\t                    width: container.style.pixelWidth || container.offsetWidth,\n\t                    height: container.style.pixelHeight || container.offsetHeight\n\t                };\n\t            } else {\n\t                return {\n\t                    container: container,\n\t                    width: y,\n\t                    height: w\n\t                };\n\t            }\n\t        }\n\t        return {\n\t            container: 1,\n\t            x: x,\n\t            y: y,\n\t            width: w,\n\t            height: h\n\t        };\n\t    };\n\t    /*\\\n\t     * Raphael.pathToRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to relative form\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.pathToRelative = pathToRelative;\n\t    R._engine = {};\n\t    /*\\\n\t     * Raphael.path2curve\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic bezier curves.\n\t     > Parameters\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments.\n\t    \\*/\n\t    R.path2curve = path2curve;\n\t    /*\\\n\t     * Raphael.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns matrix based on given parameters.\n\t     > Parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     = (object) @Matrix\n\t    \\*/\n\t    R.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds given matrix to existing one.\n\t         > Parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         > Parameters\n\t         - x (number)\n\t         - y (number) #optional\n\t         - cx (number) #optional\n\t         - cy (number) #optional\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         > Parameters\n\t         - a (number)\n\t         - x (number)\n\t         - y (number)\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = R.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Return x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Return y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         > Parameters\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return R.svg ?\n\t                \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\" :\n\t                [this.get(0), this.get(2), this.get(1), this.get(3), 0, 0].join();\n\t        };\n\t        matrixproto.toFilter = function () {\n\t            return \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + this.get(0) +\n\t                \", M12=\" + this.get(2) + \", M21=\" + this.get(1) + \", M22=\" + this.get(3) +\n\t                \", Dx=\" + this.get(4) + \", Dy=\" + this.get(5) + \", sizingmethod='auto expand')\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = R.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = R.deg(math.asin(sin));\n\t            }\n\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Return transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this[split]();\n\t            if (s.isSimple) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [s.dx, s.dy] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [s.rotate, 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\n\t    var preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    getEventPosition = function (e) {\n\t        var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\n\t        return {\n\t            x: e.clientX + scrollX,\n\t            y: e.clientY + scrollY\n\t        };\n\t    },\n\t    addEvent = (function () {\n\t        if (g.doc.addEventListener) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    var pos = getEventPosition(e);\n\t                    return fn.call(element, e, pos.x, pos.y);\n\t                };\n\t                obj.addEventListener(type, f, false);\n\n\t                if (supportsTouch && touchMap[type]) {\n\t                    var _f = function (e) {\n\t                        var pos = getEventPosition(e),\n\t                            olde = e;\n\n\t                        for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                            if (e.targetTouches[i].target == obj) {\n\t                                e = e.targetTouches[i];\n\t                                e.originalEvent = olde;\n\t                                e.preventDefault = preventTouch;\n\t                                e.stopPropagation = stopTouch;\n\t                                break;\n\t                            }\n\t                        }\n\n\t                        return fn.call(element, e, pos.x, pos.y);\n\t                    };\n\t                    obj.addEventListener(touchMap[type], _f, false);\n\t                }\n\n\t                return function () {\n\t                    obj.removeEventListener(type, f, false);\n\n\t                    if (supportsTouch && touchMap[type])\n\t                        obj.removeEventListener(touchMap[type], _f, false);\n\n\t                    return true;\n\t                };\n\t            };\n\t        } else if (g.doc.attachEvent) {\n\t            return function (obj, type, fn, element) {\n\t                var f = function (e) {\n\t                    e = e || g.win.event;\n\t                    var scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                        scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t                        x = e.clientX + scrollX,\n\t                        y = e.clientY + scrollY;\n\t                    e.preventDefault = e.preventDefault || preventDefault;\n\t                    e.stopPropagation = e.stopPropagation || stopPropagation;\n\t                    return fn.call(element, e, x, y);\n\t                };\n\t                obj.attachEvent(\"on\" + type, f);\n\t                var detacher = function () {\n\t                    obj.detachEvent(\"on\" + type, f);\n\t                    return true;\n\t                };\n\t                return detacher;\n\t            };\n\t        }\n\t    })(),\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t            scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft,\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            g.win.opera && parent.removeChild(node);\n\t            node.style.display = \"none\";\n\t            o = dragi.el.paper.getElementByPoint(x, y);\n\t            node.style.display = display;\n\t            g.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            o && eve(\"raphael.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"raphael.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        R.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"raphael.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t        }\n\t        drag = [];\n\t    },\n\t    /*\\\n\t     * Raphael.el\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements. This is useful when you want to hack default functionality or\n\t     * want to wrap some common transformation or attributes in one method. In difference to canvas methods,\n\t     * you can redefine element method at any time. Expending element methods wouldn’t affect set.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | // then use it\n\t     | paper.circle(100, 100, 20).red();\n\t    \\*/\n\t    elproto = R.el = {};\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes event handler for double click for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousedown for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mousemove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseout for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseover for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes event handler for mouseup for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchstart for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchmove for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchend for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes event handler for touchcancel for the element.\n\t     > Parameters\n\t     - handler (function) #optional handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            R[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (R.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({name: eventName, f: fn, unbind: addEvent(this.shape || this.node || g.doc, eventName, fn, scope || this)});\n\t                }\n\t                return this;\n\t            };\n\t            R[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--){\n\t                    if (events[l].name == eventName && (R.is(fn, \"undefined\") || events[l].f == fn)) {\n\t                        events[l].unbind();\n\t                        events.splice(l, 1);\n\t                        !events.length && delete this.events;\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key.\n\t     **\n\t     * See also @Element.removeData\n\t     > Parameters\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     * or, if key and value are not specified:\n\t     = (object) Key/value pairs for all the data associated with the element.\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0) {\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (R.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"raphael.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"raphael.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     > Parameters\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t     /*\\\n\t     * Element.getData\n\t     [ method ]\n\t     **\n\t     * Retrieves the element data\n\t     = (object) data\n\t    \\*/\n\t    elproto.getData = function () {\n\t        return clone(eldata[this.id] || {});\n\t    };\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes event handlers for hover for the element.\n\t     > Parameters\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for drag of the element.\n\t     > Parameters\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionally following `drag` events will be triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element will be dragged over another element\n\t     * `drag.over.<id>` will be fired as well.\n\t     *\n\t     * Start event and start handler will be called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler will be called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler will be called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        function start(e) {\n\t            (e.originalEvent || e).preventDefault();\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = g.doc.documentElement.scrollTop || g.doc.body.scrollTop,\n\t                scrollX = g.doc.documentElement.scrollLeft || g.doc.body.scrollLeft;\n\t            this._drag.id = e.identifier;\n\t            if (supportsTouch && e.touches) {\n\t                var i = e.touches.length, touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    this._drag.id = touch.identifier;\n\t                    if (touch.identifier == this._drag.id) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            this._drag.x = x + scrollX;\n\t            this._drag.y = y + scrollY;\n\t            !drag.length && R.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: this, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"raphael.drag.start.\" + this.id, onstart);\n\t            onmove && eve.on(\"raphael.drag.move.\" + this.id, onmove);\n\t            onend && eve.on(\"raphael.drag.end.\" + this.id, onend);\n\t            eve(\"raphael.drag.start.\" + this.id, start_scope || move_scope || this, e.clientX + scrollX, e.clientY + scrollY, e);\n\t        }\n\t        this._drag = {};\n\t        draggable.push({el: this, start: start});\n\t        this.mousedown(start);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut for assigning event handler for `drag.over.<id>` event, where id is id of the element (see @Element.id).\n\t     > Parameters\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    elproto.onDragOver = function (f) {\n\t        f ? eve.on(\"raphael.drag.over.\" + this.id, f) : eve.unbind(\"raphael.drag.over.\" + this.id);\n\t    };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from given element.\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].start);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"raphael.drag.*.\" + this.id);\n\t        }\n\t        !draggable.length && R.unmousemove(dragMove).unmouseup(dragUp);\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) Raphaël element object with type “circle”\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    paperproto.circle = function (x, y, r) {\n\t        var out = R._engine.circle(this, x || 0, y || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - r (number) #optional radius for rounded corners, default is 0\n\t     = (object) Raphaël element object with type “rect”\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    paperproto.rect = function (x, y, w, h, r) {\n\t        var out = R._engine.rect(this, x || 0, y || 0, w || 0, h || 0, r || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) Raphaël element object with type “ellipse”\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    paperproto.ellipse = function (x, y, rx, ry) {\n\t        var out = R._engine.ellipse(this, x || 0, y || 0, rx || 0, ry || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a path element by given path data string.\n\t     > Parameters\n\t     - pathString (string) #optional path string in SVG format.\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numercal form. Example:\n\t     | \"M10,20L30,40\"\n\t     * Here we can see two commands: “M”, with arguments `(10, 20)` and “L” with arguments `(30, 40)`. Upper case letter mean command is absolute, lower case—relative.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * “Catmull-Rom curveto” is a not standard SVG command and added in 2.0 to make life easier.\n\t     * Note: there is a special case when path consist of just three commands: “M10,10R…z”. In this case path will smoothly connects to its beginning.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t     * For example of path strings, check out these icons: http://raphaeljs.com/icons/\n\t    \\*/\n\t    paperproto.path = function (pathString) {\n\t        pathString && !R.is(pathString, string) && !R.is(pathString[0], array) && (pathString += E);\n\t        var out = R._engine.path(R.format[apply](R, arguments), this);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Embeds an image into the surface.\n\t     **\n\t     > Parameters\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) Raphaël element object with type “image”\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    paperproto.image = function (src, x, y, w, h) {\n\t        var out = R._engine.image(this, src || \"about:blank\", x || 0, y || 0, w || 0, h || 0);\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string. If you need line breaks, put “\\n” in the string.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string) The text string to draw\n\t     = (object) Raphaël element object with type “text”\n\t     **\n\t     > Usage\n\t     | var t = paper.text(50, 50, \"Raphaël\\nkicks\\nbutt!\");\n\t    \\*/\n\t    paperproto.text = function (x, y, text) {\n\t        var out = R._engine.text(this, x || 0, y || 0, Str(text));\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.set\n\t     [ method ]\n\t     **\n\t     * Creates array-like object to keep and operate several elements at once.\n\t     * Warning: it doesn’t create any elements for itself in the page, it just groups existing elements.\n\t     * Sets act as pseudo elements — all methods available to an element can be used on a set.\n\t     = (object) array-like object that represents set of elements\n\t     **\n\t     > Usage\n\t     | var st = paper.set();\n\t     | st.push(\n\t     |     paper.circle(10, 10, 5),\n\t     |     paper.circle(30, 10, 5)\n\t     | );\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.set = function (itemsArray) {\n\t        !R.is(itemsArray, \"array\") && (itemsArray = Array.prototype.splice.call(arguments, 0, arguments.length));\n\t        var out = new Set(itemsArray);\n\t        this.__set__ && this.__set__.push(out);\n\t        out[\"paper\"] = this;\n\t        out[\"type\"] = \"set\";\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.setStart\n\t     [ method ]\n\t     **\n\t     * Creates @Paper.set. All elements that will be created after calling this method and before calling\n\t     * @Paper.setFinish will be added to the set.\n\t     **\n\t     > Usage\n\t     | paper.setStart();\n\t     | paper.circle(10, 10, 5),\n\t     | paper.circle(30, 10, 5)\n\t     | var st = paper.setFinish();\n\t     | st.attr({fill: \"red\"}); // changes the fill of both circles\n\t    \\*/\n\t    paperproto.setStart = function (set) {\n\t        this.__set__ = set || this.set();\n\t    };\n\t    /*\\\n\t     * Paper.setFinish\n\t     [ method ]\n\t     **\n\t     * See @Paper.setStart. This method finishes catching and returns resulting set.\n\t     **\n\t     = (object) set\n\t    \\*/\n\t    paperproto.setFinish = function (set) {\n\t        var out = this.__set__;\n\t        delete this.__set__;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Paper.getSize\n\t     [ method ]\n\t     **\n\t     * Obtains current paper actual size.\n\t     **\n\t     = (object)\n\t     \\*/\n\t    paperproto.getSize = function () {\n\t        var container = this.canvas.parentNode;\n\t        return {\n\t            width: container.offsetWidth,\n\t            height: container.offsetHeight\n\t                };\n\t        };\n\t    /*\\\n\t     * Paper.setSize\n\t     [ method ]\n\t     **\n\t     * If you need to change dimensions of the canvas call this method\n\t     **\n\t     > Parameters\n\t     **\n\t     - width (number) new width of the canvas\n\t     - height (number) new height of the canvas\n\t    \\*/\n\t    paperproto.setSize = function (width, height) {\n\t        return R._engine.setSize.call(this, width, height);\n\t    };\n\t    /*\\\n\t     * Paper.setViewBox\n\t     [ method ]\n\t     **\n\t     * Sets the view box of the paper. Practically it gives you ability to zoom and pan whole paper surface by\n\t     * specifying new boundaries.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) new x position, default is `0`\n\t     - y (number) new y position, default is `0`\n\t     - w (number) new width of the canvas\n\t     - h (number) new height of the canvas\n\t     - fit (boolean) `true` if you want graphics to fit into new boundary box\n\t    \\*/\n\t    paperproto.setViewBox = function (x, y, w, h, fit) {\n\t        return R._engine.setViewBox.call(this, x, y, w, h, fit);\n\t    };\n\t    /*\\\n\t     * Paper.top\n\t     [ property ]\n\t     **\n\t     * Points to the topmost element on the paper\n\t    \\*/\n\t    /*\\\n\t     * Paper.bottom\n\t     [ property ]\n\t     **\n\t     * Points to the bottom element on the paper\n\t    \\*/\n\t    paperproto.top = paperproto.bottom = null;\n\t    /*\\\n\t     * Paper.raphael\n\t     [ property ]\n\t     **\n\t     * Points to the @Raphael object/function\n\t    \\*/\n\t    paperproto.raphael = R;\n\t    var getOffset = function (elem) {\n\t        var box = elem.getBoundingClientRect(),\n\t            doc = elem.ownerDocument,\n\t            body = doc.body,\n\t            docElem = doc.documentElement,\n\t            clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t            top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t            left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t        return {\n\t            y: top,\n\t            x: left\n\t        };\n\t    };\n\t    /*\\\n\t     * Paper.getElementByPoint\n\t     [ method ]\n\t     **\n\t     * Returns you topmost element under given point.\n\t     **\n\t     = (object) Raphaël element object\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate from the top left corner of the window\n\t     - y (number) y coordinate from the top left corner of the window\n\t     > Usage\n\t     | paper.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t    \\*/\n\t    paperproto.getElementByPoint = function (x, y) {\n\t        var paper = this,\n\t            svg = paper.canvas,\n\t            target = g.doc.elementFromPoint(x, y);\n\t        if (g.win.opera && target.tagName == \"svg\") {\n\t            var so = getOffset(svg),\n\t                sr = svg.createSVGRect();\n\t            sr.x = x - so.x;\n\t            sr.y = y - so.y;\n\t            sr.width = sr.height = 1;\n\t            var hits = svg.getIntersectionList(sr, null);\n\t            if (hits.length) {\n\t                target = hits[hits.length - 1];\n\t            }\n\t        }\n\t        if (!target) {\n\t            return null;\n\t        }\n\t        while (target.parentNode && target != svg.parentNode && !target.raphael) {\n\t            target = target.parentNode;\n\t        }\n\t        target == paper.canvas.parentNode && (target = svg);\n\t        target = target && target.raphael ? paper.getById(target.raphaelid) : null;\n\t        return target;\n\t    };\n\n\t    /*\\\n\t     * Paper.getElementsByBBox\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have an intersecting bounding box\n\t     **\n\t     > Parameters\n\t     **\n\t     - bbox (object) bbox to check with\n\t     = (object) @Set\n\t     \\*/\n\t    paperproto.getElementsByBBox = function (bbox) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (R.isBBoxIntersect(el.getBBox(), bbox)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\n\t    /*\\\n\t     * Paper.getById\n\t     [ method ]\n\t     **\n\t     * Returns you element by its internal ID.\n\t     **\n\t     > Parameters\n\t     **\n\t     - id (number) id\n\t     = (object) Raphaël element object\n\t    \\*/\n\t    paperproto.getById = function (id) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (bot.id == id) {\n\t                return bot;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return null;\n\t    };\n\t    /*\\\n\t     * Paper.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element on the paper\n\t     *\n\t     * If callback function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Paper object\n\t     > Usage\n\t     | paper.forEach(function (el) {\n\t     |     el.attr({ stroke: \"blue\" });\n\t     | });\n\t    \\*/\n\t    paperproto.forEach = function (callback, thisArg) {\n\t        var bot = this.bottom;\n\t        while (bot) {\n\t            if (callback.call(thisArg, bot) === false) {\n\t                return this;\n\t            }\n\t            bot = bot.next;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.getElementsByPoint\n\t     [ method ]\n\t     **\n\t     * Returns set of elements that have common point inside\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (object) @Set\n\t    \\*/\n\t    paperproto.getElementsByPoint = function (x, y) {\n\t        var set = this.set();\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                set.push(el);\n\t            }\n\t        });\n\t        return set;\n\t    };\n\t    function x_y() {\n\t        return this.x + S + this.y;\n\t    }\n\t    function x_y_w_h() {\n\t        return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t    }\n\t    /*\\\n\t     * Element.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this element’s shape\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point inside the shape\n\t    \\*/\n\t    elproto.isPointInside = function (x, y) {\n\t        var rp = this.realPath = getPath[this.type](this);\n\t        if (this.attr('transform') && this.attr('transform').length) {\n\t            rp = R.transformPath(rp, this.attr('transform'));\n\t        }\n\t        return R.isPointInsidePath(rp, x, y);\n\t    };\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Return bounding box for a given element\n\t     **\n\t     > Parameters\n\t     **\n\t     - isWithoutTransform (boolean) flag, `true` if you want to have bounding box before transformations. Default is `false`.\n\t     = (object) Bounding box object:\n\t     o {\n\t     o     x: (number) top left corner x\n\t     o     y: (number) top left corner y\n\t     o     x2: (number) bottom right corner x\n\t     o     y2: (number) bottom right corner y\n\t     o     width: (number) width\n\t     o     height: (number) height\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        var _ = this._;\n\t        if (isWithoutTransform) {\n\t            if (_.dirty || !_.bboxwt) {\n\t                this.realPath = getPath[this.type](this);\n\t                _.bboxwt = pathDimensions(this.realPath);\n\t                _.bboxwt.toString = x_y_w_h;\n\t                _.dirty = 0;\n\t            }\n\t            return _.bboxwt;\n\t        }\n\t        if (_.dirty || _.dirtyT || !_.bbox) {\n\t            if (_.dirty || !this.realPath) {\n\t                _.bboxwt = 0;\n\t                this.realPath = getPath[this.type](this);\n\t            }\n\t            _.bbox = pathDimensions(mapPath(this.realPath, this.matrix));\n\t            _.bbox.toString = x_y_w_h;\n\t            _.dirty = _.dirtyT = 0;\n\t        }\n\t        return _.bbox;\n\t    };\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     = (object) clone of a given element\n\t     **\n\t    \\*/\n\t    elproto.clone = function () {\n\t        if (this.removed) {\n\t            return null;\n\t        }\n\t        var out = this.paper[this.type]().attr(this.attr());\n\t        this.__set__ && this.__set__.push(out);\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.glow\n\t     [ method ]\n\t     **\n\t     * Return set of elements that create glow-like effect around given element. See @Paper.set.\n\t     *\n\t     * Note: Glow is not connected to the element. If you change element attributes it won’t adjust itself.\n\t     **\n\t     > Parameters\n\t     **\n\t     - glow (object) #optional parameters object with all properties optional:\n\t     o {\n\t     o     width (number) size of the glow, default is `10`\n\t     o     fill (boolean) will it be filled, default is `false`\n\t     o     opacity (number) opacity, default is `0.5`\n\t     o     offsetx (number) horizontal offset, default is `0`\n\t     o     offsety (number) vertical offset, default is `0`\n\t     o     color (string) glow colour, default is `black`\n\t     o }\n\t     = (object) @Paper.set of elements that represents glow\n\t    \\*/\n\t    elproto.glow = function (glow) {\n\t        if (this.type == \"text\") {\n\t            return null;\n\t        }\n\t        glow = glow || {};\n\t        var s = {\n\t            width: (glow.width || 10) + (+this.attr(\"stroke-width\") || 1),\n\t            fill: glow.fill || false,\n\t            opacity: glow.opacity == null ? .5 : glow.opacity,\n\t            offsetx: glow.offsetx || 0,\n\t            offsety: glow.offsety || 0,\n\t            color: glow.color || \"#000\"\n\t        },\n\t            c = s.width / 2,\n\t            r = this.paper,\n\t            out = r.set(),\n\t            path = this.realPath || getPath[this.type](this);\n\t        path = this.matrix ? mapPath(path, this.matrix) : path;\n\t        for (var i = 1; i < c + 1; i++) {\n\t            out.push(r.path(path).attr({\n\t                stroke: s.color,\n\t                fill: s.fill ? s.color : \"none\",\n\t                \"stroke-linejoin\": \"round\",\n\t                \"stroke-linecap\": \"round\",\n\t                \"stroke-width\": +(s.width / c * i).toFixed(3),\n\t                opacity: +(s.opacity / c).toFixed(3)\n\t            }));\n\t        }\n\t        return out.insertBefore(this).translate(s.offsetx, s.offsety);\n\t    };\n\t    var curveslengths = {},\n\t    getPointAtSegmentLength = function (p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return R.findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTatLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    },\n\t    getLengthFactory = function (istotal, subpath) {\n\t        return function (path, length, onlystart) {\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\"C\" + point.start.x, point.start.y, point.m.x, point.m.y, point.x, point.y];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\"M\" + point.x, point.y + \"C\" + point.n.x, point.n.y, point.end.x, point.end.y, p[5], p[6]].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return {x: point.x, y: point.y, alpha: point.alpha};\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : R.findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            point.alpha && (point = {x: point.x, y: point.y, alpha: point.alpha});\n\t            return point;\n\t        };\n\t    };\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    /*\\\n\t     * Raphael.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the given path in pixels.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string.\n\t     **\n\t     = (number) length.\n\t    \\*/\n\t    R.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Raphael.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    R.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Raphael.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given path from given length to given length.\n\t     **\n\t     > Parameters\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    R.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns length of the path in pixels. Only works for element of “path” type.\n\t     = (number) length.\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\n\t        return getTotalLength(path);\n\t    };\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Return coordinates of the point located at the given length on the given path. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - length (number)\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate\n\t     o     y: (number) y coordinate\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return getPointAtLength(path, length);\n\t    };\n\t    /*\\\n\t     * Element.getPath\n\t     [ method ]\n\t     **\n\t     * Returns path of the element. Only works for elements of “path” type and simple elements like circle.\n\t     = (object) path\n\t     **\n\t    \\*/\n\t    elproto.getPath = function () {\n\t        var path,\n\t            getPath = R._getPath[this.type];\n\n\t        if (this.type == \"text\" || this.type == \"set\") {\n\t            return;\n\t        }\n\n\t        if (getPath) {\n\t            path = getPath(this);\n\t        }\n\n\t        return path;\n\t    };\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Return subpath of a given element from given length to given length. Only works for element of “path” type.\n\t     **\n\t     > Parameters\n\t     **\n\t     - from (number) position of the start of the segment\n\t     - to (number) position of the end of the segment\n\t     **\n\t     = (string) pathstring for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        var path = this.getPath();\n\t        if (!path) {\n\t            return;\n\t        }\n\n\t        return R.getSubpath(path, from, to);\n\t    };\n\t    /*\\\n\t     * Raphael.easing_formulas\n\t     [ property ]\n\t     **\n\t     * Object that contains easing formulas for animation. You could extend it with your own. By default it has following list of easing:\n\t     # <ul>\n\t     #     <li>“linear”</li>\n\t     #     <li>“&lt;” or “easeIn” or “ease-in”</li>\n\t     #     <li>“>” or “easeOut” or “ease-out”</li>\n\t     #     <li>“&lt;>” or “easeInOut” or “ease-in-out”</li>\n\t     #     <li>“backIn” or “back-in”</li>\n\t     #     <li>“backOut” or “back-out”</li>\n\t     #     <li>“elastic”</li>\n\t     #     <li>“bounce”</li>\n\t     # </ul>\n\t     # <p>See also <a href=\"http://raphaeljs.com/easing.html\">Easing demo</a>.</p>\n\t    \\*/\n\t    var ef = R.easing_formulas = {\n\t        linear: function (n) {\n\t            return n;\n\t        },\n\t        \"<\": function (n) {\n\t            return pow(n, 1.7);\n\t        },\n\t        \">\": function (n) {\n\t            return pow(n, .48);\n\t        },\n\t        \"<>\": function (n) {\n\t            var q = .48 - n / 1.04,\n\t                Q = math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = pow(abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = pow(abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        },\n\t        backIn: function (n) {\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        },\n\t        backOut: function (n) {\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        },\n\t        elastic: function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return pow(2, -10 * n) * math.sin((n - .075) * (2 * PI) / .3) + 1;\n\t        },\n\t        bounce: function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < (1 / p)) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < (2 / p)) {\n\t                    n -= (1.5 / p);\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < (2.5 / p)) {\n\t                        n -= (2.25 / p);\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= (2.625 / p);\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        }\n\t    };\n\t    ef.easeIn = ef[\"ease-in\"] = ef[\"<\"];\n\t    ef.easeOut = ef[\"ease-out\"] = ef[\">\"];\n\t    ef.easeInOut = ef[\"ease-in-out\"] = ef[\"<>\"];\n\t    ef[\"back-in\"] = ef.backIn;\n\t    ef[\"back-out\"] = ef.backOut;\n\n\t    var animationElements = [],\n\t        requestAnimFrame = window.requestAnimationFrame       ||\n\t                           window.webkitRequestAnimationFrame ||\n\t                           window.mozRequestAnimationFrame    ||\n\t                           window.oRequestAnimationFrame      ||\n\t                           window.msRequestAnimationFrame     ||\n\t                           function (callback) {\n\t                               setTimeout(callback, 16);\n\t                           },\n\t        animation = function () {\n\t            var Now = +new Date,\n\t                l = 0;\n\t            for (; l < animationElements.length; l++) {\n\t                var e = animationElements[l];\n\t                if (e.el.removed || e.paused) {\n\t                    continue;\n\t                }\n\t                var time = Now - e.start,\n\t                    ms = e.ms,\n\t                    easing = e.easing,\n\t                    from = e.from,\n\t                    diff = e.diff,\n\t                    to = e.to,\n\t                    t = e.t,\n\t                    that = e.el,\n\t                    set = {},\n\t                    now,\n\t                    init = {},\n\t                    key;\n\t                if (e.initstatus) {\n\t                    time = (e.initstatus * e.anim.top - e.prev) / (e.percent - e.prev) * ms;\n\t                    e.status = e.initstatus;\n\t                    delete e.initstatus;\n\t                    e.stop && animationElements.splice(l--, 1);\n\t                } else {\n\t                    e.status = (e.prev + (e.percent - e.prev) * (time / ms)) / e.anim.top;\n\t                }\n\t                if (time < 0) {\n\t                    continue;\n\t                }\n\t                if (time < ms) {\n\t                    var pos = easing(time / ms);\n\t                    for (var attr in from) if (from[has](attr)) {\n\t                        switch (availableAnimAttrs[attr]) {\n\t                            case nu:\n\t                                now = +from[attr] + pos * ms * diff[attr];\n\t                                break;\n\t                            case \"colour\":\n\t                                now = \"rgb(\" + [\n\t                                    upto255(round(from[attr].r + pos * ms * diff[attr].r)),\n\t                                    upto255(round(from[attr].g + pos * ms * diff[attr].g)),\n\t                                    upto255(round(from[attr].b + pos * ms * diff[attr].b))\n\t                                ].join(\",\") + \")\";\n\t                                break;\n\t                            case \"path\":\n\t                                now = [];\n\t                                for (var i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    now[i] = [from[attr][i][0]];\n\t                                    for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        now[i][j] = +from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                    }\n\t                                    now[i] = now[i].join(S);\n\t                                }\n\t                                now = now.join(S);\n\t                                break;\n\t                            case \"transform\":\n\t                                if (diff[attr].real) {\n\t                                    now = [];\n\t                                    for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                        now[i] = [from[attr][i][0]];\n\t                                        for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                            now[i][j] = from[attr][i][j] + pos * ms * diff[attr][i][j];\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    var get = function (i) {\n\t                                        return +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    };\n\t                                    // now = [[\"r\", get(2), 0, 0], [\"t\", get(3), get(4)], [\"s\", get(0), get(1), 0, 0]];\n\t                                    now = [[\"m\", get(0), get(1), get(2), get(3), get(4), get(5)]];\n\t                                }\n\t                                break;\n\t                            case \"csv\":\n\t                                if (attr == \"clip-rect\") {\n\t                                    now = [];\n\t                                    i = 4;\n\t                                    while (i--) {\n\t                                        now[i] = +from[attr][i] + pos * ms * diff[attr][i];\n\t                                    }\n\t                                }\n\t                                break;\n\t                            default:\n\t                                var from2 = [][concat](from[attr]);\n\t                                now = [];\n\t                                i = that.paper.customAttributes[attr].length;\n\t                                while (i--) {\n\t                                    now[i] = +from2[i] + pos * ms * diff[attr][i];\n\t                                }\n\t                                break;\n\t                        }\n\t                        set[attr] = now;\n\t                    }\n\t                    that.attr(set);\n\t                    (function (id, that, anim) {\n\t                        setTimeout(function () {\n\t                            eve(\"raphael.anim.frame.\" + id, that, anim);\n\t                        });\n\t                    })(that.id, that, e.anim);\n\t                } else {\n\t                    (function(f, el, a) {\n\t                        setTimeout(function() {\n\t                            eve(\"raphael.anim.frame.\" + el.id, el, a);\n\t                            eve(\"raphael.anim.finish.\" + el.id, el, a);\n\t                            R.is(f, \"function\") && f.call(el);\n\t                        });\n\t                    })(e.callback, that, e.anim);\n\t                    that.attr(to);\n\t                    animationElements.splice(l--, 1);\n\t                    if (e.repeat > 1 && !e.next) {\n\t                        for (key in to) if (to[has](key)) {\n\t                            init[key] = e.totalOrigin[key];\n\t                        }\n\t                        e.el.attr(init);\n\t                        runAnimation(e.anim, e.el, e.anim.percents[0], null, e.totalOrigin, e.repeat - 1);\n\t                    }\n\t                    if (e.next && !e.stop) {\n\t                        runAnimation(e.anim, e.el, e.next, null, e.totalOrigin, e.repeat);\n\t                    }\n\t                }\n\t            }\n\t            animationElements.length && requestAnimFrame(animation);\n\t        },\n\t        upto255 = function (color) {\n\t            return color > 255 ? 255 : color < 0 ? 0 : color;\n\t        };\n\t    /*\\\n\t     * Element.animateWith\n\t     [ method ]\n\t     **\n\t     * Acts similar to @Element.animate, but ensure that given animation runs in sync with another given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - el (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - params (object) #optional final attributes for the element, see also @Element.attr\n\t     - ms (number) #optional number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept on of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - element (object) element to sync with\n\t     - anim (object) animation to sync with\n\t     - animation (object) #optional animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animateWith = function (el, anim, params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var a = params instanceof Animation ? params : R.animation(params, ms, easing, callback),\n\t            x, y;\n\t        runAnimation(a, element, a.percents[0], null, element.attr());\n\t        for (var i = 0, ii = animationElements.length; i < ii; i++) {\n\t            if (animationElements[i].anim == anim && animationElements[i].el == el) {\n\t                animationElements[ii - 1].start = animationElements[i].start;\n\t                break;\n\t            }\n\t        }\n\t        return element;\n\t        //\n\t        //\n\t        // var a = params ? R.animation(params, ms, easing, callback) : anim,\n\t        //     status = element.status(anim);\n\t        // return this.animate(a).status(a, status * anim.ms / a.ms);\n\t    };\n\t    function CubicBezierAtTime(t, p1x, p1y, p2x, p2y, duration) {\n\t        var cx = 3 * p1x,\n\t            bx = 3 * (p2x - p1x) - cx,\n\t            ax = 1 - cx - bx,\n\t            cy = 3 * p1y,\n\t            by = 3 * (p2y - p1y) - cy,\n\t            ay = 1 - cy - by;\n\t        function sampleCurveX(t) {\n\t            return ((ax * t + bx) * t + cx) * t;\n\t        }\n\t        function solve(x, epsilon) {\n\t            var t = solveCurveX(x, epsilon);\n\t            return ((ay * t + by) * t + cy) * t;\n\t        }\n\t        function solveCurveX(x, epsilon) {\n\t            var t0, t1, t2, x2, d2, i;\n\t            for(t2 = x, i = 0; i < 8; i++) {\n\t                x2 = sampleCurveX(t2) - x;\n\t                if (abs(x2) < epsilon) {\n\t                    return t2;\n\t                }\n\t                d2 = (3 * ax * t2 + 2 * bx) * t2 + cx;\n\t                if (abs(d2) < 1e-6) {\n\t                    break;\n\t                }\n\t                t2 = t2 - x2 / d2;\n\t            }\n\t            t0 = 0;\n\t            t1 = 1;\n\t            t2 = x;\n\t            if (t2 < t0) {\n\t                return t0;\n\t            }\n\t            if (t2 > t1) {\n\t                return t1;\n\t            }\n\t            while (t0 < t1) {\n\t                x2 = sampleCurveX(t2);\n\t                if (abs(x2 - x) < epsilon) {\n\t                    return t2;\n\t                }\n\t                if (x > x2) {\n\t                    t0 = t2;\n\t                } else {\n\t                    t1 = t2;\n\t                }\n\t                t2 = (t1 - t0) / 2 + t0;\n\t            }\n\t            return t2;\n\t        }\n\t        return solve(t, 1 / (200 * duration));\n\t    }\n\t    elproto.onAnimation = function (f) {\n\t        f ? eve.on(\"raphael.anim.frame.\" + this.id, f) : eve.unbind(\"raphael.anim.frame.\" + this.id);\n\t        return this;\n\t    };\n\t    function Animation(anim, ms) {\n\t        var percents = [],\n\t            newAnim = {};\n\t        this.ms = ms;\n\t        this.times = 1;\n\t        if (anim) {\n\t            for (var attr in anim) if (anim[has](attr)) {\n\t                newAnim[toFloat(attr)] = anim[attr];\n\t                percents.push(toFloat(attr));\n\t            }\n\t            percents.sort(sortByNumber);\n\t        }\n\t        this.anim = newAnim;\n\t        this.top = percents[percents.length - 1];\n\t        this.percents = percents;\n\t    }\n\t    /*\\\n\t     * Animation.delay\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given delay.\n\t     **\n\t     > Parameters\n\t     **\n\t     - delay (number) number of ms to pass between animation start and actual animation\n\t     **\n\t     = (object) new altered Animation object\n\t     | var anim = Raphael.animation({cx: 10, cy: 20}, 2e3);\n\t     | circle1.animate(anim); // run the given animation immediately\n\t     | circle2.animate(anim.delay(500)); // run the given animation after 500 ms\n\t    \\*/\n\t    Animation.prototype.delay = function (delay) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.times = this.times;\n\t        a.del = +delay || 0;\n\t        return a;\n\t    };\n\t    /*\\\n\t     * Animation.repeat\n\t     [ method ]\n\t     **\n\t     * Creates a copy of existing animation object with given repetition.\n\t     **\n\t     > Parameters\n\t     **\n\t     - repeat (number) number iterations of animation. For infinite animation pass `Infinity`\n\t     **\n\t     = (object) new altered Animation object\n\t    \\*/\n\t    Animation.prototype.repeat = function (times) {\n\t        var a = new Animation(this.anim, this.ms);\n\t        a.del = this.del;\n\t        a.times = math.floor(mmax(times, 0)) || 1;\n\t        return a;\n\t    };\n\t    function runAnimation(anim, element, percent, status, totalOrigin, times) {\n\t        percent = toFloat(percent);\n\t        var params,\n\t            isInAnim,\n\t            isInAnimSet,\n\t            percents = [],\n\t            next,\n\t            prev,\n\t            timestamp,\n\t            ms = anim.ms,\n\t            from = {},\n\t            to = {},\n\t            diff = {};\n\t        if (status) {\n\t            for (i = 0, ii = animationElements.length; i < ii; i++) {\n\t                var e = animationElements[i];\n\t                if (e.el.id == element.id && e.anim == anim) {\n\t                    if (e.percent != percent) {\n\t                        animationElements.splice(i, 1);\n\t                        isInAnimSet = 1;\n\t                    } else {\n\t                        isInAnim = e;\n\t                    }\n\t                    element.attr(e.totalOrigin);\n\t                    break;\n\t                }\n\t            }\n\t        } else {\n\t            status = +to; // NaN\n\t        }\n\t        for (var i = 0, ii = anim.percents.length; i < ii; i++) {\n\t            if (anim.percents[i] == percent || anim.percents[i] > status * anim.top) {\n\t                percent = anim.percents[i];\n\t                prev = anim.percents[i - 1] || 0;\n\t                ms = ms / anim.top * (percent - prev);\n\t                next = anim.percents[i + 1];\n\t                params = anim.anim[percent];\n\t                break;\n\t            } else if (status) {\n\t                element.attr(anim.anim[anim.percents[i]]);\n\t            }\n\t        }\n\t        if (!params) {\n\t            return;\n\t        }\n\t        if (!isInAnim) {\n\t            for (var attr in params) if (params[has](attr)) {\n\t                if (availableAnimAttrs[has](attr) || element.paper.customAttributes[has](attr)) {\n\t                    from[attr] = element.attr(attr);\n\t                    (from[attr] == null) && (from[attr] = availableAttrs[attr]);\n\t                    to[attr] = params[attr];\n\t                    switch (availableAnimAttrs[attr]) {\n\t                        case nu:\n\t                            diff[attr] = (to[attr] - from[attr]) / ms;\n\t                            break;\n\t                        case \"colour\":\n\t                            from[attr] = R.getRGB(from[attr]);\n\t                            var toColour = R.getRGB(to[attr]);\n\t                            diff[attr] = {\n\t                                r: (toColour.r - from[attr].r) / ms,\n\t                                g: (toColour.g - from[attr].g) / ms,\n\t                                b: (toColour.b - from[attr].b) / ms\n\t                            };\n\t                            break;\n\t                        case \"path\":\n\t                            var pathes = path2curve(from[attr], to[attr]),\n\t                                toPath = pathes[1];\n\t                            from[attr] = pathes[0];\n\t                            diff[attr] = [];\n\t                            for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                diff[attr][i] = [0];\n\t                                for (var j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                    diff[attr][i][j] = (toPath[i][j] - from[attr][i][j]) / ms;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case \"transform\":\n\t                            var _ = element._,\n\t                                eq = equaliseTransform(_[attr], to[attr]);\n\t                            if (eq) {\n\t                                from[attr] = eq.from;\n\t                                to[attr] = eq.to;\n\t                                diff[attr] = [];\n\t                                diff[attr].real = true;\n\t                                for (i = 0, ii = from[attr].length; i < ii; i++) {\n\t                                    diff[attr][i] = [from[attr][i][0]];\n\t                                    for (j = 1, jj = from[attr][i].length; j < jj; j++) {\n\t                                        diff[attr][i][j] = (to[attr][i][j] - from[attr][i][j]) / ms;\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                var m = (element.matrix || new Matrix),\n\t                                    to2 = {\n\t                                        _: {transform: _.transform},\n\t                                        getBBox: function () {\n\t                                            return element.getBBox(1);\n\t                                        }\n\t                                    };\n\t                                from[attr] = [\n\t                                    m.a,\n\t                                    m.b,\n\t                                    m.c,\n\t                                    m.d,\n\t                                    m.e,\n\t                                    m.f\n\t                                ];\n\t                                extractTransform(to2, to[attr]);\n\t                                to[attr] = to2._.transform;\n\t                                diff[attr] = [\n\t                                    (to2.matrix.a - m.a) / ms,\n\t                                    (to2.matrix.b - m.b) / ms,\n\t                                    (to2.matrix.c - m.c) / ms,\n\t                                    (to2.matrix.d - m.d) / ms,\n\t                                    (to2.matrix.e - m.e) / ms,\n\t                                    (to2.matrix.f - m.f) / ms\n\t                                ];\n\t                                // from[attr] = [_.sx, _.sy, _.deg, _.dx, _.dy];\n\t                                // var to2 = {_:{}, getBBox: function () { return element.getBBox(); }};\n\t                                // extractTransform(to2, to[attr]);\n\t                                // diff[attr] = [\n\t                                //     (to2._.sx - _.sx) / ms,\n\t                                //     (to2._.sy - _.sy) / ms,\n\t                                //     (to2._.deg - _.deg) / ms,\n\t                                //     (to2._.dx - _.dx) / ms,\n\t                                //     (to2._.dy - _.dy) / ms\n\t                                // ];\n\t                            }\n\t                            break;\n\t                        case \"csv\":\n\t                            var values = Str(params[attr])[split](separator),\n\t                                from2 = Str(from[attr])[split](separator);\n\t                            if (attr == \"clip-rect\") {\n\t                                from[attr] = from2;\n\t                                diff[attr] = [];\n\t                                i = from2.length;\n\t                                while (i--) {\n\t                                    diff[attr][i] = (values[i] - from[attr][i]) / ms;\n\t                                }\n\t                            }\n\t                            to[attr] = values;\n\t                            break;\n\t                        default:\n\t                            values = [][concat](params[attr]);\n\t                            from2 = [][concat](from[attr]);\n\t                            diff[attr] = [];\n\t                            i = element.paper.customAttributes[attr].length;\n\t                            while (i--) {\n\t                                diff[attr][i] = ((values[i] || 0) - (from2[i] || 0)) / ms;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t            }\n\t            var easing = params.easing,\n\t                easyeasy = R.easing_formulas[easing];\n\t            if (!easyeasy) {\n\t                easyeasy = Str(easing).match(bezierrg);\n\t                if (easyeasy && easyeasy.length == 5) {\n\t                    var curve = easyeasy;\n\t                    easyeasy = function (t) {\n\t                        return CubicBezierAtTime(t, +curve[1], +curve[2], +curve[3], +curve[4], ms);\n\t                    };\n\t                } else {\n\t                    easyeasy = pipe;\n\t                }\n\t            }\n\t            timestamp = params.start || anim.start || +new Date;\n\t            e = {\n\t                anim: anim,\n\t                percent: percent,\n\t                timestamp: timestamp,\n\t                start: timestamp + (anim.del || 0),\n\t                status: 0,\n\t                initstatus: status || 0,\n\t                stop: false,\n\t                ms: ms,\n\t                easing: easyeasy,\n\t                from: from,\n\t                diff: diff,\n\t                to: to,\n\t                el: element,\n\t                callback: params.callback,\n\t                prev: prev,\n\t                next: next,\n\t                repeat: times || anim.times,\n\t                origin: element.attr(),\n\t                totalOrigin: totalOrigin\n\t            };\n\t            animationElements.push(e);\n\t            if (status && !isInAnim && !isInAnimSet) {\n\t                e.stop = true;\n\t                e.start = new Date - ms * status;\n\t                if (animationElements.length == 1) {\n\t                    return animation();\n\t                }\n\t            }\n\t            if (isInAnimSet) {\n\t                e.start = new Date - e.ms * status;\n\t            }\n\t            animationElements.length == 1 && requestAnimFrame(animation);\n\t        } else {\n\t            isInAnim.initstatus = status;\n\t            isInAnim.start = new Date - isInAnim.ms * status;\n\t        }\n\t        eve(\"raphael.anim.start.\" + element.id, element, anim);\n\t    }\n\t    /*\\\n\t     * Raphael.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object that can be passed to the @Element.animate or @Element.animateWith methods.\n\t     * See also @Animation.delay and @Animation.repeat methods.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     **\n\t     = (object) @Animation\n\t    \\*/\n\t    R.animation = function (params, ms, easing, callback) {\n\t        if (params instanceof Animation) {\n\t            return params;\n\t        }\n\t        if (R.is(easing, \"function\") || !easing) {\n\t            callback = callback || easing || null;\n\t            easing = null;\n\t        }\n\t        params = Object(params);\n\t        ms = +ms || 0;\n\t        var p = {},\n\t            json,\n\t            attr;\n\t        for (attr in params) if (params[has](attr) && toFloat(attr) != attr && toFloat(attr) + \"%\" != attr) {\n\t            json = true;\n\t            p[attr] = params[attr];\n\t        }\n\t        if (!json) {\n\t            // if percent-like syntax is used and end-of-all animation callback used\n\t            if(callback){\n\t                // find the last one\n\t                var lastKey = 0;\n\t                for(var i in params){\n\t                    var percent = toInt(i);\n\t                    if(params[has](i) && percent > lastKey){\n\t                        lastKey = percent;\n\t                    }\n\t                }\n\t                lastKey += '%';\n\t                // if already defined callback in the last keyframe, skip\n\t                !params[lastKey].callback && (params[lastKey].callback = callback);\n\t            }\n\t          return new Animation(params, ms);\n\t        } else {\n\t            easing && (p.easing = easing);\n\t            callback && (p.callback = callback);\n\t            return new Animation({100: p}, ms);\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Creates and starts animation for given element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - params (object) final attributes for the element, see also @Element.attr\n\t     - ms (number) number of milliseconds for animation to run\n\t     - easing (string) #optional easing type. Accept one of @Raphael.easing_formulas or CSS format: `cubic&#x2010;bezier(XX,&#160;XX,&#160;XX,&#160;XX)`\n\t     - callback (function) #optional callback function. Will be called at the end of animation.\n\t     * or\n\t     - animation (object) animation object, see @Raphael.animation\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.animate = function (params, ms, easing, callback) {\n\t        var element = this;\n\t        if (element.removed) {\n\t            callback && callback.call(element);\n\t            return element;\n\t        }\n\t        var anim = params instanceof Animation ? params : R.animation(params, ms, easing, callback);\n\t        runAnimation(anim, element, anim.percents[0], null, element.attr());\n\t        return element;\n\t    };\n\t    /*\\\n\t     * Element.setTime\n\t     [ method ]\n\t     **\n\t     * Sets the status of animation of the element in milliseconds. Similar to @Element.status method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) animation object\n\t     - value (number) number of milliseconds from the beginning of the animation\n\t     **\n\t     = (object) original element if `value` is specified\n\t     * Note, that during animation following events are triggered:\n\t     *\n\t     * On each animation frame event `anim.frame.<id>`, on start `anim.start.<id>` and on end `anim.finish.<id>`.\n\t    \\*/\n\t    elproto.setTime = function (anim, value) {\n\t        if (anim && value != null) {\n\t            this.status(anim, mmin(value, anim.ms) / anim.ms);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.status\n\t     [ method ]\n\t     **\n\t     * Gets or sets the status of animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     - value (number) #optional 0 – 1. If specified, method works like a setter and sets the status of a given animation to the value. This will cause animation to jump to the given position.\n\t     **\n\t     = (number) status\n\t     * or\n\t     = (array) status if `anim` is not specified. Array of objects in format:\n\t     o {\n\t     o     anim: (object) animation object\n\t     o     status: (number) status\n\t     o }\n\t     * or\n\t     = (object) original element if `value` is specified\n\t    \\*/\n\t    elproto.status = function (anim, value) {\n\t        var out = [],\n\t            i = 0,\n\t            len,\n\t            e;\n\t        if (value != null) {\n\t            runAnimation(anim, this, -1, mmin(value, 1));\n\t            return this;\n\t        } else {\n\t            len = animationElements.length;\n\t            for (; i < len; i++) {\n\t                e = animationElements[i];\n\t                if (e.el.id == this.id && (!anim || e.anim == anim)) {\n\t                    if (anim) {\n\t                        return e.status;\n\t                    }\n\t                    out.push({\n\t                        anim: e.anim,\n\t                        status: e.status\n\t                    });\n\t                }\n\t            }\n\t            if (anim) {\n\t                return 0;\n\t            }\n\t            return out;\n\t        }\n\t    };\n\t    /*\\\n\t     * Element.pause\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element with ability to resume it later on.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.pause = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.pause.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements[i].paused = true;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.resume\n\t     [ method ]\n\t     **\n\t     * Resumes animation if it was paused with @Element.pause method.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.resume = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            var e = animationElements[i];\n\t            if (eve(\"raphael.anim.resume.\" + this.id, this, e.anim) !== false) {\n\t                delete e.paused;\n\t                this.status(e.anim, e.status);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops animation of the element.\n\t     **\n\t     > Parameters\n\t     **\n\t     - anim (object) #optional animation object\n\t     **\n\t     = (object) original element\n\t    \\*/\n\t    elproto.stop = function (anim) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.id == this.id && (!anim || animationElements[i].anim == anim)) {\n\t            if (eve(\"raphael.anim.stop.\" + this.id, this, animationElements[i].anim) !== false) {\n\t                animationElements.splice(i--, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    function stopAnimation(paper) {\n\t        for (var i = 0; i < animationElements.length; i++) if (animationElements[i].el.paper == paper) {\n\t            animationElements.splice(i--, 1);\n\t        }\n\t    }\n\t    eve.on(\"raphael.remove\", stopAnimation);\n\t    eve.on(\"raphael.clear\", stopAnimation);\n\t    elproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2019s object\";\n\t    };\n\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i] && (items[i].constructor == elproto.constructor || items[i].constructor == Set)) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set.\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item && (item.constructor == elproto.constructor || item.constructor == Set)) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it.\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set.\n\t     *\n\t     * If function returns `false` it will stop loop running.\n\t     **\n\t     > Parameters\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    for (var method in elproto) if (elproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname][apply](el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t    setproto.attr = function (name, value) {\n\t        if (name && R.is(name, array) && R.is(name[0], \"object\")) {\n\t            for (var j = 0, jj = name.length; j < jj; j++) {\n\t                this.items[j].attr(name[j]);\n\t            }\n\t        } else {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(name, value);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     > Parameters\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found & removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t    };\n\t    setproto.animate = function (params, ms, easing, callback) {\n\t        (R.is(easing, \"function\") || !easing) && (callback = easing || null);\n\t        var len = this.items.length,\n\t            i = len,\n\t            item,\n\t            set = this,\n\t            collector;\n\t        if (!len) {\n\t            return this;\n\t        }\n\t        callback && (collector = function () {\n\t            !--len && callback.call(set);\n\t        });\n\t        easing = R.is(easing, string) ? easing : collector;\n\t        var anim = R.animation(params, ms, easing, collector);\n\t        item = this.items[--i].animate(anim);\n\t        while (i--) {\n\t            this.items[i] && !this.items[i].removed && this.items[i].animateWith(item, anim, anim);\n\t            (this.items[i] && !this.items[i].removed) || len--;\n\t        }\n\t        return this;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin[apply](0, x);\n\t        y = mmin[apply](0, y);\n\t        x2 = mmax[apply](0, x2);\n\t        y2 = mmax[apply](0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = this.paper.set();\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Rapha\\xebl\\u2018s set\";\n\t    };\n\n\t    setproto.glow = function(glowConfig) {\n\t        var ret = this.paper.set();\n\t        this.forEach(function(shape, index){\n\t            var g = shape.glow(glowConfig);\n\t            if(g != null){\n\t                g.forEach(function(shape2, index2){\n\t                    ret.push(shape2);\n\t                });\n\t            }\n\t        });\n\t        return ret;\n\t    };\n\n\n\t    /*\\\n\t     * Set.isPointInside\n\t     [ method ]\n\t     **\n\t     * Determine if given point is inside this set’s elements\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x coordinate of the point\n\t     - y (number) y coordinate of the point\n\t     = (boolean) `true` if point is inside any of the set's elements\n\t     \\*/\n\t    setproto.isPointInside = function (x, y) {\n\t        var isPointInside = false;\n\t        this.forEach(function (el) {\n\t            if (el.isPointInside(x, y)) {\n\t                isPointInside = true;\n\t                return false; // stop loop\n\t            }\n\t        });\n\t        return isPointInside;\n\t    };\n\n\t    /*\\\n\t     * Raphael.registerFont\n\t     [ method ]\n\t     **\n\t     * Adds given font to the registered set of fonts for Raphaël. Should be used as an internal call from within Cufón’s font file.\n\t     * Returns original parameter, so it could be used with chaining.\n\t     # <a href=\"http://wiki.github.com/sorccu/cufon/about\">More about Cufón and how to convert your font form TTF, OTF, etc to JavaScript file.</a>\n\t     **\n\t     > Parameters\n\t     **\n\t     - font (object) the font to register\n\t     = (object) the font you passed in\n\t     > Usage\n\t     | Cufon.registerFont(Raphael.registerFont({…}));\n\t    \\*/\n\t    R.registerFont = function (font) {\n\t        if (!font.face) {\n\t            return font;\n\t        }\n\t        this.fonts = this.fonts || {};\n\t        var fontcopy = {\n\t                w: font.w,\n\t                face: {},\n\t                glyphs: {}\n\t            },\n\t            family = font.face[\"font-family\"];\n\t        for (var prop in font.face) if (font.face[has](prop)) {\n\t            fontcopy.face[prop] = font.face[prop];\n\t        }\n\t        if (this.fonts[family]) {\n\t            this.fonts[family].push(fontcopy);\n\t        } else {\n\t            this.fonts[family] = [fontcopy];\n\t        }\n\t        if (!font.svg) {\n\t            fontcopy.face[\"units-per-em\"] = toInt(font.face[\"units-per-em\"], 10);\n\t            for (var glyph in font.glyphs) if (font.glyphs[has](glyph)) {\n\t                var path = font.glyphs[glyph];\n\t                fontcopy.glyphs[glyph] = {\n\t                    w: path.w,\n\t                    k: {},\n\t                    d: path.d && \"M\" + path.d.replace(/[mlcxtrv]/g, function (command) {\n\t                            return {l: \"L\", c: \"C\", x: \"z\", t: \"m\", r: \"l\", v: \"c\"}[command] || \"M\";\n\t                        }) + \"z\"\n\t                };\n\t                if (path.k) {\n\t                    for (var k in path.k) if (path[has](k)) {\n\t                        fontcopy.glyphs[glyph].k[k] = path.k[k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return font;\n\t    };\n\t    /*\\\n\t     * Paper.getFont\n\t     [ method ]\n\t     **\n\t     * Finds font object in the registered fonts by given parameters. You could specify only one word from the font name, like “Myriad” for “Myriad Pro”.\n\t     **\n\t     > Parameters\n\t     **\n\t     - family (string) font family name or any word from it\n\t     - weight (string) #optional font weight\n\t     - style (string) #optional font style\n\t     - stretch (string) #optional font stretch\n\t     = (object) the font object\n\t     > Usage\n\t     | paper.print(100, 100, \"Test string\", paper.getFont(\"Times\", 800), 30);\n\t    \\*/\n\t    paperproto.getFont = function (family, weight, style, stretch) {\n\t        stretch = stretch || \"normal\";\n\t        style = style || \"normal\";\n\t        weight = +weight || {normal: 400, bold: 700, lighter: 300, bolder: 800}[weight] || 400;\n\t        if (!R.fonts) {\n\t            return;\n\t        }\n\t        var font = R.fonts[family];\n\t        if (!font) {\n\t            var name = new RegExp(\"(^|\\\\s)\" + family.replace(/[^\\w\\d\\s+!~.:_-]/g, E) + \"(\\\\s|$)\", \"i\");\n\t            for (var fontName in R.fonts) if (R.fonts[has](fontName)) {\n\t                if (name.test(fontName)) {\n\t                    font = R.fonts[fontName];\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        var thefont;\n\t        if (font) {\n\t            for (var i = 0, ii = font.length; i < ii; i++) {\n\t                thefont = font[i];\n\t                if (thefont.face[\"font-weight\"] == weight && (thefont.face[\"font-style\"] == style || !thefont.face[\"font-style\"]) && thefont.face[\"font-stretch\"] == stretch) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return thefont;\n\t    };\n\t    /*\\\n\t     * Paper.print\n\t     [ method ]\n\t     **\n\t     * Creates path that represent given text written using given font at given position with given size.\n\t     * Result of the method is path element that contains whole text as a separate path.\n\t     **\n\t     > Parameters\n\t     **\n\t     - x (number) x position of the text\n\t     - y (number) y position of the text\n\t     - string (string) text to print\n\t     - font (object) font object, see @Paper.getFont\n\t     - size (number) #optional size of the font, default is `16`\n\t     - origin (string) #optional could be `\"baseline\"` or `\"middle\"`, default is `\"middle\"`\n\t     - letter_spacing (number) #optional number in range `-1..1`, default is `0`\n\t     - line_spacing (number) #optional number in range `1..3`, default is `1`\n\t     = (object) resulting path element, which consist of all letters\n\t     > Usage\n\t     | var txt = r.print(10, 50, \"print\", r.getFont(\"Museo\"), 30).attr({fill: \"#fff\"});\n\t    \\*/\n\t    paperproto.print = function (x, y, string, font, size, origin, letter_spacing, line_spacing) {\n\t        origin = origin || \"middle\"; // baseline|middle\n\t        letter_spacing = mmax(mmin(letter_spacing || 0, 1), -1);\n\t        line_spacing = mmax(mmin(line_spacing || 1, 3), 1);\n\t        var letters = Str(string)[split](E),\n\t            shift = 0,\n\t            notfirst = 0,\n\t            path = E,\n\t            scale;\n\t        R.is(font, \"string\") && (font = this.getFont(font));\n\t        if (font) {\n\t            scale = (size || 16) / font.face[\"units-per-em\"];\n\t            var bb = font.face.bbox[split](separator),\n\t                top = +bb[0],\n\t                lineHeight = bb[3] - bb[1],\n\t                shifty = 0,\n\t                height = +bb[1] + (origin == \"baseline\" ? lineHeight + (+font.face.descent) : lineHeight / 2);\n\t            for (var i = 0, ii = letters.length; i < ii; i++) {\n\t                if (letters[i] == \"\\n\") {\n\t                    shift = 0;\n\t                    curr = 0;\n\t                    notfirst = 0;\n\t                    shifty += lineHeight * line_spacing;\n\t                } else {\n\t                    var prev = notfirst && font.glyphs[letters[i - 1]] || {},\n\t                        curr = font.glyphs[letters[i]];\n\t                    shift += notfirst ? (prev.w || font.w) + (prev.k && prev.k[letters[i]] || 0) + (font.w * letter_spacing) : 0;\n\t                    notfirst = 1;\n\t                }\n\t                if (curr && curr.d) {\n\t                    path += R.transformPath(curr.d, [\"t\", shift * scale, shifty * scale, \"s\", scale, scale, top, height, \"t\", (x - top) / scale, (y - height) / scale]);\n\t                }\n\t            }\n\t        }\n\t        return this.path(path).attr({\n\t            fill: \"#000\",\n\t            stroke: \"none\"\n\t        });\n\t    };\n\n\t    /*\\\n\t     * Paper.add\n\t     [ method ]\n\t     **\n\t     * Imports elements in JSON array in format `{type: type, <attributes>}`\n\t     **\n\t     > Parameters\n\t     **\n\t     - json (array)\n\t     = (object) resulting set of imported elements\n\t     > Usage\n\t     | paper.add([\n\t     |     {\n\t     |         type: \"circle\",\n\t     |         cx: 10,\n\t     |         cy: 10,\n\t     |         r: 5\n\t     |     },\n\t     |     {\n\t     |         type: \"rect\",\n\t     |         x: 10,\n\t     |         y: 10,\n\t     |         width: 10,\n\t     |         height: 10,\n\t     |         fill: \"#fc0\"\n\t     |     }\n\t     | ]);\n\t    \\*/\n\t    paperproto.add = function (json) {\n\t        if (R.is(json, \"array\")) {\n\t            var res = this.set(),\n\t                i = 0,\n\t                ii = json.length,\n\t                j;\n\t            for (; i < ii; i++) {\n\t                j = json[i] || {};\n\t                elements[has](j.type) && res.push(this[j.type]().attr(j));\n\t            }\n\t        }\n\t        return res;\n\t    };\n\n\t    /*\\\n\t     * Raphael.format\n\t     [ method ]\n\t     **\n\t     * Simple format function. Replaces construction of type “`{<number>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - … (string) rest of arguments will be treated as parameters for replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | var x = 10,\n\t     |     y = 20,\n\t     |     width = 40,\n\t     |     height = 50;\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.format(\"M{0},{1}h{2}v{3}h{4}z\", x, y, width, height, -width));\n\t    \\*/\n\t    R.format = function (token, params) {\n\t        var args = R.is(params, array) ? [0][concat](params) : arguments;\n\t        token && R.is(token, string) && args.length - 1 && (token = token.replace(formatrg, function (str, i) {\n\t            return args[++i] == null ? E : args[i];\n\t        }));\n\t        return token || E;\n\t    };\n\t    /*\\\n\t     * Raphael.fullfill\n\t     [ method ]\n\t     **\n\t     * A little bit more advanced format function than @Raphael.format. Replaces construction of type “`{<name>}`” to the corresponding argument.\n\t     **\n\t     > Parameters\n\t     **\n\t     - token (string) string to format\n\t     - json (object) object which properties will be used as a replacement\n\t     = (string) formated string\n\t     > Usage\n\t     | // this will draw a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t     | paper.path(Raphael.fullfill(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t     |     x: 10,\n\t     |     y: 20,\n\t     |     dim: {\n\t     |         width: 40,\n\t     |         height: 50,\n\t     |         \"negative width\": -40\n\t     |     }\n\t     | }));\n\t    \\*/\n\t    R.fullfill = (function () {\n\t        var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t            objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function (all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t        return function (str, obj) {\n\t            return String(str).replace(tokenRegex, function (all, key) {\n\t                return replacer(all, key, obj);\n\t            });\n\t        };\n\t    })();\n\t    /*\\\n\t     * Raphael.ninja\n\t     [ method ]\n\t     **\n\t     * If you want to leave no trace of Raphaël (Well, Raphaël creates only one global variable `Raphael`, but anyway.) You can use `ninja` method.\n\t     * Beware, that in this case plugins could stop working, because they are depending on global variable existence.\n\t     **\n\t     = (object) Raphael object\n\t     > Usage\n\t     | (function (local_raphael) {\n\t     |     var paper = local_raphael(10, 10, 320, 200);\n\t     |     …\n\t     | })(Raphael.ninja());\n\t    \\*/\n\t    R.ninja = function () {\n\t        if (oldRaphael.was) {\n\t            g.win.Raphael = oldRaphael.is;\n\t        } else {\n\t            // IE8 raises an error when deleting window property\n\t            window.Raphael = undefined;\n\t            try {\n\t                delete window.Raphael;\n\t            } catch(e) {}\n\t        }\n\t        return R;\n\t    };\n\t    /*\\\n\t     * Raphael.st\n\t     [ property (object) ]\n\t     **\n\t     * You can add your own method to elements and sets. It is wise to add a set method for each element method\n\t     * you added, so you will be able to call the same method on sets too.\n\t     **\n\t     * See also @Raphael.el.\n\t     > Usage\n\t     | Raphael.el.red = function () {\n\t     |     this.attr({fill: \"#f00\"});\n\t     | };\n\t     | Raphael.st.red = function () {\n\t     |     this.forEach(function (el) {\n\t     |         el.red();\n\t     |     });\n\t     | };\n\t     | // then use it\n\t     | paper.set(paper.circle(100, 100, 20), paper.circle(110, 100, 20)).red();\n\t    \\*/\n\t    R.st = setproto;\n\n\t    eve.on(\"raphael.DOMload\", function () {\n\t        loaded = true;\n\t    });\n\n\t    // Firefox <3.6 fix: http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n\t    (function (doc, loaded, f) {\n\t        if (doc.readyState == null && doc.addEventListener){\n\t            doc.addEventListener(loaded, f = function () {\n\t                doc.removeEventListener(loaded, f, false);\n\t                doc.readyState = \"complete\";\n\t            }, false);\n\t            doc.readyState = \"loading\";\n\t        }\n\t        function isLoaded() {\n\t            (/in/).test(doc.readyState) ? setTimeout(isLoaded, 9) : R.eve(\"raphael.DOMload\");\n\t        }\n\t        isLoaded();\n\t    })(document, \"DOMContentLoaded\");\n\n\t    return R;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t        };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\n\t     * Fires event with given `name`, given scope and other parameters.\n\n\t     > Arguments\n\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n\t     > Arguments\n\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\n\t     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\n\t     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.svg) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        toInt = parseInt,\n\t        math = Math,\n\t        mmax = math.max,\n\t        abs = math.abs,\n\t        pow = math.pow,\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        E = \"\",\n\t        S = \" \";\n\t    var xlink = \"http://www.w3.org/1999/xlink\",\n\t        markers = {\n\t            block: \"M5,0 0,2.5 5,5z\",\n\t            classic: \"M5,0 0,2.5 5,5 3.5,3 3.5,2z\",\n\t            diamond: \"M2.5,0 5,2.5 2.5,5 0,2.5z\",\n\t            open: \"M6,1 1,3.5 6,6\",\n\t            oval: \"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z\"\n\t        },\n\t        markerCounter = {};\n\t    R.toString = function () {\n\t        return  \"Your browser supports SVG.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var $ = function (el, attr) {\n\t        if (attr) {\n\t            if (typeof el == \"string\") {\n\t                el = $(el);\n\t            }\n\t            for (var key in attr) if (attr[has](key)) {\n\t                if (key.substring(0, 6) == \"xlink:\") {\n\t                    el.setAttributeNS(xlink, key.substring(6), Str(attr[key]));\n\t                } else {\n\t                    el.setAttribute(key, Str(attr[key]));\n\t                }\n\t            }\n\t        } else {\n\t            el = R._g.doc.createElementNS(\"http://www.w3.org/2000/svg\", el);\n\t            el.style && (el.style.webkitTapHighlightColor = \"rgba(0,0,0,0)\");\n\t        }\n\t        return el;\n\t    },\n\t    addGradientFill = function (element, gradient) {\n\t        var type = \"linear\",\n\t            id = element.id + gradient,\n\t            fx = .5, fy = .5,\n\t            o = element.node,\n\t            SVG = element.paper,\n\t            s = o.style,\n\t            el = R._g.doc.getElementById(id);\n\t        if (!el) {\n\t            gradient = Str(gradient).replace(R._radial_gradient, function (all, _fx, _fy) {\n\t                type = \"radial\";\n\t                if (_fx && _fy) {\n\t                    fx = toFloat(_fx);\n\t                    fy = toFloat(_fy);\n\t                    var dir = ((fy > .5) * 2 - 1);\n\t                    pow(fx - .5, 2) + pow(fy - .5, 2) > .25 &&\n\t                        (fy = math.sqrt(.25 - pow(fx - .5, 2)) * dir + .5) &&\n\t                        fy != .5 &&\n\t                        (fy = fy.toFixed(5) - 1e-5 * dir);\n\t                }\n\t                return E;\n\t            });\n\t            gradient = gradient.split(/\\s*\\-\\s*/);\n\t            if (type == \"linear\") {\n\t                var angle = gradient.shift();\n\t                angle = -toFloat(angle);\n\t                if (isNaN(angle)) {\n\t                    return null;\n\t                }\n\t                var vector = [0, 0, math.cos(R.rad(angle)), math.sin(R.rad(angle))],\n\t                    max = 1 / (mmax(abs(vector[2]), abs(vector[3])) || 1);\n\t                vector[2] *= max;\n\t                vector[3] *= max;\n\t                if (vector[2] < 0) {\n\t                    vector[0] = -vector[2];\n\t                    vector[2] = 0;\n\t                }\n\t                if (vector[3] < 0) {\n\t                    vector[1] = -vector[3];\n\t                    vector[3] = 0;\n\t                }\n\t            }\n\t            var dots = R._parseDots(gradient);\n\t            if (!dots) {\n\t                return null;\n\t            }\n\t            id = id.replace(/[\\(\\)\\s,\\xb0#]/g, \"_\");\n\n\t            if (element.gradient && id != element.gradient.id) {\n\t                SVG.defs.removeChild(element.gradient);\n\t                delete element.gradient;\n\t            }\n\n\t            if (!element.gradient) {\n\t                el = $(type + \"Gradient\", {id: id});\n\t                element.gradient = el;\n\t                $(el, type == \"radial\" ? {\n\t                    fx: fx,\n\t                    fy: fy\n\t                } : {\n\t                    x1: vector[0],\n\t                    y1: vector[1],\n\t                    x2: vector[2],\n\t                    y2: vector[3],\n\t                    gradientTransform: element.matrix.invert()\n\t                });\n\t                SVG.defs.appendChild(el);\n\t                for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                    el.appendChild($(\"stop\", {\n\t                        offset: dots[i].offset ? dots[i].offset : i ? \"100%\" : \"0%\",\n\t                        \"stop-color\": dots[i].color || \"#fff\",\n\t                        \"stop-opacity\": isFinite(dots[i].opacity) ? dots[i].opacity : 1\n\t                    }));\n\t                }\n\t            }\n\t        }\n\t        $(o, {\n\t            fill: fillurl(id),\n\t            opacity: 1,\n\t            \"fill-opacity\": 1\n\t        });\n\t        s.fill = E;\n\t        s.opacity = 1;\n\t        s.fillOpacity = 1;\n\t        return 1;\n\t    },\n\t    isIE9or10 = function () {\n\t      var mode = document.documentMode;\n\t      return mode && (mode === 9 || mode === 10);\n\t    },\n\t    fillurl = function (id) {\n\t      if (isIE9or10()) {\n\t          return \"url('#\" + id + \"')\";\n\t      }\n\t      var location = document.location;\n\t      var locationString = (\n\t          location.protocol + '//' +\n\t          location.host +\n\t          location.pathname +\n\t          location.search\n\t      );\n\t      return \"url('\" + locationString + \"#\" + id + \"')\";\n\t    },\n\t    updatePosition = function (o) {\n\t        var bbox = o.getBBox(1);\n\t        $(o.pattern, {patternTransform: o.matrix.invert() + \" translate(\" + bbox.x + \",\" + bbox.y + \")\"});\n\t    },\n\t    addArrow = function (o, value, isEnd) {\n\t        if (o.type == \"path\") {\n\t            var values = Str(value).toLowerCase().split(\"-\"),\n\t                p = o.paper,\n\t                se = isEnd ? \"end\" : \"start\",\n\t                node = o.node,\n\t                attrs = o.attrs,\n\t                stroke = attrs[\"stroke-width\"],\n\t                i = values.length,\n\t                type = \"classic\",\n\t                from,\n\t                to,\n\t                dx,\n\t                refX,\n\t                attr,\n\t                w = 3,\n\t                h = 3,\n\t                t = 5;\n\t            while (i--) {\n\t                switch (values[i]) {\n\t                    case \"block\":\n\t                    case \"classic\":\n\t                    case \"oval\":\n\t                    case \"diamond\":\n\t                    case \"open\":\n\t                    case \"none\":\n\t                        type = values[i];\n\t                        break;\n\t                    case \"wide\": h = 5; break;\n\t                    case \"narrow\": h = 2; break;\n\t                    case \"long\": w = 5; break;\n\t                    case \"short\": w = 2; break;\n\t                }\n\t            }\n\t            if (type == \"open\") {\n\t                w += 2;\n\t                h += 2;\n\t                t += 2;\n\t                dx = 1;\n\t                refX = isEnd ? 4 : 1;\n\t                attr = {\n\t                    fill: \"none\",\n\t                    stroke: attrs.stroke\n\t                };\n\t            } else {\n\t                refX = dx = w / 2;\n\t                attr = {\n\t                    fill: attrs.stroke,\n\t                    stroke: \"none\"\n\t                };\n\t            }\n\t            if (o._.arrows) {\n\t                if (isEnd) {\n\t                    o._.arrows.endPath && markerCounter[o._.arrows.endPath]--;\n\t                    o._.arrows.endMarker && markerCounter[o._.arrows.endMarker]--;\n\t                } else {\n\t                    o._.arrows.startPath && markerCounter[o._.arrows.startPath]--;\n\t                    o._.arrows.startMarker && markerCounter[o._.arrows.startMarker]--;\n\t                }\n\t            } else {\n\t                o._.arrows = {};\n\t            }\n\t            if (type != \"none\") {\n\t                var pathId = \"raphael-marker-\" + type,\n\t                    markerId = \"raphael-marker-\" + se + type + w + h + \"-obj\" + o.id;\n\t                if (!R._g.doc.getElementById(pathId)) {\n\t                    p.defs.appendChild($($(\"path\"), {\n\t                        \"stroke-linecap\": \"round\",\n\t                        d: markers[type],\n\t                        id: pathId\n\t                    }));\n\t                    markerCounter[pathId] = 1;\n\t                } else {\n\t                    markerCounter[pathId]++;\n\t                }\n\t                var marker = R._g.doc.getElementById(markerId),\n\t                    use;\n\t                if (!marker) {\n\t                    marker = $($(\"marker\"), {\n\t                        id: markerId,\n\t                        markerHeight: h,\n\t                        markerWidth: w,\n\t                        orient: \"auto\",\n\t                        refX: refX,\n\t                        refY: h / 2\n\t                    });\n\t                    use = $($(\"use\"), {\n\t                        \"xlink:href\": \"#\" + pathId,\n\t                        transform: (isEnd ? \"rotate(180 \" + w / 2 + \" \" + h / 2 + \") \" : E) + \"scale(\" + w / t + \",\" + h / t + \")\",\n\t                        \"stroke-width\": (1 / ((w / t + h / t) / 2)).toFixed(4)\n\t                    });\n\t                    marker.appendChild(use);\n\t                    p.defs.appendChild(marker);\n\t                    markerCounter[markerId] = 1;\n\t                } else {\n\t                    markerCounter[markerId]++;\n\t                    use = marker.getElementsByTagName(\"use\")[0];\n\t                }\n\t                $(use, attr);\n\t                var delta = dx * (type != \"diamond\" && type != \"oval\");\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - delta * stroke;\n\t                } else {\n\t                    from = delta * stroke;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                attr = {};\n\t                attr[\"marker-\" + se] = \"url(#\" + markerId + \")\";\n\t                if (to || from) {\n\t                    attr.d = R.getSubpath(attrs.path, from, to);\n\t                }\n\t                $(node, attr);\n\t                o._.arrows[se + \"Path\"] = pathId;\n\t                o._.arrows[se + \"Marker\"] = markerId;\n\t                o._.arrows[se + \"dx\"] = delta;\n\t                o._.arrows[se + \"Type\"] = type;\n\t                o._.arrows[se + \"String\"] = value;\n\t            } else {\n\t                if (isEnd) {\n\t                    from = o._.arrows.startdx * stroke || 0;\n\t                    to = R.getTotalLength(attrs.path) - from;\n\t                } else {\n\t                    from = 0;\n\t                    to = R.getTotalLength(attrs.path) - (o._.arrows.enddx * stroke || 0);\n\t                }\n\t                o._.arrows[se + \"Path\"] && $(node, {d: R.getSubpath(attrs.path, from, to)});\n\t                delete o._.arrows[se + \"Path\"];\n\t                delete o._.arrows[se + \"Marker\"];\n\t                delete o._.arrows[se + \"dx\"];\n\t                delete o._.arrows[se + \"Type\"];\n\t                delete o._.arrows[se + \"String\"];\n\t            }\n\t            for (attr in markerCounter) if (markerCounter[has](attr) && !markerCounter[attr]) {\n\t                var item = R._g.doc.getElementById(attr);\n\t                item && item.parentNode.removeChild(item);\n\t            }\n\t        }\n\t    },\n\t    dasharray = {\n\t        \"-\": [3, 1],\n\t        \".\": [1, 1],\n\t        \"-.\": [3, 1, 1, 1],\n\t        \"-..\": [3, 1, 1, 1, 1, 1],\n\t        \". \": [1, 3],\n\t        \"- \": [4, 3],\n\t        \"--\": [8, 3],\n\t        \"- .\": [4, 3, 1, 3],\n\t        \"--.\": [8, 3, 1, 3],\n\t        \"--..\": [8, 3, 1, 3, 1, 3]\n\t    },\n\t    addDashes = function (o, value, params) {\n\t        value = dasharray[Str(value).toLowerCase()];\n\t        if (value) {\n\t            var width = o.attrs[\"stroke-width\"] || \"1\",\n\t                butt = {round: width, square: width, butt: 0}[o.attrs[\"stroke-linecap\"] || params[\"stroke-linecap\"]] || 0,\n\t                dashes = [],\n\t                i = value.length;\n\t            while (i--) {\n\t                dashes[i] = value[i] * width + ((i % 2) ? 1 : -1) * butt;\n\t            }\n\t            $(o.node, {\"stroke-dasharray\": dashes.join(\",\")});\n\t        }\n\t        else {\n\t          $(o.node, {\"stroke-dasharray\": \"none\"});\n\t        }\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        var node = o.node,\n\t            attrs = o.attrs,\n\t            vis = node.style.visibility;\n\t        node.style.visibility = \"hidden\";\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                if (!R._availableAttrs[has](att)) {\n\t                    continue;\n\t                }\n\t                var value = params[att];\n\t                attrs[att] = value;\n\t                switch (att) {\n\t                    case \"blur\":\n\t                        o.blur(value);\n\t                        break;\n\t                    case \"title\":\n\t                        var title = node.getElementsByTagName(\"title\");\n\n\t                        // Use the existing <title>.\n\t                        if (title.length && (title = title[0])) {\n\t                          title.firstChild.nodeValue = value;\n\t                        } else {\n\t                          title = $(\"title\");\n\t                          var val = R._g.doc.createTextNode(value);\n\t                          title.appendChild(val);\n\t                          node.appendChild(title);\n\t                        }\n\t                        break;\n\t                    case \"href\":\n\t                    case \"target\":\n\t                        var pn = node.parentNode;\n\t                        if (pn.tagName.toLowerCase() != \"a\") {\n\t                            var hl = $(\"a\");\n\t                            pn.insertBefore(hl, node);\n\t                            hl.appendChild(node);\n\t                            pn = hl;\n\t                        }\n\t                        if (att == \"target\") {\n\t                            pn.setAttributeNS(xlink, \"show\", value == \"blank\" ? \"new\" : value);\n\t                        } else {\n\t                            pn.setAttributeNS(xlink, att, value);\n\t                        }\n\t                        break;\n\t                    case \"cursor\":\n\t                        node.style.cursor = value;\n\t                        break;\n\t                    case \"transform\":\n\t                        o.transform(value);\n\t                        break;\n\t                    case \"arrow-start\":\n\t                        addArrow(o, value);\n\t                        break;\n\t                    case \"arrow-end\":\n\t                        addArrow(o, value, 1);\n\t                        break;\n\t                    case \"clip-rect\":\n\t                        var rect = Str(value).split(separator);\n\t                        if (rect.length == 4) {\n\t                            o.clip && o.clip.parentNode.parentNode.removeChild(o.clip.parentNode);\n\t                            var el = $(\"clipPath\"),\n\t                                rc = $(\"rect\");\n\t                            el.id = R.createUUID();\n\t                            $(rc, {\n\t                                x: rect[0],\n\t                                y: rect[1],\n\t                                width: rect[2],\n\t                                height: rect[3]\n\t                            });\n\t                            el.appendChild(rc);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {\"clip-path\": \"url(#\" + el.id + \")\"});\n\t                            o.clip = rc;\n\t                        }\n\t                        if (!value) {\n\t                            var path = node.getAttribute(\"clip-path\");\n\t                            if (path) {\n\t                                var clip = R._g.doc.getElementById(path.replace(/(^url\\(#|\\)$)/g, E));\n\t                                clip && clip.parentNode.removeChild(clip);\n\t                                $(node, {\"clip-path\": E});\n\t                                delete o.clip;\n\t                            }\n\t                        }\n\t                    break;\n\t                    case \"path\":\n\t                        if (o.type == \"path\") {\n\t                            $(node, {d: value ? attrs.path = R._pathToAbsolute(value) : \"M0,0\"});\n\t                            o._.dirty = 1;\n\t                            if (o._.arrows) {\n\t                                \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                                \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                            }\n\t                        }\n\t                        break;\n\t                    case \"width\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fx) {\n\t                            att = \"x\";\n\t                            value = attrs.x;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"x\":\n\t                        if (attrs.fx) {\n\t                            value = -attrs.x - (attrs.width || 0);\n\t                        }\n\t                    case \"rx\":\n\t                        if (att == \"rx\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cx\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"height\":\n\t                        node.setAttribute(att, value);\n\t                        o._.dirty = 1;\n\t                        if (attrs.fy) {\n\t                            att = \"y\";\n\t                            value = attrs.y;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    case \"y\":\n\t                        if (attrs.fy) {\n\t                            value = -attrs.y - (attrs.height || 0);\n\t                        }\n\t                    case \"ry\":\n\t                        if (att == \"ry\" && o.type == \"rect\") {\n\t                            break;\n\t                        }\n\t                    case \"cy\":\n\t                        node.setAttribute(att, value);\n\t                        o.pattern && updatePosition(o);\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"r\":\n\t                        if (o.type == \"rect\") {\n\t                            $(node, {rx: value, ry: value});\n\t                        } else {\n\t                            node.setAttribute(att, value);\n\t                        }\n\t                        o._.dirty = 1;\n\t                        break;\n\t                    case \"src\":\n\t                        if (o.type == \"image\") {\n\t                            node.setAttributeNS(xlink, \"href\", value);\n\t                        }\n\t                        break;\n\t                    case \"stroke-width\":\n\t                        if (o._.sx != 1 || o._.sy != 1) {\n\t                            value /= mmax(abs(o._.sx), abs(o._.sy)) || 1;\n\t                        }\n\t                        node.setAttribute(att, value);\n\t                        if (attrs[\"stroke-dasharray\"]) {\n\t                            addDashes(o, attrs[\"stroke-dasharray\"], params);\n\t                        }\n\t                        if (o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"stroke-dasharray\":\n\t                        addDashes(o, value, params);\n\t                        break;\n\t                    case \"fill\":\n\t                        var isURL = Str(value).match(R._ISURL);\n\t                        if (isURL) {\n\t                            el = $(\"pattern\");\n\t                            var ig = $(\"image\");\n\t                            el.id = R.createUUID();\n\t                            $(el, {x: 0, y: 0, patternUnits: \"userSpaceOnUse\", height: 1, width: 1});\n\t                            $(ig, {x: 0, y: 0, \"xlink:href\": isURL[1]});\n\t                            el.appendChild(ig);\n\n\t                            (function (el) {\n\t                                R._preload(isURL[1], function () {\n\t                                    var w = this.offsetWidth,\n\t                                        h = this.offsetHeight;\n\t                                    $(el, {width: w, height: h});\n\t                                    $(ig, {width: w, height: h});\n\t                                });\n\t                            })(el);\n\t                            o.paper.defs.appendChild(el);\n\t                            $(node, {fill: \"url(#\" + el.id + \")\"});\n\t                            o.pattern = el;\n\t                            o.pattern && updatePosition(o);\n\t                            break;\n\t                        }\n\t                        var clr = R.getRGB(value);\n\t                        if (!clr.error) {\n\t                            delete params.gradient;\n\t                            delete attrs.gradient;\n\t                            !R.is(attrs.opacity, \"undefined\") &&\n\t                                R.is(params.opacity, \"undefined\") &&\n\t                                $(node, {opacity: attrs.opacity});\n\t                            !R.is(attrs[\"fill-opacity\"], \"undefined\") &&\n\t                                R.is(params[\"fill-opacity\"], \"undefined\") &&\n\t                                $(node, {\"fill-opacity\": attrs[\"fill-opacity\"]});\n\t                        } else if ((o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value)) {\n\t                            if (\"opacity\" in attrs || \"fill-opacity\" in attrs) {\n\t                                var gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                                if (gradient) {\n\t                                    var stops = gradient.getElementsByTagName(\"stop\");\n\t                                    $(stops[stops.length - 1], {\"stop-opacity\": (\"opacity\" in attrs ? attrs.opacity : 1) * (\"fill-opacity\" in attrs ? attrs[\"fill-opacity\"] : 1)});\n\t                                }\n\t                            }\n\t                            attrs.gradient = value;\n\t                            attrs.fill = \"none\";\n\t                            break;\n\t                        }\n\t                        clr[has](\"opacity\") && $(node, {\"fill-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                    case \"stroke\":\n\t                        clr = R.getRGB(value);\n\t                        node.setAttribute(att, clr.hex);\n\t                        att == \"stroke\" && clr[has](\"opacity\") && $(node, {\"stroke-opacity\": clr.opacity > 1 ? clr.opacity / 100 : clr.opacity});\n\t                        if (att == \"stroke\" && o._.arrows) {\n\t                            \"startString\" in o._.arrows && addArrow(o, o._.arrows.startString);\n\t                            \"endString\" in o._.arrows && addArrow(o, o._.arrows.endString, 1);\n\t                        }\n\t                        break;\n\t                    case \"gradient\":\n\t                        (o.type == \"circle\" || o.type == \"ellipse\" || Str(value).charAt() != \"r\") && addGradientFill(o, value);\n\t                        break;\n\t                    case \"opacity\":\n\t                        if (attrs.gradient && !attrs[has](\"stroke-opacity\")) {\n\t                            $(node, {\"stroke-opacity\": value > 1 ? value / 100 : value});\n\t                        }\n\t                        // fall\n\t                    case \"fill-opacity\":\n\t                        if (attrs.gradient) {\n\t                            gradient = R._g.doc.getElementById(node.getAttribute(\"fill\").replace(/^url\\(#|\\)$/g, E));\n\t                            if (gradient) {\n\t                                stops = gradient.getElementsByTagName(\"stop\");\n\t                                $(stops[stops.length - 1], {\"stop-opacity\": value});\n\t                            }\n\t                            break;\n\t                        }\n\t                    default:\n\t                        att == \"font-size\" && (value = toInt(value, 10) + \"px\");\n\t                        var cssrule = att.replace(/(\\-.)/g, function (w) {\n\t                            return w.substring(1).toUpperCase();\n\t                        });\n\t                        node.style[cssrule] = value;\n\t                        o._.dirty = 1;\n\t                        node.setAttribute(att, value);\n\t                        break;\n\t                }\n\t            }\n\t        }\n\n\t        tuneText(o, params);\n\t        node.style.visibility = vis;\n\t    },\n\t    leading = 1.2,\n\t    tuneText = function (el, params) {\n\t        if (el.type != \"text\" || !(params[has](\"text\") || params[has](\"font\") || params[has](\"font-size\") || params[has](\"x\") || params[has](\"y\"))) {\n\t            return;\n\t        }\n\t        var a = el.attrs,\n\t            node = el.node,\n\t            fontSize = node.firstChild ? toInt(R._g.doc.defaultView.getComputedStyle(node.firstChild, E).getPropertyValue(\"font-size\"), 10) : 10;\n\n\t        if (params[has](\"text\")) {\n\t            a.text = params.text;\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var texts = Str(params.text).split(\"\\n\"),\n\t                tspans = [],\n\t                tspan;\n\t            for (var i = 0, ii = texts.length; i < ii; i++) {\n\t                tspan = $(\"tspan\");\n\t                i && $(tspan, {dy: fontSize * leading, x: a.x});\n\t                tspan.appendChild(R._g.doc.createTextNode(texts[i]));\n\t                node.appendChild(tspan);\n\t                tspans[i] = tspan;\n\t            }\n\t        } else {\n\t            tspans = node.getElementsByTagName(\"tspan\");\n\t            for (i = 0, ii = tspans.length; i < ii; i++) if (i) {\n\t                $(tspans[i], {dy: fontSize * leading, x: a.x});\n\t            } else {\n\t                $(tspans[0], {dy: 0});\n\t            }\n\t        }\n\t        $(node, {x: a.x, y: a.y});\n\t        el._.dirty = 1;\n\t        var bb = el._getBBox(),\n\t            dif = a.y - (bb.y + bb.height / 2);\n\t        dif && R.is(dif, \"finite\") && $(tspans[0], {dy: dif});\n\t    },\n\t    getRealNode = function (node) {\n\t        if (node.parentNode && node.parentNode.tagName.toLowerCase() === \"a\") {\n\t            return node.parentNode;\n\t        } else {\n\t            return node;\n\t        }\n\t    },\n\t    Element = function (node, svg) {\n\t        var X = 0,\n\t            Y = 0;\n\t        /*\\\n\t         * Element.node\n\t         [ property (object) ]\n\t         **\n\t         * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t         **\n\t         * Note: Don’t mess with it.\n\t         > Usage\n\t         | // draw a circle at coordinate 10,10 with radius of 10\n\t         | var c = paper.circle(10, 10, 10);\n\t         | c.node.onclick = function () {\n\t         |     c.attr(\"fill\", \"red\");\n\t         | };\n\t        \\*/\n\t        this[0] = this.node = node;\n\t        /*\\\n\t         * Element.raphael\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to @Raphael object. In case it is not available.\n\t         > Usage\n\t         | Raphael.el.red = function () {\n\t         |     var hsb = this.paper.raphael.rgb2hsb(this.attr(\"fill\"));\n\t         |     hsb.h = 1;\n\t         |     this.attr({fill: this.paper.raphael.hsb2rgb(hsb).hex});\n\t         | }\n\t        \\*/\n\t        node.raphael = true;\n\t        /*\\\n\t         * Element.id\n\t         [ property (number) ]\n\t         **\n\t         * Unique id of the element. Especially useful when you want to listen to events of the element,\n\t         * because all events are fired in format `<module>.<action>.<id>`. Also useful for @Paper.getById method.\n\t        \\*/\n\t        this.id = guid();\n\t        node.raphaelid = this.id;\n\n\t        /**\n\t        * Method that returns a 5 letter/digit id, enough for 36^5 = 60466176 elements\n\t        * @returns {string} id\n\t        */\n\t        function guid() {\n\t            return (\"0000\" + (Math.random()*Math.pow(36,5) << 0).toString(36)).slice(-5);\n\t        }\n\n\t        this.matrix = R.matrix();\n\t        this.realPath = null;\n\t        /*\\\n\t         * Element.paper\n\t         [ property (object) ]\n\t         **\n\t         * Internal reference to “paper” where object drawn. Mainly for use in plugins and element extensions.\n\t         > Usage\n\t         | Raphael.el.cross = function () {\n\t         |     this.attr({fill: \"red\"});\n\t         |     this.paper.path(\"M10,10L50,50M50,10L10,50\")\n\t         |         .attr({stroke: \"red\"});\n\t         | }\n\t        \\*/\n\t        this.paper = svg;\n\t        this.attrs = this.attrs || {};\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            deg: 0,\n\t            dx: 0,\n\t            dy: 0,\n\t            dirty: 1\n\t        };\n\t        !svg.bottom && (svg.bottom = this);\n\t        /*\\\n\t         * Element.prev\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the previous element in the hierarchy.\n\t        \\*/\n\t        this.prev = svg.top;\n\t        svg.top && (svg.top.next = this);\n\t        svg.top = this;\n\t        /*\\\n\t         * Element.next\n\t         [ property (object) ]\n\t         **\n\t         * Reference to the next element in the hierarchy.\n\t        \\*/\n\t        this.next = null;\n\t    },\n\t    elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\n\t    R._engine.path = function (pathString, SVG) {\n\t        var el = $(\"path\");\n\t        SVG.canvas && SVG.canvas.appendChild(el);\n\t        var p = new Element(el, SVG);\n\t        p.type = \"path\";\n\t        setFillAndStroke(p, {\n\t            fill: \"none\",\n\t            stroke: \"#000\",\n\t            path: pathString\n\t        });\n\t        return p;\n\t    };\n\t    /*\\\n\t     * Element.rotate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds rotation by given angle around given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - deg (number) angle in degrees\n\t     - cx (number) #optional x coordinate of the centre of rotation\n\t     - cy (number) #optional y coordinate of the centre of rotation\n\t     * If cx & cy aren’t specified centre of the shape is used as a point of rotation.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.scale\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds scale by given amount relative to given point to the list of\n\t     * transformations of the element.\n\t     > Parameters\n\t     - sx (number) horisontal scale amount\n\t     - sy (number) vertical scale amount\n\t     - cx (number) #optional x coordinate of the centre of scale\n\t     - cy (number) #optional y coordinate of the centre of scale\n\t     * If cx & cy aren’t specified centre of the shape is used instead.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.translate\n\t     [ method ]\n\t     **\n\t     * Deprecated! Use @Element.transform instead.\n\t     * Adds translation by given amount to the list of transformations of the element.\n\t     > Parameters\n\t     - dx (number) horisontal shift\n\t     - dy (number) vertical shift\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Adds transformation to the element which is separate to other attributes,\n\t     * i.e. translation doesn’t change `x` or `y` of the rectange. The format\n\t     * of transformation string is similar to the path string syntax:\n\t     | \"t100,100r30,100,100s2,2,100,100r45s1.5\"\n\t     * Each letter is a command. There are four commands: `t` is for translate, `r` is for rotate, `s` is for\n\t     * scale and `m` is for matrix.\n\t     *\n\t     * There are also alternative “absolute” translation, rotation and scale: `T`, `R` and `S`. They will not take previous transformation into account. For example, `...T100,0` will always move element 100 px horisontally, while `...t100,0` could move it vertically if there is `r90` before. Just compare results of `r90t100,0` and `r90T100,0`.\n\t     *\n\t     * So, the example line above could be read like “translate by 100, 100; rotate 30° around 100, 100; scale twice around 100, 100;\n\t     * rotate 45° around centre; scale 1.5 times relative to centre”. As you can see rotate and scale commands have origin\n\t     * coordinates as optional parameters, the default is the centre point of the element.\n\t     * Matrix accepts six parameters.\n\t     > Usage\n\t     | var el = paper.rect(10, 20, 300, 200);\n\t     | // translate 100, 100, rotate 45°, translate -100, 0\n\t     | el.transform(\"t100,100r45t-100,0\");\n\t     | // if you want you can append or prepend transformations\n\t     | el.transform(\"...t50,50\");\n\t     | el.transform(\"s2...\");\n\t     | // or even wrap\n\t     | el.transform(\"t50,50...t-50-50\");\n\t     | // to reset transformation call method with empty string\n\t     | el.transform(\"\");\n\t     | // to get current value call it without parameters\n\t     | console.log(el.transform());\n\t     > Parameters\n\t     - tstr (string) #optional transformation string\n\t     * If tstr isn’t specified\n\t     = (string) current transformation string\n\t     * else\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            return _.transform;\n\t        }\n\t        R._extractTransform(this, tstr);\n\n\t        this.clip && $(this.clip, {transform: this.matrix.invert()});\n\t        this.pattern && updatePosition(this);\n\t        this.node && $(this.node, {transform: this.matrix});\n\n\t        if (_.sx != 1 || _.sy != 1) {\n\t            var sw = this.attrs[has](\"stroke-width\") ? this.attrs[\"stroke-width\"] : 1;\n\t            this.attr({\"stroke-width\": sw});\n\t        }\n\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hide\n\t     [ method ]\n\t     **\n\t     * Makes element invisible. See @Element.show.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hide = function () {\n\t        if(!this.removed) this.node.style.display = \"none\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.show\n\t     [ method ]\n\t     **\n\t     * Makes element visible. See @Element.hide.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.show = function () {\n\t        if(!this.removed) this.node.style.display = \"\";\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the paper.\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var node = getRealNode(this.node);\n\t        if (this.removed || !node.parentNode) {\n\t            return;\n\t        }\n\t        var paper = this.paper;\n\t        paper.__set__ && paper.__set__.exclude(this);\n\t        eve.unbind(\"raphael.*.*.\" + this.id);\n\t        if (this.gradient) {\n\t            paper.defs.removeChild(this.gradient);\n\t        }\n\t        R._tear(this, paper);\n\n\t        node.parentNode.removeChild(node);\n\n\t        // Remove custom data for element\n\t        this.removeData();\n\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.node.style.display == \"none\") {\n\t            this.show();\n\t            var hide = true;\n\t        }\n\t        var canvasHidden = false,\n\t            containerStyle;\n\t        if (this.paper.canvas.parentElement) {\n\t          containerStyle = this.paper.canvas.parentElement.style;\n\t        } //IE10+ can't find parentElement\n\t        else if (this.paper.canvas.parentNode) {\n\t          containerStyle = this.paper.canvas.parentNode.style;\n\t        }\n\n\t        if(containerStyle && containerStyle.display == \"none\") {\n\t          canvasHidden = true;\n\t          containerStyle.display = \"\";\n\t        }\n\t        var bbox = {};\n\t        try {\n\t            bbox = this.node.getBBox();\n\t        } catch(e) {\n\t            // Firefox 3.0.x, 25.0.1 (probably more versions affected) play badly here - possible fix\n\t            bbox = {\n\t                x: this.node.clientLeft,\n\t                y: this.node.clientTop,\n\t                width: this.node.clientWidth,\n\t                height: this.node.clientHeight\n\t            }\n\t        } finally {\n\t            bbox = bbox || {};\n\t            if(canvasHidden){\n\t              containerStyle.display = \"none\";\n\t            }\n\t        }\n\t        hide && this.hide();\n\t        return bbox;\n\t    };\n\t    /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Sets the attributes of the element.\n\t     > Parameters\n\t     - attrName (string) attribute’s name\n\t     - value (string) value\n\t     * or\n\t     - params (object) object of name/value pairs\n\t     * or\n\t     - attrName (string) attribute’s name\n\t     * or\n\t     - attrNames (array) in this case method returns array of current values for given attribute names\n\t     = (object) @Element if attrsName & value or params are passed in.\n\t     = (...) value of the attribute if only attrsName is passed in.\n\t     = (array) array of values of the attribute if attrsNames is passed in.\n\t     = (object) object of attributes if nothing is passed in.\n\t     > Possible parameters\n\t     # <p>Please refer to the <a href=\"http://www.w3.org/TR/SVG/\" title=\"The W3C Recommendation for the SVG language describes these properties in detail.\">SVG specification</a> for an explanation of these parameters.</p>\n\t     o arrow-end (string) arrowhead on the end of the path. The format for string is `<type>[-<width>[-<length>]]`. Possible types: `classic`, `block`, `open`, `oval`, `diamond`, `none`, width: `wide`, `narrow`, `medium`, length: `long`, `short`, `midium`.\n\t     o clip-rect (string) comma or space separated values: x, y, width and height\n\t     o cursor (string) CSS type of the cursor\n\t     o cx (number) the x-axis coordinate of the center of the circle, or ellipse\n\t     o cy (number) the y-axis coordinate of the center of the circle, or ellipse\n\t     o fill (string) colour, gradient or image\n\t     o fill-opacity (number)\n\t     o font (string)\n\t     o font-family (string)\n\t     o font-size (number) font size in pixels\n\t     o font-weight (string)\n\t     o height (number)\n\t     o href (string) URL, if specified element behaves as hyperlink\n\t     o opacity (number)\n\t     o path (string) SVG path string format\n\t     o r (number) radius of the circle, ellipse or rounded corner on the rect\n\t     o rx (number) horisontal radius of the ellipse\n\t     o ry (number) vertical radius of the ellipse\n\t     o src (string) image URL, only works for @Element.image element\n\t     o stroke (string) stroke colour\n\t     o stroke-dasharray (string) [“”, “none”, “`-`”, “`.`”, “`-.`”, “`-..`”, “`. `”, “`- `”, “`--`”, “`- .`”, “`--.`”, “`--..`”]\n\t     o stroke-linecap (string) [“`butt`”, “`square`”, “`round`”]\n\t     o stroke-linejoin (string) [“`bevel`”, “`round`”, “`miter`”]\n\t     o stroke-miterlimit (number)\n\t     o stroke-opacity (number)\n\t     o stroke-width (number) stroke width in pixels, default is '1'\n\t     o target (string) used with href\n\t     o text (string) contents of the text element. Use `\\n` for multiline text\n\t     o text-anchor (string) [“`start`”, “`middle`”, “`end`”], default is “`middle`”\n\t     o title (string) will create tooltip with a given text\n\t     o transform (string) see @Element.transform\n\t     o width (number)\n\t     o x (number)\n\t     o y (number)\n\t     > Gradients\n\t     * Linear gradient format: “`‹angle›-‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`90-#fff-#000`” – 90°\n\t     * gradient from white to black or “`0-#fff-#f00:20-#000`” – 0° gradient from white via red (at 20%) to black.\n\t     *\n\t     * radial gradient: “`r[(‹fx›, ‹fy›)]‹colour›[-‹colour›[:‹offset›]]*-‹colour›`”, example: “`r#fff-#000`” –\n\t     * gradient from white to black or “`r(0.25, 0.75)#fff-#000`” – gradient from white to black with focus point\n\t     * at 0.25, 0.75. Focus point coordinates are in 0..1 range. Radial gradients can only be applied to circles and ellipses.\n\t     > Path String\n\t     # <p>Please refer to <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path’s data attribute’s format are described in the SVG specification.\">SVG documentation regarding path string</a>. Raphaël fully supports it.</p>\n\t     > Colour Parsing\n\t     # <ul>\n\t     #     <li>Colour name (“<code>red</code>”, “<code>green</code>”, “<code>cornflowerblue</code>”, etc)</li>\n\t     #     <li>#••• — shortened HTML colour: (“<code>#000</code>”, “<code>#fc0</code>”, etc)</li>\n\t     #     <li>#•••••• — full length HTML colour: (“<code>#000000</code>”, “<code>#bd2300</code>”)</li>\n\t     #     <li>rgb(•••, •••, •••) — red, green and blue channels’ values: (“<code>rgb(200,&nbsp;100,&nbsp;0)</code>”)</li>\n\t     #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (“<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>”)</li>\n\t     #     <li>rgba(•••, •••, •••, •••) — red, green and blue channels’ values: (“<code>rgba(200,&nbsp;100,&nbsp;0, .5)</code>”)</li>\n\t     #     <li>rgba(•••%, •••%, •••%, •••%) — same as above, but in %: (“<code>rgba(100%,&nbsp;175%,&nbsp;0%, 50%)</code>”)</li>\n\t     #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (“<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>”)</li>\n\t     #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsba(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>hsl(•••, •••, •••) — almost the same as hsb, see <a href=\"http://en.wikipedia.org/wiki/HSL_and_HSV\" title=\"HSL and HSV - Wikipedia, the free encyclopedia\">Wikipedia page</a></li>\n\t     #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t     #     <li>hsla(•••, •••, •••, •••) — same as above, but with opacity</li>\n\t     #     <li>Optionally for hsb and hsl you could specify hue as a degree: “<code>hsl(240deg,&nbsp;1,&nbsp;.5)</code>” or, if you want to go fancy, “<code>hsl(240°,&nbsp;1,&nbsp;.5)</code>”</li>\n\t     # </ul>\n\t    \\*/\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == \"fill\" && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            if (name == \"transform\") {\n\t                return this._.transform;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        if (value != null) {\n\t            var params = {};\n\t            params[name] = value;\n\t        } else if (name != null && R.is(name, \"object\")) {\n\t            params = name;\n\t        }\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t            var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t            this.attrs[key] = params[key];\n\t            for (var subkey in par) if (par[has](subkey)) {\n\t                params[subkey] = par[subkey];\n\t            }\n\t        }\n\t        setFillAndStroke(this, params);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toFront\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the closest to the viewer’s eyes, on top of other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toFront = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        node.parentNode.appendChild(node);\n\t        var svg = this.paper;\n\t        svg.top != this && R._tofront(this, svg);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toBack\n\t     [ method ]\n\t     **\n\t     * Moves the element so it is the furthest from the viewer’s eyes, behind other elements.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        var node = getRealNode(this.node);\n\t        var parentNode = node.parentNode;\n\t        parentNode.insertBefore(node, parentNode.firstChild);\n\t        R._toback(this, this.paper);\n\t        var svg = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts current object after the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var afterNode = getRealNode(element.node || element[element.length - 1].node);\n\t        if (afterNode.nextSibling) {\n\t            afterNode.parentNode.insertBefore(node, afterNode.nextSibling);\n\t        } else {\n\t            afterNode.parentNode.appendChild(node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts current object before the given one.\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed || !element) {\n\t            return this;\n\t        }\n\n\t        var node = getRealNode(this.node);\n\t        var beforeNode = getRealNode(element.node || element[0].node);\n\t        beforeNode.parentNode.insertBefore(node, beforeNode);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        // Experimental. No Safari support. Use it on your own risk.\n\t        var t = this;\n\t        if (+size !== 0) {\n\t            var fltr = $(\"filter\"),\n\t                blur = $(\"feGaussianBlur\");\n\t            t.attrs.blur = size;\n\t            fltr.id = R.createUUID();\n\t            $(blur, {stdDeviation: +size || 1.5});\n\t            fltr.appendChild(blur);\n\t            t.paper.defs.appendChild(fltr);\n\t            t._blur = fltr;\n\t            $(t.node, {filter: \"url(#\" + fltr.id + \")\"});\n\t        } else {\n\t            if (t._blur) {\n\t                t._blur.parentNode.removeChild(t._blur);\n\t                delete t._blur;\n\t                delete t.attrs.blur;\n\t            }\n\t            t.node.removeAttribute(\"filter\");\n\t        }\n\t        return t;\n\t    };\n\t    R._engine.circle = function (svg, x, y, r) {\n\t        var el = $(\"circle\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, r: r, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"circle\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.rect = function (svg, x, y, w, h, r) {\n\t        var el = $(\"rect\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, rx: r || 0, ry: r || 0, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"rect\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (svg, x, y, rx, ry) {\n\t        var el = $(\"ellipse\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {cx: x, cy: y, rx: rx, ry: ry, fill: \"none\", stroke: \"#000\"};\n\t        res.type = \"ellipse\";\n\t        $(el, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.image = function (svg, src, x, y, w, h) {\n\t        var el = $(\"image\");\n\t        $(el, {x: x, y: y, width: w, height: h, preserveAspectRatio: \"none\"});\n\t        el.setAttributeNS(xlink, \"href\", src);\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {x: x, y: y, width: w, height: h, src: src};\n\t        res.type = \"image\";\n\t        return res;\n\t    };\n\t    R._engine.text = function (svg, x, y, text) {\n\t        var el = $(\"text\");\n\t        svg.canvas && svg.canvas.appendChild(el);\n\t        var res = new Element(el, svg);\n\t        res.attrs = {\n\t            x: x,\n\t            y: y,\n\t            \"text-anchor\": \"middle\",\n\t            text: text,\n\t            \"font-family\": R._availableAttrs[\"font-family\"],\n\t            \"font-size\": R._availableAttrs[\"font-size\"],\n\t            stroke: \"none\",\n\t            fill: \"#000\"\n\t        };\n\t        res.type = \"text\";\n\t        setFillAndStroke(res, res.attrs);\n\t        return res;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        this.width = width || this.width;\n\t        this.height = height || this.height;\n\t        this.canvas.setAttribute(\"width\", this.width);\n\t        this.canvas.setAttribute(\"height\", this.height);\n\t        if (this._viewBox) {\n\t            this.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con && con.container,\n\t            x = con.x,\n\t            y = con.y,\n\t            width = con.width,\n\t            height = con.height;\n\t        if (!container) {\n\t            throw new Error(\"SVG container not found.\");\n\t        }\n\t        var cnvs = $(\"svg\"),\n\t            css = \"overflow:hidden;\",\n\t            isFloating;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        $(cnvs, {\n\t            height: height,\n\t            version: 1.1,\n\t            width: width,\n\t            xmlns: \"http://www.w3.org/2000/svg\",\n\t            \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\"\n\t        });\n\t        if (container == 1) {\n\t            cnvs.style.cssText = css + \"position:absolute;left:\" + x + \"px;top:\" + y + \"px\";\n\t            R._g.doc.body.appendChild(cnvs);\n\t            isFloating = 1;\n\t        } else {\n\t            cnvs.style.cssText = css + \"position:relative\";\n\t            if (container.firstChild) {\n\t                container.insertBefore(cnvs, container.firstChild);\n\t            } else {\n\t                container.appendChild(cnvs);\n\t            }\n\t        }\n\t        container = new R._Paper;\n\t        container.width = width;\n\t        container.height = height;\n\t        container.canvas = cnvs;\n\t        container.clear();\n\t        container._left = container._top = 0;\n\t        isFloating && (container.renderfix = function () {});\n\t        container.renderfix();\n\t        return container;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            size = mmax(w / paperSize.width, h / paperSize.height),\n\t            top = this.top,\n\t            aspectRatio = fit ? \"xMidYMid meet\" : \"xMinYMin\",\n\t            vb,\n\t            sw;\n\t        if (x == null) {\n\t            if (this._vbSize) {\n\t                size = 1;\n\t            }\n\t            delete this._vbSize;\n\t            vb = \"0 0 \" + this.width + S + this.height;\n\t        } else {\n\t            this._vbSize = size;\n\t            vb = x + S + y + S + w + S + h;\n\t        }\n\t        $(this.canvas, {\n\t            viewBox: vb,\n\t            preserveAspectRatio: aspectRatio\n\t        });\n\t        while (size && top) {\n\t            sw = \"stroke-width\" in top.attrs ? top.attrs[\"stroke-width\"] : 1;\n\t            top.attr({\"stroke-width\": sw});\n\t            top._.dirty = 1;\n\t            top._.dirtyT = 1;\n\t            top = top.prev;\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Paper.renderfix\n\t     [ method ]\n\t     **\n\t     * Fixes the issue of Firefox and IE9 regarding subpixel rendering. If paper is dependent\n\t     * on other elements after reflow it could shift half pixel which cause for lines to lost their crispness.\n\t     * This method fixes the issue.\n\t     **\n\t       Special thanks to Mariusz Nowak (http://www.medikoo.com/) for this method.\n\t    \\*/\n\t    R.prototype.renderfix = function () {\n\t        var cnvs = this.canvas,\n\t            s = cnvs.style,\n\t            pos;\n\t        try {\n\t            pos = cnvs.getScreenCTM() || cnvs.createSVGMatrix();\n\t        } catch (e) {\n\t            pos = cnvs.createSVGMatrix();\n\t        }\n\t        var left = -pos.e % 1,\n\t            top = -pos.f % 1;\n\t        if (left || top) {\n\t            if (left) {\n\t                this._left = (this._left + left) % 1;\n\t                s.left = this._left + \"px\";\n\t            }\n\t            if (top) {\n\t                this._top = (this._top + top) % 1;\n\t                s.top = this._top + \"px\";\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.clear\n\t     [ method ]\n\t     **\n\t     * Clears the paper, i.e. removes all the elements.\n\t    \\*/\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        var c = this.canvas;\n\t        while (c.firstChild) {\n\t            c.removeChild(c.firstChild);\n\t        }\n\t        this.bottom = this.top = null;\n\t        (this.desc = $(\"desc\")).appendChild(R._g.doc.createTextNode(\"Created with Rapha\\xebl \" + R.version));\n\t        c.appendChild(this.desc);\n\t        c.appendChild(this.defs = $(\"defs\"));\n\t    };\n\t    /*\\\n\t     * Paper.remove\n\t     [ method ]\n\t     **\n\t     * Removes the paper from the DOM.\n\t    \\*/\n\t    R.prototype.remove = function () {\n\t        eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t    };\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_RESULT__ = function(R) {\n\t    if (R && !R.vml) {\n\t        return;\n\t    }\n\n\t    var has = \"hasOwnProperty\",\n\t        Str = String,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        round = math.round,\n\t        mmax = math.max,\n\t        mmin = math.min,\n\t        abs = math.abs,\n\t        fillString = \"fill\",\n\t        separator = /[, ]+/,\n\t        eve = R.eve,\n\t        ms = \" progid:DXImageTransform.Microsoft\",\n\t        S = \" \",\n\t        E = \"\",\n\t        map = {M: \"m\", L: \"l\", C: \"c\", Z: \"x\", m: \"t\", l: \"r\", c: \"v\", z: \"x\"},\n\t        bites = /([clmz]),?([^clmz]*)/gi,\n\t        blurregexp = / progid:\\S+Blur\\([^\\)]+\\)/g,\n\t        val = /-?[^,\\s-]+/g,\n\t        cssDot = \"position:absolute;left:0;top:0;width:1px;height:1px;behavior:url(#default#VML)\",\n\t        zoom = 21600,\n\t        pathTypes = {path: 1, rect: 1, image: 1},\n\t        ovalTypes = {circle: 1, ellipse: 1},\n\t        path2vml = function (path) {\n\t            var total =  /[ahqstv]/ig,\n\t                command = R._pathToAbsolute;\n\t            Str(path).match(total) && (command = R._path2curve);\n\t            total = /[clmz]/g;\n\t            if (command == R._pathToAbsolute && !Str(path).match(total)) {\n\t                var res = Str(path).replace(bites, function (all, command, args) {\n\t                    var vals = [],\n\t                        isMove = command.toLowerCase() == \"m\",\n\t                        res = map[command];\n\t                    args.replace(val, function (value) {\n\t                        if (isMove && vals.length == 2) {\n\t                            res += vals + map[command == \"m\" ? \"l\" : \"L\"];\n\t                            vals = [];\n\t                        }\n\t                        vals.push(round(value * zoom));\n\t                    });\n\t                    return res + vals;\n\t                });\n\t                return res;\n\t            }\n\t            var pa = command(path), p, r;\n\t            res = [];\n\t            for (var i = 0, ii = pa.length; i < ii; i++) {\n\t                p = pa[i];\n\t                r = pa[i][0].toLowerCase();\n\t                r == \"z\" && (r = \"x\");\n\t                for (var j = 1, jj = p.length; j < jj; j++) {\n\t                    r += round(p[j] * zoom) + (j != jj - 1 ? \",\" : E);\n\t                }\n\t                res.push(r);\n\t            }\n\t            return res.join(S);\n\t        },\n\t        compensation = function (deg, dx, dy) {\n\t            var m = R.matrix();\n\t            m.rotate(-deg, .5, .5);\n\t            return {\n\t                dx: m.x(dx, dy),\n\t                dy: m.y(dx, dy)\n\t            };\n\t        },\n\t        setCoords = function (p, sx, sy, dx, dy, deg) {\n\t            var _ = p._,\n\t                m = p.matrix,\n\t                fillpos = _.fillpos,\n\t                o = p.node,\n\t                s = o.style,\n\t                y = 1,\n\t                flip = \"\",\n\t                dxdy,\n\t                kx = zoom / sx,\n\t                ky = zoom / sy;\n\t            s.visibility = \"hidden\";\n\t            if (!sx || !sy) {\n\t                return;\n\t            }\n\t            o.coordsize = abs(kx) + S + abs(ky);\n\t            s.rotation = deg * (sx * sy < 0 ? -1 : 1);\n\t            if (deg) {\n\t                var c = compensation(deg, dx, dy);\n\t                dx = c.dx;\n\t                dy = c.dy;\n\t            }\n\t            sx < 0 && (flip += \"x\");\n\t            sy < 0 && (flip += \" y\") && (y = -1);\n\t            s.flip = flip;\n\t            o.coordorigin = (dx * -kx) + S + (dy * -ky);\n\t            if (fillpos || _.fillsize) {\n\t                var fill = o.getElementsByTagName(fillString);\n\t                fill = fill && fill[0];\n\t                o.removeChild(fill);\n\t                if (fillpos) {\n\t                    c = compensation(deg, m.x(fillpos[0], fillpos[1]), m.y(fillpos[0], fillpos[1]));\n\t                    fill.position = c.dx * y + S + c.dy * y;\n\t                }\n\t                if (_.fillsize) {\n\t                    fill.size = _.fillsize[0] * abs(sx) + S + _.fillsize[1] * abs(sy);\n\t                }\n\t                o.appendChild(fill);\n\t            }\n\t            s.visibility = \"visible\";\n\t        };\n\t    R.toString = function () {\n\t        return  \"Your browser doesn\\u2019t support SVG. Falling down to VML.\\nYou are running Rapha\\xebl \" + this.version;\n\t    };\n\t    var addArrow = function (o, value, isEnd) {\n\t        var values = Str(value).toLowerCase().split(\"-\"),\n\t            se = isEnd ? \"end\" : \"start\",\n\t            i = values.length,\n\t            type = \"classic\",\n\t            w = \"medium\",\n\t            h = \"medium\";\n\t        while (i--) {\n\t            switch (values[i]) {\n\t                case \"block\":\n\t                case \"classic\":\n\t                case \"oval\":\n\t                case \"diamond\":\n\t                case \"open\":\n\t                case \"none\":\n\t                    type = values[i];\n\t                    break;\n\t                case \"wide\":\n\t                case \"narrow\": h = values[i]; break;\n\t                case \"long\":\n\t                case \"short\": w = values[i]; break;\n\t            }\n\t        }\n\t        var stroke = o.node.getElementsByTagName(\"stroke\")[0];\n\t        stroke[se + \"arrow\"] = type;\n\t        stroke[se + \"arrowlength\"] = w;\n\t        stroke[se + \"arrowwidth\"] = h;\n\t    },\n\t    setFillAndStroke = function (o, params) {\n\t        // o.paper.canvas.style.display = \"none\";\n\t        o.attrs = o.attrs || {};\n\t        var node = o.node,\n\t            a = o.attrs,\n\t            s = node.style,\n\t            xy,\n\t            newpath = pathTypes[o.type] && (params.x != a.x || params.y != a.y || params.width != a.width || params.height != a.height || params.cx != a.cx || params.cy != a.cy || params.rx != a.rx || params.ry != a.ry || params.r != a.r),\n\t            isOval = ovalTypes[o.type] && (a.cx != params.cx || a.cy != params.cy || a.r != params.r || a.rx != params.rx || a.ry != params.ry),\n\t            res = o;\n\n\n\t        for (var par in params) if (params[has](par)) {\n\t            a[par] = params[par];\n\t        }\n\t        if (newpath) {\n\t            a.path = R._getPath[o.type](o);\n\t            o._.dirty = 1;\n\t        }\n\t        params.href && (node.href = params.href);\n\t        params.title && (node.title = params.title);\n\t        params.target && (node.target = params.target);\n\t        params.cursor && (s.cursor = params.cursor);\n\t        \"blur\" in params && o.blur(params.blur);\n\t        if (params.path && o.type == \"path\" || newpath) {\n\t            node.path = path2vml(~Str(a.path).toLowerCase().indexOf(\"r\") ? R._pathToAbsolute(a.path) : a.path);\n\t            o._.dirty = 1;\n\t            if (o.type == \"image\") {\n\t                o._.fillpos = [a.x, a.y];\n\t                o._.fillsize = [a.width, a.height];\n\t                setCoords(o, 1, 1, 0, 0, 0);\n\t            }\n\t        }\n\t        \"transform\" in params && o.transform(params.transform);\n\t        if (isOval) {\n\t            var cx = +a.cx,\n\t                cy = +a.cy,\n\t                rx = +a.rx || +a.r || 0,\n\t                ry = +a.ry || +a.r || 0;\n\t            node.path = R.format(\"ar{0},{1},{2},{3},{4},{1},{4},{1}x\", round((cx - rx) * zoom), round((cy - ry) * zoom), round((cx + rx) * zoom), round((cy + ry) * zoom), round(cx * zoom));\n\t            o._.dirty = 1;\n\t        }\n\t        if (\"clip-rect\" in params) {\n\t            var rect = Str(params[\"clip-rect\"]).split(separator);\n\t            if (rect.length == 4) {\n\t                rect[2] = +rect[2] + (+rect[0]);\n\t                rect[3] = +rect[3] + (+rect[1]);\n\t                var div = node.clipRect || R._g.doc.createElement(\"div\"),\n\t                    dstyle = div.style;\n\t                dstyle.clip = R.format(\"rect({1}px {2}px {3}px {0}px)\", rect);\n\t                if (!node.clipRect) {\n\t                    dstyle.position = \"absolute\";\n\t                    dstyle.top = 0;\n\t                    dstyle.left = 0;\n\t                    dstyle.width = o.paper.width + \"px\";\n\t                    dstyle.height = o.paper.height + \"px\";\n\t                    node.parentNode.insertBefore(div, node);\n\t                    div.appendChild(node);\n\t                    node.clipRect = div;\n\t                }\n\t            }\n\t            if (!params[\"clip-rect\"]) {\n\t                node.clipRect && (node.clipRect.style.clip = \"auto\");\n\t            }\n\t        }\n\t        if (o.textpath) {\n\t            var textpathStyle = o.textpath.style;\n\t            params.font && (textpathStyle.font = params.font);\n\t            params[\"font-family\"] && (textpathStyle.fontFamily = '\"' + params[\"font-family\"].split(\",\")[0].replace(/^['\"]+|['\"]+$/g, E) + '\"');\n\t            params[\"font-size\"] && (textpathStyle.fontSize = params[\"font-size\"]);\n\t            params[\"font-weight\"] && (textpathStyle.fontWeight = params[\"font-weight\"]);\n\t            params[\"font-style\"] && (textpathStyle.fontStyle = params[\"font-style\"]);\n\t        }\n\t        if (\"arrow-start\" in params) {\n\t            addArrow(res, params[\"arrow-start\"]);\n\t        }\n\t        if (\"arrow-end\" in params) {\n\t            addArrow(res, params[\"arrow-end\"], 1);\n\t        }\n\t        if (params.opacity != null ||\n\t            params.fill != null ||\n\t            params.src != null ||\n\t            params.stroke != null ||\n\t            params[\"stroke-width\"] != null ||\n\t            params[\"stroke-opacity\"] != null ||\n\t            params[\"fill-opacity\"] != null ||\n\t            params[\"stroke-dasharray\"] != null ||\n\t            params[\"stroke-miterlimit\"] != null ||\n\t            params[\"stroke-linejoin\"] != null ||\n\t            params[\"stroke-linecap\"] != null) {\n\t            var fill = node.getElementsByTagName(fillString),\n\t                newfill = false;\n\t            fill = fill && fill[0];\n\t            !fill && (newfill = fill = createNode(fillString));\n\t            if (o.type == \"image\" && params.src) {\n\t                fill.src = params.src;\n\t            }\n\t            params.fill && (fill.on = true);\n\t            if (fill.on == null || params.fill == \"none\" || params.fill === null) {\n\t                fill.on = false;\n\t            }\n\t            if (fill.on && params.fill) {\n\t                var isURL = Str(params.fill).match(R._ISURL);\n\t                if (isURL) {\n\t                    fill.parentNode == node && node.removeChild(fill);\n\t                    fill.rotate = true;\n\t                    fill.src = isURL[1];\n\t                    fill.type = \"tile\";\n\t                    var bbox = o.getBBox(1);\n\t                    fill.position = bbox.x + S + bbox.y;\n\t                    o._.fillpos = [bbox.x, bbox.y];\n\n\t                    R._preload(isURL[1], function () {\n\t                        o._.fillsize = [this.offsetWidth, this.offsetHeight];\n\t                    });\n\t                } else {\n\t                    fill.color = R.getRGB(params.fill).hex;\n\t                    fill.src = E;\n\t                    fill.type = \"solid\";\n\t                    if (R.getRGB(params.fill).error && (res.type in {circle: 1, ellipse: 1} || Str(params.fill).charAt() != \"r\") && addGradientFill(res, params.fill, fill)) {\n\t                        a.fill = \"none\";\n\t                        a.gradient = params.fill;\n\t                        fill.rotate = false;\n\t                    }\n\t                }\n\t            }\n\t            if (\"fill-opacity\" in params || \"opacity\" in params) {\n\t                var opacity = ((+a[\"fill-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+R.getRGB(params.fill).o + 1 || 2) - 1);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                fill.opacity = opacity;\n\t                if (fill.src) {\n\t                    fill.color = \"none\";\n\t                }\n\t            }\n\t            node.appendChild(fill);\n\t            var stroke = (node.getElementsByTagName(\"stroke\") && node.getElementsByTagName(\"stroke\")[0]),\n\t            newstroke = false;\n\t            !stroke && (newstroke = stroke = createNode(\"stroke\"));\n\t            if ((params.stroke && params.stroke != \"none\") ||\n\t                params[\"stroke-width\"] ||\n\t                params[\"stroke-opacity\"] != null ||\n\t                params[\"stroke-dasharray\"] ||\n\t                params[\"stroke-miterlimit\"] ||\n\t                params[\"stroke-linejoin\"] ||\n\t                params[\"stroke-linecap\"]) {\n\t                stroke.on = true;\n\t            }\n\t            (params.stroke == \"none\" || params.stroke === null || stroke.on == null || params.stroke == 0 || params[\"stroke-width\"] == 0) && (stroke.on = false);\n\t            var strokeColor = R.getRGB(params.stroke);\n\t            stroke.on && params.stroke && (stroke.color = strokeColor.hex);\n\t            opacity = ((+a[\"stroke-opacity\"] + 1 || 2) - 1) * ((+a.opacity + 1 || 2) - 1) * ((+strokeColor.o + 1 || 2) - 1);\n\t            var width = (toFloat(params[\"stroke-width\"]) || 1) * .75;\n\t            opacity = mmin(mmax(opacity, 0), 1);\n\t            params[\"stroke-width\"] == null && (width = a[\"stroke-width\"]);\n\t            params[\"stroke-width\"] && (stroke.weight = width);\n\t            width && width < 1 && (opacity *= width) && (stroke.weight = 1);\n\t            stroke.opacity = opacity;\n\n\t            params[\"stroke-linejoin\"] && (stroke.joinstyle = params[\"stroke-linejoin\"] || \"miter\");\n\t            stroke.miterlimit = params[\"stroke-miterlimit\"] || 8;\n\t            params[\"stroke-linecap\"] && (stroke.endcap = params[\"stroke-linecap\"] == \"butt\" ? \"flat\" : params[\"stroke-linecap\"] == \"square\" ? \"square\" : \"round\");\n\t            if (\"stroke-dasharray\" in params) {\n\t                var dasharray = {\n\t                    \"-\": \"shortdash\",\n\t                    \".\": \"shortdot\",\n\t                    \"-.\": \"shortdashdot\",\n\t                    \"-..\": \"shortdashdotdot\",\n\t                    \". \": \"dot\",\n\t                    \"- \": \"dash\",\n\t                    \"--\": \"longdash\",\n\t                    \"- .\": \"dashdot\",\n\t                    \"--.\": \"longdashdot\",\n\t                    \"--..\": \"longdashdotdot\"\n\t                };\n\t                stroke.dashstyle = dasharray[has](params[\"stroke-dasharray\"]) ? dasharray[params[\"stroke-dasharray\"]] : E;\n\t            }\n\t            newstroke && node.appendChild(stroke);\n\t        }\n\t        if (res.type == \"text\") {\n\t            res.paper.canvas.style.display = E;\n\t            var span = res.paper.span,\n\t                m = 100,\n\t                fontSize = a.font && a.font.match(/\\d+(?:\\.\\d*)?(?=px)/);\n\t            s = span.style;\n\t            a.font && (s.font = a.font);\n\t            a[\"font-family\"] && (s.fontFamily = a[\"font-family\"]);\n\t            a[\"font-weight\"] && (s.fontWeight = a[\"font-weight\"]);\n\t            a[\"font-style\"] && (s.fontStyle = a[\"font-style\"]);\n\t            fontSize = toFloat(a[\"font-size\"] || fontSize && fontSize[0]) || 10;\n\t            s.fontSize = fontSize * m + \"px\";\n\t            res.textpath.string && (span.innerHTML = Str(res.textpath.string).replace(/</g, \"&#60;\").replace(/&/g, \"&#38;\").replace(/\\n/g, \"<br>\"));\n\t            var brect = span.getBoundingClientRect();\n\t            res.W = a.w = (brect.right - brect.left) / m;\n\t            res.H = a.h = (brect.bottom - brect.top) / m;\n\t            // res.paper.canvas.style.display = \"none\";\n\t            res.X = a.x;\n\t            res.Y = a.y + res.H / 2;\n\n\t            (\"x\" in params || \"y\" in params) && (res.path.v = R.format(\"m{0},{1}l{2},{1}\", round(a.x * zoom), round(a.y * zoom), round(a.x * zoom) + 1));\n\t            var dirtyattrs = [\"x\", \"y\", \"text\", \"font\", \"font-family\", \"font-weight\", \"font-style\", \"font-size\"];\n\t            for (var d = 0, dd = dirtyattrs.length; d < dd; d++) if (dirtyattrs[d] in params) {\n\t                res._.dirty = 1;\n\t                break;\n\t            }\n\n\t            // text-anchor emulation\n\t            switch (a[\"text-anchor\"]) {\n\t                case \"start\":\n\t                    res.textpath.style[\"v-text-align\"] = \"left\";\n\t                    res.bbx = res.W / 2;\n\t                break;\n\t                case \"end\":\n\t                    res.textpath.style[\"v-text-align\"] = \"right\";\n\t                    res.bbx = -res.W / 2;\n\t                break;\n\t                default:\n\t                    res.textpath.style[\"v-text-align\"] = \"center\";\n\t                    res.bbx = 0;\n\t                break;\n\t            }\n\t            res.textpath.style[\"v-text-kern\"] = true;\n\t        }\n\t        // res.paper.canvas.style.display = E;\n\t    },\n\t    addGradientFill = function (o, gradient, fill) {\n\t        o.attrs = o.attrs || {};\n\t        var attrs = o.attrs,\n\t            pow = Math.pow,\n\t            opacity,\n\t            oindex,\n\t            type = \"linear\",\n\t            fxfy = \".5 .5\";\n\t        o.attrs.gradient = gradient;\n\t        gradient = Str(gradient).replace(R._radial_gradient, function (all, fx, fy) {\n\t            type = \"radial\";\n\t            if (fx && fy) {\n\t                fx = toFloat(fx);\n\t                fy = toFloat(fy);\n\t                pow(fx - .5, 2) + pow(fy - .5, 2) > .25 && (fy = math.sqrt(.25 - pow(fx - .5, 2)) * ((fy > .5) * 2 - 1) + .5);\n\t                fxfy = fx + S + fy;\n\t            }\n\t            return E;\n\t        });\n\t        gradient = gradient.split(/\\s*\\-\\s*/);\n\t        if (type == \"linear\") {\n\t            var angle = gradient.shift();\n\t            angle = -toFloat(angle);\n\t            if (isNaN(angle)) {\n\t                return null;\n\t            }\n\t        }\n\t        var dots = R._parseDots(gradient);\n\t        if (!dots) {\n\t            return null;\n\t        }\n\t        o = o.shape || o.node;\n\t        if (dots.length) {\n\t            o.removeChild(fill);\n\t            fill.on = true;\n\t            fill.method = \"none\";\n\t            fill.color = dots[0].color;\n\t            fill.color2 = dots[dots.length - 1].color;\n\t            var clrs = [];\n\t            for (var i = 0, ii = dots.length; i < ii; i++) {\n\t                dots[i].offset && clrs.push(dots[i].offset + S + dots[i].color);\n\t            }\n\t            fill.colors = clrs.length ? clrs.join() : \"0% \" + fill.color;\n\t            if (type == \"radial\") {\n\t                fill.type = \"gradientTitle\";\n\t                fill.focus = \"100%\";\n\t                fill.focussize = \"0 0\";\n\t                fill.focusposition = fxfy;\n\t                fill.angle = 0;\n\t            } else {\n\t                // fill.rotate= true;\n\t                fill.type = \"gradient\";\n\t                fill.angle = (270 - angle) % 360;\n\t            }\n\t            o.appendChild(fill);\n\t        }\n\t        return 1;\n\t    },\n\t    Element = function (node, vml) {\n\t        this[0] = this.node = node;\n\t        node.raphael = true;\n\t        this.id = R._oid++;\n\t        node.raphaelid = this.id;\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.attrs = {};\n\t        this.paper = vml;\n\t        this.matrix = R.matrix();\n\t        this._ = {\n\t            transform: [],\n\t            sx: 1,\n\t            sy: 1,\n\t            dx: 0,\n\t            dy: 0,\n\t            deg: 0,\n\t            dirty: 1,\n\t            dirtyT: 1\n\t        };\n\t        !vml.bottom && (vml.bottom = this);\n\t        this.prev = vml.top;\n\t        vml.top && (vml.top.next = this);\n\t        vml.top = this;\n\t        this.next = null;\n\t    };\n\t    var elproto = R.el;\n\n\t    Element.prototype = elproto;\n\t    elproto.constructor = Element;\n\t    elproto.transform = function (tstr) {\n\t        if (tstr == null) {\n\t            return this._.transform;\n\t        }\n\t        var vbs = this.paper._viewBoxShift,\n\t            vbt = vbs ? \"s\" + [vbs.scale, vbs.scale] + \"-1-1t\" + [vbs.dx, vbs.dy] : E,\n\t            oldt;\n\t        if (vbs) {\n\t            oldt = tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, this._.transform || E);\n\t        }\n\t        R._extractTransform(this, vbt + tstr);\n\t        var matrix = this.matrix.clone(),\n\t            skew = this.skew,\n\t            o = this.node,\n\t            split,\n\t            isGrad = ~Str(this.attrs.fill).indexOf(\"-\"),\n\t            isPatt = !Str(this.attrs.fill).indexOf(\"url(\");\n\t        matrix.translate(1, 1);\n\t        if (isPatt || isGrad || this.type == \"image\") {\n\t            skew.matrix = \"1 0 0 1\";\n\t            skew.offset = \"0 0\";\n\t            split = matrix.split();\n\t            if ((isGrad && split.noRotation) || !split.isSimple) {\n\t                o.style.filter = matrix.toFilter();\n\t                var bb = this.getBBox(),\n\t                    bbt = this.getBBox(1),\n\t                    dx = bb.x - bbt.x,\n\t                    dy = bb.y - bbt.y;\n\t                o.coordorigin = (dx * -zoom) + S + (dy * -zoom);\n\t                setCoords(this, 1, 1, dx, dy, 0);\n\t            } else {\n\t                o.style.filter = E;\n\t                setCoords(this, split.scalex, split.scaley, split.dx, split.dy, split.rotate);\n\t            }\n\t        } else {\n\t            o.style.filter = E;\n\t            skew.matrix = Str(matrix);\n\t            skew.offset = matrix.offset();\n\t        }\n\t        if (oldt !== null) { // empty string value is true as well\n\t            this._.transform = oldt;\n\t            R._extractTransform(this, oldt);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.rotate = function (deg, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (deg == null) {\n\t            return;\n\t        }\n\t        deg = Str(deg).split(separator);\n\t        if (deg.length - 1) {\n\t            cx = toFloat(deg[1]);\n\t            cy = toFloat(deg[2]);\n\t        }\n\t        deg = toFloat(deg[0]);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t            cx = bbox.x + bbox.width / 2;\n\t            cy = bbox.y + bbox.height / 2;\n\t        }\n\t        this._.dirtyT = 1;\n\t        this.transform(this._.transform.concat([[\"r\", deg, cx, cy]]));\n\t        return this;\n\t    };\n\t    elproto.translate = function (dx, dy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        dx = Str(dx).split(separator);\n\t        if (dx.length - 1) {\n\t            dy = toFloat(dx[1]);\n\t        }\n\t        dx = toFloat(dx[0]) || 0;\n\t        dy = +dy || 0;\n\t        if (this._.bbox) {\n\t            this._.bbox.x += dx;\n\t            this._.bbox.y += dy;\n\t        }\n\t        this.transform(this._.transform.concat([[\"t\", dx, dy]]));\n\t        return this;\n\t    };\n\t    elproto.scale = function (sx, sy, cx, cy) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        sx = Str(sx).split(separator);\n\t        if (sx.length - 1) {\n\t            sy = toFloat(sx[1]);\n\t            cx = toFloat(sx[2]);\n\t            cy = toFloat(sx[3]);\n\t            isNaN(cx) && (cx = null);\n\t            isNaN(cy) && (cy = null);\n\t        }\n\t        sx = toFloat(sx[0]);\n\t        (sy == null) && (sy = sx);\n\t        (cy == null) && (cx = cy);\n\t        if (cx == null || cy == null) {\n\t            var bbox = this.getBBox(1);\n\t        }\n\t        cx = cx == null ? bbox.x + bbox.width / 2 : cx;\n\t        cy = cy == null ? bbox.y + bbox.height / 2 : cy;\n\n\t        this.transform(this._.transform.concat([[\"s\", sx, sy, cx, cy]]));\n\t        this._.dirtyT = 1;\n\t        return this;\n\t    };\n\t    elproto.hide = function () {\n\t        !this.removed && (this.node.style.display = \"none\");\n\t        return this;\n\t    };\n\t    elproto.show = function () {\n\t        !this.removed && (this.node.style.display = E);\n\t        return this;\n\t    };\n\t    // Needed to fix the vml setViewBox issues\n\t    elproto.auxGetBBox = R.el.getBBox;\n\t    elproto.getBBox = function(){\n\t      var b = this.auxGetBBox();\n\t      if (this.paper && this.paper._viewBoxShift)\n\t      {\n\t        var c = {};\n\t        var z = 1/this.paper._viewBoxShift.scale;\n\t        c.x = b.x - this.paper._viewBoxShift.dx;\n\t        c.x *= z;\n\t        c.y = b.y - this.paper._viewBoxShift.dy;\n\t        c.y *= z;\n\t        c.width  = b.width  * z;\n\t        c.height = b.height * z;\n\t        c.x2 = c.x + c.width;\n\t        c.y2 = c.y + c.height;\n\t        return c;\n\t      }\n\t      return b;\n\t    };\n\t    elproto._getBBox = function () {\n\t        if (this.removed) {\n\t            return {};\n\t        }\n\t        return {\n\t            x: this.X + (this.bbx || 0) - this.W / 2,\n\t            y: this.Y - this.H,\n\t            width: this.W,\n\t            height: this.H\n\t        };\n\t    };\n\t    elproto.remove = function () {\n\t        if (this.removed || !this.node.parentNode) {\n\t            return;\n\t        }\n\t        this.paper.__set__ && this.paper.__set__.exclude(this);\n\t        R.eve.unbind(\"raphael.*.*.\" + this.id);\n\t        R._tear(this, this.paper);\n\t        this.node.parentNode.removeChild(this.node);\n\t        this.shape && this.shape.parentNode.removeChild(this.shape);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        this.removed = true;\n\t    };\n\t    elproto.attr = function (name, value) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (name == null) {\n\t            var res = {};\n\t            for (var a in this.attrs) if (this.attrs[has](a)) {\n\t                res[a] = this.attrs[a];\n\t            }\n\t            res.gradient && res.fill == \"none\" && (res.fill = res.gradient) && delete res.gradient;\n\t            res.transform = this._.transform;\n\t            return res;\n\t        }\n\t        if (value == null && R.is(name, \"string\")) {\n\t            if (name == fillString && this.attrs.fill == \"none\" && this.attrs.gradient) {\n\t                return this.attrs.gradient;\n\t            }\n\t            var names = name.split(separator),\n\t                out = {};\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                name = names[i];\n\t                if (name in this.attrs) {\n\t                    out[name] = this.attrs[name];\n\t                } else if (R.is(this.paper.customAttributes[name], \"function\")) {\n\t                    out[name] = this.paper.customAttributes[name].def;\n\t                } else {\n\t                    out[name] = R._availableAttrs[name];\n\t                }\n\t            }\n\t            return ii - 1 ? out : out[names[0]];\n\t        }\n\t        if (this.attrs && value == null && R.is(name, \"array\")) {\n\t            out = {};\n\t            for (i = 0, ii = name.length; i < ii; i++) {\n\t                out[name[i]] = this.attr(name[i]);\n\t            }\n\t            return out;\n\t        }\n\t        var params;\n\t        if (value != null) {\n\t            params = {};\n\t            params[name] = value;\n\t        }\n\t        value == null && R.is(name, \"object\") && (params = name);\n\t        for (var key in params) {\n\t            eve(\"raphael.attr.\" + key + \".\" + this.id, this, params[key]);\n\t        }\n\t        if (params) {\n\t            for (key in this.paper.customAttributes) if (this.paper.customAttributes[has](key) && params[has](key) && R.is(this.paper.customAttributes[key], \"function\")) {\n\t                var par = this.paper.customAttributes[key].apply(this, [].concat(params[key]));\n\t                this.attrs[key] = params[key];\n\t                for (var subkey in par) if (par[has](subkey)) {\n\t                    params[subkey] = par[subkey];\n\t                }\n\t            }\n\t            // this.paper.canvas.style.display = \"none\";\n\t            if (params.text && this.type == \"text\") {\n\t                this.textpath.string = params.text;\n\t            }\n\t            setFillAndStroke(this, params);\n\t            // this.paper.canvas.style.display = E;\n\t        }\n\t        return this;\n\t    };\n\t    elproto.toFront = function () {\n\t        !this.removed && this.node.parentNode.appendChild(this.node);\n\t        this.paper && this.paper.top != this && R._tofront(this, this.paper);\n\t        return this;\n\t    };\n\t    elproto.toBack = function () {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (this.node.parentNode.firstChild != this.node) {\n\t            this.node.parentNode.insertBefore(this.node, this.node.parentNode.firstChild);\n\t            R._toback(this, this.paper);\n\t        }\n\t        return this;\n\t    };\n\t    elproto.insertAfter = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[element.length - 1];\n\t        }\n\t        if (element.node.nextSibling) {\n\t            element.node.parentNode.insertBefore(this.node, element.node.nextSibling);\n\t        } else {\n\t            element.node.parentNode.appendChild(this.node);\n\t        }\n\t        R._insertafter(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.insertBefore = function (element) {\n\t        if (this.removed) {\n\t            return this;\n\t        }\n\t        if (element.constructor == R.st.constructor) {\n\t            element = element[0];\n\t        }\n\t        element.node.parentNode.insertBefore(this.node, element.node);\n\t        R._insertbefore(this, element, this.paper);\n\t        return this;\n\t    };\n\t    elproto.blur = function (size) {\n\t        var s = this.node.runtimeStyle,\n\t            f = s.filter;\n\t        f = f.replace(blurregexp, E);\n\t        if (+size !== 0) {\n\t            this.attrs.blur = size;\n\t            s.filter = f + S + ms + \".Blur(pixelradius=\" + (+size || 1.5) + \")\";\n\t            s.margin = R.format(\"-{0}px 0 0 -{0}px\", round(+size || 1.5));\n\t        } else {\n\t            s.filter = f;\n\t            s.margin = 0;\n\t            delete this.attrs.blur;\n\t        }\n\t        return this;\n\t    };\n\n\t    R._engine.path = function (pathString, vml) {\n\t        var el = createNode(\"shape\");\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = vml.coordorigin;\n\t        var p = new Element(el, vml),\n\t            attr = {fill: \"none\", stroke: \"#000\"};\n\t        pathString && (attr.path = pathString);\n\t        p.type = \"path\";\n\t        p.path = [];\n\t        p.Path = E;\n\t        setFillAndStroke(p, attr);\n\t        vml.canvas && vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.rect = function (vml, x, y, w, h, r) {\n\t        var path = R._rectPath(x, y, w, h, r),\n\t            res = vml.path(path),\n\t            a = res.attrs;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.r = r;\n\t        a.path = path;\n\t        res.type = \"rect\";\n\t        return res;\n\t    };\n\t    R._engine.ellipse = function (vml, x, y, rx, ry) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - rx;\n\t        res.Y = y - ry;\n\t        res.W = rx * 2;\n\t        res.H = ry * 2;\n\t        res.type = \"ellipse\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            rx: rx,\n\t            ry: ry\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.circle = function (vml, x, y, r) {\n\t        var res = vml.path(),\n\t            a = res.attrs;\n\t        res.X = x - r;\n\t        res.Y = y - r;\n\t        res.W = res.H = r * 2;\n\t        res.type = \"circle\";\n\t        setFillAndStroke(res, {\n\t            cx: x,\n\t            cy: y,\n\t            r: r\n\t        });\n\t        return res;\n\t    };\n\t    R._engine.image = function (vml, src, x, y, w, h) {\n\t        var path = R._rectPath(x, y, w, h),\n\t            res = vml.path(path).attr({stroke: \"none\"}),\n\t            a = res.attrs,\n\t            node = res.node,\n\t            fill = node.getElementsByTagName(fillString)[0];\n\t        a.src = src;\n\t        res.X = a.x = x;\n\t        res.Y = a.y = y;\n\t        res.W = a.width = w;\n\t        res.H = a.height = h;\n\t        a.path = path;\n\t        res.type = \"image\";\n\t        fill.parentNode == node && node.removeChild(fill);\n\t        fill.rotate = true;\n\t        fill.src = src;\n\t        fill.type = \"tile\";\n\t        res._.fillpos = [x, y];\n\t        res._.fillsize = [w, h];\n\t        node.appendChild(fill);\n\t        setCoords(res, 1, 1, 0, 0, 0);\n\t        return res;\n\t    };\n\t    R._engine.text = function (vml, x, y, text) {\n\t        var el = createNode(\"shape\"),\n\t            path = createNode(\"path\"),\n\t            o = createNode(\"textpath\");\n\t        x = x || 0;\n\t        y = y || 0;\n\t        text = text || \"\";\n\t        path.v = R.format(\"m{0},{1}l{2},{1}\", round(x * zoom), round(y * zoom), round(x * zoom) + 1);\n\t        path.textpathok = true;\n\t        o.string = Str(text);\n\t        o.on = true;\n\t        el.style.cssText = cssDot;\n\t        el.coordsize = zoom + S + zoom;\n\t        el.coordorigin = \"0 0\";\n\t        var p = new Element(el, vml),\n\t            attr = {\n\t                fill: \"#000\",\n\t                stroke: \"none\",\n\t                font: R._availableAttrs.font,\n\t                text: text\n\t            };\n\t        p.shape = el;\n\t        p.path = path;\n\t        p.textpath = o;\n\t        p.type = \"text\";\n\t        p.attrs.text = Str(text);\n\t        p.attrs.x = x;\n\t        p.attrs.y = y;\n\t        p.attrs.w = 1;\n\t        p.attrs.h = 1;\n\t        setFillAndStroke(p, attr);\n\t        el.appendChild(o);\n\t        el.appendChild(path);\n\t        vml.canvas.appendChild(el);\n\t        var skew = createNode(\"skew\");\n\t        skew.on = true;\n\t        el.appendChild(skew);\n\t        p.skew = skew;\n\t        p.transform(E);\n\t        return p;\n\t    };\n\t    R._engine.setSize = function (width, height) {\n\t        var cs = this.canvas.style;\n\t        this.width = width;\n\t        this.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        cs.width = width;\n\t        cs.height = height;\n\t        cs.clip = \"rect(0 \" + width + \" \" + height + \" 0)\";\n\t        if (this._viewBox) {\n\t            R._engine.setViewBox.apply(this, this._viewBox);\n\t        }\n\t        return this;\n\t    };\n\t    R._engine.setViewBox = function (x, y, w, h, fit) {\n\t        R.eve(\"raphael.setViewBox\", this, this._viewBox, [x, y, w, h, fit]);\n\t        var paperSize = this.getSize(),\n\t            width = paperSize.width,\n\t            height = paperSize.height,\n\t            H, W;\n\t        if (fit) {\n\t            H = height / h;\n\t            W = width / w;\n\t            if (w * H < width) {\n\t                x -= (width - w * H) / 2 / H;\n\t            }\n\t            if (h * W < height) {\n\t                y -= (height - h * W) / 2 / W;\n\t            }\n\t        }\n\t        this._viewBox = [x, y, w, h, !!fit];\n\t        this._viewBoxShift = {\n\t            dx: -x,\n\t            dy: -y,\n\t            scale: paperSize\n\t        };\n\t        this.forEach(function (el) {\n\t            el.transform(\"...\");\n\t        });\n\t        return this;\n\t    };\n\t    var createNode;\n\t    R._engine.initWin = function (win) {\n\t            var doc = win.document;\n\t            if (doc.styleSheets.length < 31) {\n\t                doc.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            } else {\n\t                // no more room, add to the existing one\n\t                // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx\n\t                doc.styleSheets[0].addRule(\".rvml\", \"behavior:url(#default#VML)\");\n\t            }\n\t            try {\n\t                !doc.namespaces.rvml && doc.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\");\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n\t                };\n\t            } catch (e) {\n\t                createNode = function (tagName) {\n\t                    return doc.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n\t                };\n\t            }\n\t        };\n\t    R._engine.initWin(R._g.win);\n\t    R._engine.create = function () {\n\t        var con = R._getContainer.apply(0, arguments),\n\t            container = con.container,\n\t            height = con.height,\n\t            s,\n\t            width = con.width,\n\t            x = con.x,\n\t            y = con.y;\n\t        if (!container) {\n\t            throw new Error(\"VML container not found.\");\n\t        }\n\t        var res = new R._Paper,\n\t            c = res.canvas = R._g.doc.createElement(\"div\"),\n\t            cs = c.style;\n\t        x = x || 0;\n\t        y = y || 0;\n\t        width = width || 512;\n\t        height = height || 342;\n\t        res.width = width;\n\t        res.height = height;\n\t        width == +width && (width += \"px\");\n\t        height == +height && (height += \"px\");\n\t        res.coordsize = zoom * 1e3 + S + zoom * 1e3;\n\t        res.coordorigin = \"0 0\";\n\t        res.span = R._g.doc.createElement(\"span\");\n\t        res.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;\";\n\t        c.appendChild(res.span);\n\t        cs.cssText = R.format(\"top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden\", width, height);\n\t        if (container == 1) {\n\t            R._g.doc.body.appendChild(c);\n\t            cs.left = x + \"px\";\n\t            cs.top = y + \"px\";\n\t            cs.position = \"absolute\";\n\t        } else {\n\t            if (container.firstChild) {\n\t                container.insertBefore(c, container.firstChild);\n\t            } else {\n\t                container.appendChild(c);\n\t            }\n\t        }\n\t        res.renderfix = function () {};\n\t        return res;\n\t    };\n\t    R.prototype.clear = function () {\n\t        R.eve(\"raphael.clear\", this);\n\t        this.canvas.innerHTML = E;\n\t        this.span = R._g.doc.createElement(\"span\");\n\t        this.span.style.cssText = \"position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;\";\n\t        this.canvas.appendChild(this.span);\n\t        this.bottom = this.top = null;\n\t    };\n\t    R.prototype.remove = function () {\n\t        R.eve(\"raphael.remove\", this);\n\t        this.canvas.parentNode.removeChild(this.canvas);\n\t        for (var i in this) {\n\t            this[i] = typeof this[i] == \"function\" ? R._removedFactory(i) : null;\n\t        }\n\t        return true;\n\t    };\n\n\t    var setproto = R.st;\n\t    for (var method in elproto) if (elproto[has](method) && !setproto[has](method)) {\n\t        setproto[method] = (function (methodname) {\n\t            return function () {\n\t                var arg = arguments;\n\t                return this.forEach(function (el) {\n\t                    el[methodname].apply(el, arg);\n\t                });\n\t            };\n\t        })(method);\n\t    }\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raphael/raphael.js\n// module id = 3\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": _vm.id\n    }\n  })\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-1d36c436!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Donut.vue\n// module id = 4\n// module chunks = 0","import Donut from './components/Donut.vue'\n\nconst VueMorris = {\n  Donut\n}\n\nmodule.exports = VueMorris\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}