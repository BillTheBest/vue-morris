{"version":3,"sources":["webpack:///vue-morris.min.js","webpack:///webpack/bootstrap e70349b9132daf0e96ab","webpack:///./src/components/Donut.vue","webpack:///Donut.vue","webpack:///./~/morris.js/morris.js","webpack:///./src/components/Donut.vue?6736","webpack:///./src/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__vue_exports__","__vue_options__","__vue_template__","default","options","render","staticRenderFns","data","chart","computed","chartData","this","JSON","parse","chartResize","resize","watch","val","_this","$nextTick","setData","props","id","type","String","required","colors","formatter","Function","mounted","element","Morris","Donut","$","minutesSpecHelper","secondsSpecHelper","__slice","slice","__bind","fn","me","apply","arguments","__hasProp","__extends","child","parent","ctor","constructor","key","__super__","__indexOf","indexOf","item","length","window","jQuery","EventEmitter","on","handler","handlers","push","fire","args","_i","_len","_ref","_results","commas","num","absnum","intnum","ret","strabsnum","Math","abs","floor","toFixed","replace","toString","pad2","number","Grid","_super","resizeHandler","el","document","getElementById","Error","css","extend","gridDefaults","defaults","units","postUnits","raphael","Raphael","elementWidth","elementHeight","dirty","selectFrom","init","bind","evt","left","offset","right","width","x","pageX","hitTest","min","_x","max","selectionRect","attr","pageY","top","hide","touch","originalEvent","touches","changedTouches","rangeSelect","rect","innerHeight","fill","rangeSelectColor","stroke","toBack","startRange","endRange","timeoutId","clearTimeout","setTimeout","postInit","dateFormat","axes","grid","gridLineColor","gridStrokeWidth","gridTextColor","gridTextSize","gridTextFamily","gridTextWeight","hideHover","yLabelFormat","xLabelAngle","numLines","padding","parseTime","preUnits","ymax","ymin","goals","goalStrokeWidth","goalLineColors","events","eventStrokeWidth","eventLineColors","redraw","e","idx","index","maxGoal","minGoal","row","step","total","y","ykey","yval","clear","hover","cumulative","src","label","xkey","parseDate","Date","xLabelFormat","_j","_len1","_results1","ykeys","parseFloat","sort","a","b","xmin","xmax","yboundary","autoGridLines","_ref1","_ref2","boundaryType","currentValue","boundaryOption","suggestedValue","parseInt","nlines","gmax","gmin","smag","span","unit","ymag","log","pow","ceil","_calc","bottomOffsets","gridLine","h","w","yLabelWidths","height","bottom","measureText","yAxisFormat","text","dx","dy","calc","transY","transX","drawGrid","drawGoals","drawEvents","draw","angle","tt","rotate","getBBox","remove","lineY","drawYAxisLabel","drawGridLine","color","goal","drawGoal","event","drawEvent","path","xPos","yPos","show","end","start","setSize","date","isecs","msecs","offsetmins","q","r","secs","match","getTime","getDay","setMonth","UTC","round","Hover","append","class","update","html","moveTo","content","hoverHeight","hoverWidth","parentHeight","parentWidth","innerWidth","outerWidth","outerHeight","Line","hilight","onHoverOut","onHoverMove","onGridClick","lineWidth","pointSize","lineColors","pointStrokeWidths","pointStrokeColors","pointFillColors","smooth","xLabels","xLabelMargin","calcPoints","generatePaths","_y","_ymax","concat","displayHoverForRow","hoverContentForRow","j","colorFor","labels","hoverCallback","coords","paths","createPath","drawXAxis","drawSeries","drawLabel","prevAngleMargin","prevLabelMargin","ypos","labelText","xpos","labelBox","margin","textBox","drawXAxisLabel","transform","cos","PI","sin","labelSeries","reverse","seriesPoints","_drawLineFor","_drawPointFor","circle","drawLinePoint","drawLinePath","coord","g","grads","ix","lg","prevCoord","x1","x2","y1","y2","gradients","grad","nextCoord","prevHilight","animate","pointShrinkSeries","pointGrowSeries","sidx","lineColor","lineIndex","lineWidthForSeries","pointColor","pointSizeForSeries","pointStrokeWidthForSeries","pointStrokeColorForSeries","Array","animation","dmin","dmax","pxwidth","specName","d0","ddensity","spec","t","LABEL_SPECS","AUTO_LABEL_ORDER","fmt","incr","interval","getFullYear","getMonth","getDate","getHours","getMinutes","setUTCMinutes","getUTCMinutes","getSeconds","setUTCSeconds","getUTCSeconds","decade","setFullYear","year","month","week","setDate","day","hour","30min","15min","10min","5min","minute","30sec","15sec","10sec","5sec","second","Area","areaOptions","areaDefaults","behaveLikeLine","fillOpacity","range","_k","_results2","_drawFillFor","drawFilledPath","fillForSeries","rgb2hsl","hsl","Bar","stacked","barSizeRatio","barGap","barColors","barOpacity","barRadius","calcBars","xAxisLabelTopPadding","barWidth","groupWidth","lastTop","leftPadding","numBars","size","spaceLeft","zeroPos","barSize","bars","verticalGridCondition","drawBar","verticalGridColor","verticalGridOpacity","barColor","opacity","radiusArray","maxRadius","roundedRect","select","click","backgroundColor","labelColor","C","cx","cy","last","max_value","next","seg","_len2","values","segments","DonutSegment","text1","drawEmptyDonutLabel","text2","segment","deselect","setLabels","label1","label2","inner","maxHeightBottom","maxHeightTop","maxWidth","text1bbox","text1scale","text2bbox","text2scale","fontSize","fontWeight","outer","p0","p1","sin_p0","cos_p0","sin_p1","cos_p1","is_long","calcSegment","selectedPath","calcArc","calcArcPoints","r1","r2","ix0","ix1","iy0","iy1","ox0","ox1","oy0","oy1","arc","drawDonutArc","drawDonutSegment","stroke-width","fillColor","strokeColor","hoverFunction","clickFunction","selected","_vm","_h","$createElement","_c","_self","attrs","_interopRequireDefault","obj","_Donut","_Donut2","VueMorris"],"mappings":"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","file":"vue-morris.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 4);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = __webpack_require__(1)\n\n/* template */\nvar __vue_template__ = __webpack_require__(3)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__webpack_require__(2);\n\nexports.default = {\n  name: 'donut',\n\n  data: function data() {\n    return {\n      chart: null\n    };\n  },\n\n\n  computed: {\n    chartData: function chartData() {\n      if (typeof this.data === 'string') {\n        return JSON.parse(this.data);\n      }\n      return this.data;\n    },\n    chartResize: function chartResize() {\n      if (typeof this.resize === 'string') {\n        return this.resize === 'true';\n      }\n      return false;\n    }\n  },\n\n  watch: {\n    data: function data(val) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.chart.setData(_this.data);\n      });\n    }\n  },\n\n  props: {\n    id: { type: String, required: true },\n    data: { required: true },\n    colors: { required: false },\n    formatter: { type: Function, required: false },\n    resize: { required: false }\n  },\n\n  mounted: function mounted() {\n    var options = {\n      element: this.id,\n      data: this.chartData,\n      resize: this.chartResize\n    };\n\n    if (this.colors) {\n      options.colors = this.colors;\n    }\n\n    if (this.formatter) {\n      options.formatter = this.formatter;\n    }\n\n    this.chart = Morris.Donut(options);\n  }\n};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n/* @license\nmorris.js v0.5.0\nCopyright 2014 Olly Smith All rights reserved.\nLicensed under the BSD-2-Clause License.\n*/\n\n\n(function() {\n  var $, Morris, minutesSpecHelper, secondsSpecHelper,\n    __slice = [].slice,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  Morris = window.Morris = {};\n\n  $ = jQuery;\n\n  Morris.EventEmitter = (function() {\n    function EventEmitter() {}\n\n    EventEmitter.prototype.on = function(name, handler) {\n      if (this.handlers == null) {\n        this.handlers = {};\n      }\n      if (this.handlers[name] == null) {\n        this.handlers[name] = [];\n      }\n      this.handlers[name].push(handler);\n      return this;\n    };\n\n    EventEmitter.prototype.fire = function() {\n      var args, handler, name, _i, _len, _ref, _results;\n      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if ((this.handlers != null) && (this.handlers[name] != null)) {\n        _ref = this.handlers[name];\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          handler = _ref[_i];\n          _results.push(handler.apply(null, args));\n        }\n        return _results;\n      }\n    };\n\n    return EventEmitter;\n\n  })();\n\n  Morris.commas = function(num) {\n    var absnum, intnum, ret, strabsnum;\n    if (num != null) {\n      ret = num < 0 ? \"-\" : \"\";\n      absnum = Math.abs(num);\n      intnum = Math.floor(absnum).toFixed(0);\n      ret += intnum.replace(/(?=(?:\\d{3})+$)(?!^)/g, ',');\n      strabsnum = absnum.toString();\n      if (strabsnum.length > intnum.length) {\n        ret += strabsnum.slice(intnum.length);\n      }\n      return ret;\n    } else {\n      return '-';\n    }\n  };\n\n  Morris.pad2 = function(number) {\n    return (number < 10 ? '0' : '') + number;\n  };\n\n  Morris.Grid = (function(_super) {\n    __extends(Grid, _super);\n\n    function Grid(options) {\n      this.resizeHandler = __bind(this.resizeHandler, this);\n      var _this = this;\n      if (typeof options.element === 'string') {\n        this.el = $(document.getElementById(options.element));\n      } else {\n        this.el = $(options.element);\n      }\n      if ((this.el == null) || this.el.length === 0) {\n        throw new Error(\"Graph container element not found\");\n      }\n      if (this.el.css('position') === 'static') {\n        this.el.css('position', 'relative');\n      }\n      this.options = $.extend({}, this.gridDefaults, this.defaults || {}, options);\n      if (typeof this.options.units === 'string') {\n        this.options.postUnits = options.units;\n      }\n      this.raphael = new Raphael(this.el[0]);\n      this.elementWidth = null;\n      this.elementHeight = null;\n      this.dirty = false;\n      this.selectFrom = null;\n      if (this.init) {\n        this.init();\n      }\n      this.setData(this.options.data);\n      this.el.bind('mousemove', function(evt) {\n        var left, offset, right, width, x;\n        offset = _this.el.offset();\n        x = evt.pageX - offset.left;\n        if (_this.selectFrom) {\n          left = _this.data[_this.hitTest(Math.min(x, _this.selectFrom))]._x;\n          right = _this.data[_this.hitTest(Math.max(x, _this.selectFrom))]._x;\n          width = right - left;\n          return _this.selectionRect.attr({\n            x: left,\n            width: width\n          });\n        } else {\n          return _this.fire('hovermove', x, evt.pageY - offset.top);\n        }\n      });\n      this.el.bind('mouseleave', function(evt) {\n        if (_this.selectFrom) {\n          _this.selectionRect.hide();\n          _this.selectFrom = null;\n        }\n        return _this.fire('hoverout');\n      });\n      this.el.bind('touchstart touchmove touchend', function(evt) {\n        var offset, touch;\n        touch = evt.originalEvent.touches[0] || evt.originalEvent.changedTouches[0];\n        offset = _this.el.offset();\n        return _this.fire('hovermove', touch.pageX - offset.left, touch.pageY - offset.top);\n      });\n      this.el.bind('click', function(evt) {\n        var offset;\n        offset = _this.el.offset();\n        return _this.fire('gridclick', evt.pageX - offset.left, evt.pageY - offset.top);\n      });\n      if (this.options.rangeSelect) {\n        this.selectionRect = this.raphael.rect(0, 0, 0, this.el.innerHeight()).attr({\n          fill: this.options.rangeSelectColor,\n          stroke: false\n        }).toBack().hide();\n        this.el.bind('mousedown', function(evt) {\n          var offset;\n          offset = _this.el.offset();\n          return _this.startRange(evt.pageX - offset.left);\n        });\n        this.el.bind('mouseup', function(evt) {\n          var offset;\n          offset = _this.el.offset();\n          _this.endRange(evt.pageX - offset.left);\n          return _this.fire('hovermove', evt.pageX - offset.left, evt.pageY - offset.top);\n        });\n      }\n      if (this.options.resize) {\n        $(window).bind('resize', function(evt) {\n          if (_this.timeoutId != null) {\n            window.clearTimeout(_this.timeoutId);\n          }\n          return _this.timeoutId = window.setTimeout(_this.resizeHandler, 100);\n        });\n      }\n      this.el.css('-webkit-tap-highlight-color', 'rgba(0,0,0,0)');\n      if (this.postInit) {\n        this.postInit();\n      }\n    }\n\n    Grid.prototype.gridDefaults = {\n      dateFormat: null,\n      axes: true,\n      grid: true,\n      gridLineColor: '#aaa',\n      gridStrokeWidth: 0.5,\n      gridTextColor: '#888',\n      gridTextSize: 12,\n      gridTextFamily: 'sans-serif',\n      gridTextWeight: 'normal',\n      hideHover: false,\n      yLabelFormat: null,\n      xLabelAngle: 0,\n      numLines: 5,\n      padding: 25,\n      parseTime: true,\n      postUnits: '',\n      preUnits: '',\n      ymax: 'auto',\n      ymin: 'auto 0',\n      goals: [],\n      goalStrokeWidth: 1.0,\n      goalLineColors: ['#666633', '#999966', '#cc6666', '#663333'],\n      events: [],\n      eventStrokeWidth: 1.0,\n      eventLineColors: ['#005a04', '#ccffbb', '#3a5f0b', '#005502'],\n      rangeSelect: null,\n      rangeSelectColor: '#eef',\n      resize: false\n    };\n\n    Grid.prototype.setData = function(data, redraw) {\n      var e, idx, index, maxGoal, minGoal, ret, row, step, total, y, ykey, ymax, ymin, yval, _ref;\n      if (redraw == null) {\n        redraw = true;\n      }\n      this.options.data = data;\n      if ((data == null) || data.length === 0) {\n        this.data = [];\n        this.raphael.clear();\n        if (this.hover != null) {\n          this.hover.hide();\n        }\n        return;\n      }\n      ymax = this.cumulative ? 0 : null;\n      ymin = this.cumulative ? 0 : null;\n      if (this.options.goals.length > 0) {\n        minGoal = Math.min.apply(Math, this.options.goals);\n        maxGoal = Math.max.apply(Math, this.options.goals);\n        ymin = ymin != null ? Math.min(ymin, minGoal) : minGoal;\n        ymax = ymax != null ? Math.max(ymax, maxGoal) : maxGoal;\n      }\n      this.data = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {\n          row = data[index];\n          ret = {\n            src: row\n          };\n          ret.label = row[this.options.xkey];\n          if (this.options.parseTime) {\n            ret.x = Morris.parseDate(ret.label);\n            if (this.options.dateFormat) {\n              ret.label = this.options.dateFormat(ret.x);\n            } else if (typeof ret.label === 'number') {\n              ret.label = new Date(ret.label).toString();\n            }\n          } else {\n            ret.x = index;\n            if (this.options.xLabelFormat) {\n              ret.label = this.options.xLabelFormat(ret);\n            }\n          }\n          total = 0;\n          ret.y = (function() {\n            var _j, _len1, _ref, _results1;\n            _ref = this.options.ykeys;\n            _results1 = [];\n            for (idx = _j = 0, _len1 = _ref.length; _j < _len1; idx = ++_j) {\n              ykey = _ref[idx];\n              yval = row[ykey];\n              if (typeof yval === 'string') {\n                yval = parseFloat(yval);\n              }\n              if ((yval != null) && typeof yval !== 'number') {\n                yval = null;\n              }\n              if (yval != null) {\n                if (this.cumulative) {\n                  total += yval;\n                } else {\n                  if (ymax != null) {\n                    ymax = Math.max(yval, ymax);\n                    ymin = Math.min(yval, ymin);\n                  } else {\n                    ymax = ymin = yval;\n                  }\n                }\n              }\n              if (this.cumulative && (total != null)) {\n                ymax = Math.max(total, ymax);\n                ymin = Math.min(total, ymin);\n              }\n              _results1.push(yval);\n            }\n            return _results1;\n          }).call(this);\n          _results.push(ret);\n        }\n        return _results;\n      }).call(this);\n      if (this.options.parseTime) {\n        this.data = this.data.sort(function(a, b) {\n          return (a.x > b.x) - (b.x > a.x);\n        });\n      }\n      this.xmin = this.data[0].x;\n      this.xmax = this.data[this.data.length - 1].x;\n      this.events = [];\n      if (this.options.events.length > 0) {\n        if (this.options.parseTime) {\n          this.events = (function() {\n            var _i, _len, _ref, _results;\n            _ref = this.options.events;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              e = _ref[_i];\n              _results.push(Morris.parseDate(e));\n            }\n            return _results;\n          }).call(this);\n        } else {\n          this.events = this.options.events;\n        }\n        this.xmax = Math.max(this.xmax, Math.max.apply(Math, this.events));\n        this.xmin = Math.min(this.xmin, Math.min.apply(Math, this.events));\n      }\n      if (this.xmin === this.xmax) {\n        this.xmin -= 1;\n        this.xmax += 1;\n      }\n      this.ymin = this.yboundary('min', ymin);\n      this.ymax = this.yboundary('max', ymax);\n      if (this.ymin === this.ymax) {\n        if (ymin) {\n          this.ymin -= 1;\n        }\n        this.ymax += 1;\n      }\n      if (((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') || this.options.grid === true) {\n        if (this.options.ymax === this.gridDefaults.ymax && this.options.ymin === this.gridDefaults.ymin) {\n          this.grid = this.autoGridLines(this.ymin, this.ymax, this.options.numLines);\n          this.ymin = Math.min(this.ymin, this.grid[0]);\n          this.ymax = Math.max(this.ymax, this.grid[this.grid.length - 1]);\n        } else {\n          step = (this.ymax - this.ymin) / (this.options.numLines - 1);\n          this.grid = (function() {\n            var _i, _ref1, _ref2, _results;\n            _results = [];\n            for (y = _i = _ref1 = this.ymin, _ref2 = this.ymax; step > 0 ? _i <= _ref2 : _i >= _ref2; y = _i += step) {\n              _results.push(y);\n            }\n            return _results;\n          }).call(this);\n        }\n      }\n      this.dirty = true;\n      if (redraw) {\n        return this.redraw();\n      }\n    };\n\n    Grid.prototype.yboundary = function(boundaryType, currentValue) {\n      var boundaryOption, suggestedValue;\n      boundaryOption = this.options[\"y\" + boundaryType];\n      if (typeof boundaryOption === 'string') {\n        if (boundaryOption.slice(0, 4) === 'auto') {\n          if (boundaryOption.length > 5) {\n            suggestedValue = parseInt(boundaryOption.slice(5), 10);\n            if (currentValue == null) {\n              return suggestedValue;\n            }\n            return Math[boundaryType](currentValue, suggestedValue);\n          } else {\n            if (currentValue != null) {\n              return currentValue;\n            } else {\n              return 0;\n            }\n          }\n        } else {\n          return parseInt(boundaryOption, 10);\n        }\n      } else {\n        return boundaryOption;\n      }\n    };\n\n    Grid.prototype.autoGridLines = function(ymin, ymax, nlines) {\n      var gmax, gmin, grid, smag, span, step, unit, y, ymag;\n      span = ymax - ymin;\n      ymag = Math.floor(Math.log(span) / Math.log(10));\n      unit = Math.pow(10, ymag);\n      gmin = Math.floor(ymin / unit) * unit;\n      gmax = Math.ceil(ymax / unit) * unit;\n      step = (gmax - gmin) / (nlines - 1);\n      if (unit === 1 && step > 1 && Math.ceil(step) !== step) {\n        step = Math.ceil(step);\n        gmax = gmin + step * (nlines - 1);\n      }\n      if (gmin < 0 && gmax > 0) {\n        gmin = Math.floor(ymin / step) * step;\n        gmax = Math.ceil(ymax / step) * step;\n      }\n      if (step < 1) {\n        smag = Math.floor(Math.log(step) / Math.log(10));\n        grid = (function() {\n          var _i, _results;\n          _results = [];\n          for (y = _i = gmin; step > 0 ? _i <= gmax : _i >= gmax; y = _i += step) {\n            _results.push(parseFloat(y.toFixed(1 - smag)));\n          }\n          return _results;\n        })();\n      } else {\n        grid = (function() {\n          var _i, _results;\n          _results = [];\n          for (y = _i = gmin; step > 0 ? _i <= gmax : _i >= gmax; y = _i += step) {\n            _results.push(y);\n          }\n          return _results;\n        })();\n      }\n      return grid;\n    };\n\n    Grid.prototype._calc = function() {\n      var bottomOffsets, gridLine, h, i, w, yLabelWidths, _ref, _ref1;\n      w = this.el.width();\n      h = this.el.height();\n      if (this.elementWidth !== w || this.elementHeight !== h || this.dirty) {\n        this.elementWidth = w;\n        this.elementHeight = h;\n        this.dirty = false;\n        this.left = this.options.padding;\n        this.right = this.elementWidth - this.options.padding;\n        this.top = this.options.padding;\n        this.bottom = this.elementHeight - this.options.padding;\n        if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') {\n          yLabelWidths = (function() {\n            var _i, _len, _ref1, _results;\n            _ref1 = this.grid;\n            _results = [];\n            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n              gridLine = _ref1[_i];\n              _results.push(this.measureText(this.yAxisFormat(gridLine)).width);\n            }\n            return _results;\n          }).call(this);\n          this.left += Math.max.apply(Math, yLabelWidths);\n        }\n        if ((_ref1 = this.options.axes) === true || _ref1 === 'both' || _ref1 === 'x') {\n          bottomOffsets = (function() {\n            var _i, _ref2, _results;\n            _results = [];\n            for (i = _i = 0, _ref2 = this.data.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {\n              _results.push(this.measureText(this.data[i].text, -this.options.xLabelAngle).height);\n            }\n            return _results;\n          }).call(this);\n          this.bottom -= Math.max.apply(Math, bottomOffsets);\n        }\n        this.width = Math.max(1, this.right - this.left);\n        this.height = Math.max(1, this.bottom - this.top);\n        this.dx = this.width / (this.xmax - this.xmin);\n        this.dy = this.height / (this.ymax - this.ymin);\n        if (this.calc) {\n          return this.calc();\n        }\n      }\n    };\n\n    Grid.prototype.transY = function(y) {\n      return this.bottom - (y - this.ymin) * this.dy;\n    };\n\n    Grid.prototype.transX = function(x) {\n      if (this.data.length === 1) {\n        return (this.left + this.right) / 2;\n      } else {\n        return this.left + (x - this.xmin) * this.dx;\n      }\n    };\n\n    Grid.prototype.redraw = function() {\n      this.raphael.clear();\n      this._calc();\n      this.drawGrid();\n      this.drawGoals();\n      this.drawEvents();\n      if (this.draw) {\n        return this.draw();\n      }\n    };\n\n    Grid.prototype.measureText = function(text, angle) {\n      var ret, tt;\n      if (angle == null) {\n        angle = 0;\n      }\n      tt = this.raphael.text(100, 100, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).rotate(angle);\n      ret = tt.getBBox();\n      tt.remove();\n      return ret;\n    };\n\n    Grid.prototype.yAxisFormat = function(label) {\n      return this.yLabelFormat(label);\n    };\n\n    Grid.prototype.yLabelFormat = function(label) {\n      if (typeof this.options.yLabelFormat === 'function') {\n        return this.options.yLabelFormat(label);\n      } else {\n        return \"\" + this.options.preUnits + (Morris.commas(label)) + this.options.postUnits;\n      }\n    };\n\n    Grid.prototype.drawGrid = function() {\n      var lineY, y, _i, _len, _ref, _ref1, _ref2, _results;\n      if (this.options.grid === false && ((_ref = this.options.axes) !== true && _ref !== 'both' && _ref !== 'y')) {\n        return;\n      }\n      _ref1 = this.grid;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        lineY = _ref1[_i];\n        y = this.transY(lineY);\n        if ((_ref2 = this.options.axes) === true || _ref2 === 'both' || _ref2 === 'y') {\n          this.drawYAxisLabel(this.left - this.options.padding / 2, y, this.yAxisFormat(lineY));\n        }\n        if (this.options.grid) {\n          _results.push(this.drawGridLine(\"M\" + this.left + \",\" + y + \"H\" + (this.left + this.width)));\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawGoals = function() {\n      var color, goal, i, _i, _len, _ref, _results;\n      _ref = this.options.goals;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        goal = _ref[i];\n        color = this.options.goalLineColors[i % this.options.goalLineColors.length];\n        _results.push(this.drawGoal(goal, color));\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawEvents = function() {\n      var color, event, i, _i, _len, _ref, _results;\n      _ref = this.events;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        event = _ref[i];\n        color = this.options.eventLineColors[i % this.options.eventLineColors.length];\n        _results.push(this.drawEvent(event, color));\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawGoal = function(goal, color) {\n      return this.raphael.path(\"M\" + this.left + \",\" + (this.transY(goal)) + \"H\" + this.right).attr('stroke', color).attr('stroke-width', this.options.goalStrokeWidth);\n    };\n\n    Grid.prototype.drawEvent = function(event, color) {\n      return this.raphael.path(\"M\" + (this.transX(event)) + \",\" + this.bottom + \"V\" + this.top).attr('stroke', color).attr('stroke-width', this.options.eventStrokeWidth);\n    };\n\n    Grid.prototype.drawYAxisLabel = function(xPos, yPos, text) {\n      return this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor).attr('text-anchor', 'end');\n    };\n\n    Grid.prototype.drawGridLine = function(path) {\n      return this.raphael.path(path).attr('stroke', this.options.gridLineColor).attr('stroke-width', this.options.gridStrokeWidth);\n    };\n\n    Grid.prototype.startRange = function(x) {\n      this.hover.hide();\n      this.selectFrom = x;\n      return this.selectionRect.attr({\n        x: x,\n        width: 0\n      }).show();\n    };\n\n    Grid.prototype.endRange = function(x) {\n      var end, start;\n      if (this.selectFrom) {\n        start = Math.min(this.selectFrom, x);\n        end = Math.max(this.selectFrom, x);\n        this.options.rangeSelect.call(this.el, {\n          start: this.data[this.hitTest(start)].x,\n          end: this.data[this.hitTest(end)].x\n        });\n        return this.selectFrom = null;\n      }\n    };\n\n    Grid.prototype.resizeHandler = function() {\n      this.timeoutId = null;\n      this.raphael.setSize(this.el.width(), this.el.height());\n      return this.redraw();\n    };\n\n    return Grid;\n\n  })(Morris.EventEmitter);\n\n  Morris.parseDate = function(date) {\n    var isecs, m, msecs, n, o, offsetmins, p, q, r, ret, secs;\n    if (typeof date === 'number') {\n      return date;\n    }\n    m = date.match(/^(\\d+) Q(\\d)$/);\n    n = date.match(/^(\\d+)-(\\d+)$/);\n    o = date.match(/^(\\d+)-(\\d+)-(\\d+)$/);\n    p = date.match(/^(\\d+) W(\\d+)$/);\n    q = date.match(/^(\\d+)-(\\d+)-(\\d+)[ T](\\d+):(\\d+)(Z|([+-])(\\d\\d):?(\\d\\d))?$/);\n    r = date.match(/^(\\d+)-(\\d+)-(\\d+)[ T](\\d+):(\\d+):(\\d+(\\.\\d+)?)(Z|([+-])(\\d\\d):?(\\d\\d))?$/);\n    if (m) {\n      return new Date(parseInt(m[1], 10), parseInt(m[2], 10) * 3 - 1, 1).getTime();\n    } else if (n) {\n      return new Date(parseInt(n[1], 10), parseInt(n[2], 10) - 1, 1).getTime();\n    } else if (o) {\n      return new Date(parseInt(o[1], 10), parseInt(o[2], 10) - 1, parseInt(o[3], 10)).getTime();\n    } else if (p) {\n      ret = new Date(parseInt(p[1], 10), 0, 1);\n      if (ret.getDay() !== 4) {\n        ret.setMonth(0, 1 + ((4 - ret.getDay()) + 7) % 7);\n      }\n      return ret.getTime() + parseInt(p[2], 10) * 604800000;\n    } else if (q) {\n      if (!q[6]) {\n        return new Date(parseInt(q[1], 10), parseInt(q[2], 10) - 1, parseInt(q[3], 10), parseInt(q[4], 10), parseInt(q[5], 10)).getTime();\n      } else {\n        offsetmins = 0;\n        if (q[6] !== 'Z') {\n          offsetmins = parseInt(q[8], 10) * 60 + parseInt(q[9], 10);\n          if (q[7] === '+') {\n            offsetmins = 0 - offsetmins;\n          }\n        }\n        return Date.UTC(parseInt(q[1], 10), parseInt(q[2], 10) - 1, parseInt(q[3], 10), parseInt(q[4], 10), parseInt(q[5], 10) + offsetmins);\n      }\n    } else if (r) {\n      secs = parseFloat(r[6]);\n      isecs = Math.floor(secs);\n      msecs = Math.round((secs - isecs) * 1000);\n      if (!r[8]) {\n        return new Date(parseInt(r[1], 10), parseInt(r[2], 10) - 1, parseInt(r[3], 10), parseInt(r[4], 10), parseInt(r[5], 10), isecs, msecs).getTime();\n      } else {\n        offsetmins = 0;\n        if (r[8] !== 'Z') {\n          offsetmins = parseInt(r[10], 10) * 60 + parseInt(r[11], 10);\n          if (r[9] === '+') {\n            offsetmins = 0 - offsetmins;\n          }\n        }\n        return Date.UTC(parseInt(r[1], 10), parseInt(r[2], 10) - 1, parseInt(r[3], 10), parseInt(r[4], 10), parseInt(r[5], 10) + offsetmins, isecs, msecs);\n      }\n    } else {\n      return new Date(parseInt(date, 10), 0, 1).getTime();\n    }\n  };\n\n  Morris.Hover = (function() {\n    Hover.defaults = {\n      \"class\": 'morris-hover morris-default-style'\n    };\n\n    function Hover(options) {\n      if (options == null) {\n        options = {};\n      }\n      this.options = $.extend({}, Morris.Hover.defaults, options);\n      this.el = $(\"<div class='\" + this.options[\"class\"] + \"'></div>\");\n      this.el.hide();\n      this.options.parent.append(this.el);\n    }\n\n    Hover.prototype.update = function(html, x, y) {\n      if (!html) {\n        return this.hide();\n      } else {\n        this.html(html);\n        this.show();\n        return this.moveTo(x, y);\n      }\n    };\n\n    Hover.prototype.html = function(content) {\n      return this.el.html(content);\n    };\n\n    Hover.prototype.moveTo = function(x, y) {\n      var hoverHeight, hoverWidth, left, parentHeight, parentWidth, top;\n      parentWidth = this.options.parent.innerWidth();\n      parentHeight = this.options.parent.innerHeight();\n      hoverWidth = this.el.outerWidth();\n      hoverHeight = this.el.outerHeight();\n      left = Math.min(Math.max(0, x - hoverWidth / 2), parentWidth - hoverWidth);\n      if (y != null) {\n        top = y - hoverHeight - 10;\n        if (top < 0) {\n          top = y + 10;\n          if (top + hoverHeight > parentHeight) {\n            top = parentHeight / 2 - hoverHeight / 2;\n          }\n        }\n      } else {\n        top = parentHeight / 2 - hoverHeight / 2;\n      }\n      return this.el.css({\n        left: left + \"px\",\n        top: parseInt(top) + \"px\"\n      });\n    };\n\n    Hover.prototype.show = function() {\n      return this.el.show();\n    };\n\n    Hover.prototype.hide = function() {\n      return this.el.hide();\n    };\n\n    return Hover;\n\n  })();\n\n  Morris.Line = (function(_super) {\n    __extends(Line, _super);\n\n    function Line(options) {\n      this.hilight = __bind(this.hilight, this);\n      this.onHoverOut = __bind(this.onHoverOut, this);\n      this.onHoverMove = __bind(this.onHoverMove, this);\n      this.onGridClick = __bind(this.onGridClick, this);\n      if (!(this instanceof Morris.Line)) {\n        return new Morris.Line(options);\n      }\n      Line.__super__.constructor.call(this, options);\n    }\n\n    Line.prototype.init = function() {\n      if (this.options.hideHover !== 'always') {\n        this.hover = new Morris.Hover({\n          parent: this.el\n        });\n        this.on('hovermove', this.onHoverMove);\n        this.on('hoverout', this.onHoverOut);\n        return this.on('gridclick', this.onGridClick);\n      }\n    };\n\n    Line.prototype.defaults = {\n      lineWidth: 3,\n      pointSize: 4,\n      lineColors: ['#0b62a4', '#7A92A3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed'],\n      pointStrokeWidths: [1],\n      pointStrokeColors: ['#ffffff'],\n      pointFillColors: [],\n      smooth: true,\n      xLabels: 'auto',\n      xLabelFormat: null,\n      xLabelMargin: 24,\n      hideHover: false\n    };\n\n    Line.prototype.calc = function() {\n      this.calcPoints();\n      return this.generatePaths();\n    };\n\n    Line.prototype.calcPoints = function() {\n      var row, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        row._x = this.transX(row.x);\n        row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(this.transY(y));\n            } else {\n              _results1.push(y);\n            }\n          }\n          return _results1;\n        }).call(this);\n        _results.push(row._ymax = Math.min.apply(Math, [this.bottom].concat((function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row._y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(y);\n            }\n          }\n          return _results1;\n        })())));\n      }\n      return _results;\n    };\n\n    Line.prototype.hitTest = function(x) {\n      var index, r, _i, _len, _ref;\n      if (this.data.length === 0) {\n        return null;\n      }\n      _ref = this.data.slice(1);\n      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {\n        r = _ref[index];\n        if (x < (r._x + this.data[index]._x) / 2) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    Line.prototype.onGridClick = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.fire('click', index, this.data[index].src, x, y);\n    };\n\n    Line.prototype.onHoverMove = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.displayHoverForRow(index);\n    };\n\n    Line.prototype.onHoverOut = function() {\n      if (this.options.hideHover !== false) {\n        return this.displayHoverForRow(null);\n      }\n    };\n\n    Line.prototype.displayHoverForRow = function(index) {\n      var _ref;\n      if (index != null) {\n        (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(index));\n        return this.hilight(index);\n      } else {\n        this.hover.hide();\n        return this.hilight();\n      }\n    };\n\n    Line.prototype.hoverContentForRow = function(index) {\n      var content, j, row, y, _i, _len, _ref;\n      row = this.data[index];\n      content = \"<div class='morris-hover-row-label'>\" + row.label + \"</div>\";\n      _ref = row.y;\n      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {\n        y = _ref[j];\n        content += \"<div class='morris-hover-point' style='color: \" + (this.colorFor(row, j, 'label')) + \"'>\\n  \" + this.options.labels[j] + \":\\n  \" + (this.yLabelFormat(y)) + \"\\n</div>\";\n      }\n      if (typeof this.options.hoverCallback === 'function') {\n        content = this.options.hoverCallback(index, this.options, content, row.src);\n      }\n      return [content, row._x, row._ymax];\n    };\n\n    Line.prototype.generatePaths = function() {\n      var coords, i, r, smooth;\n      return this.paths = (function() {\n        var _i, _ref, _ref1, _results;\n        _results = [];\n        for (i = _i = 0, _ref = this.options.ykeys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n          smooth = typeof this.options.smooth === \"boolean\" ? this.options.smooth : (_ref1 = this.options.ykeys[i], __indexOf.call(this.options.smooth, _ref1) >= 0);\n          coords = (function() {\n            var _j, _len, _ref2, _results1;\n            _ref2 = this.data;\n            _results1 = [];\n            for (_j = 0, _len = _ref2.length; _j < _len; _j++) {\n              r = _ref2[_j];\n              if (r._y[i] !== void 0) {\n                _results1.push({\n                  x: r._x,\n                  y: r._y[i]\n                });\n              }\n            }\n            return _results1;\n          }).call(this);\n          if (coords.length > 1) {\n            _results.push(Morris.Line.createPath(coords, smooth, this.bottom));\n          } else {\n            _results.push(null);\n          }\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Line.prototype.draw = function() {\n      var _ref;\n      if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'x') {\n        this.drawXAxis();\n      }\n      this.drawSeries();\n      if (this.options.hideHover === false) {\n        return this.displayHoverForRow(this.data.length - 1);\n      }\n    };\n\n    Line.prototype.drawXAxis = function() {\n      var drawLabel, l, labels, prevAngleMargin, prevLabelMargin, row, ypos, _i, _len, _results,\n        _this = this;\n      ypos = this.bottom + this.options.padding / 2;\n      prevLabelMargin = null;\n      prevAngleMargin = null;\n      drawLabel = function(labelText, xpos) {\n        var label, labelBox, margin, offset, textBox;\n        label = _this.drawXAxisLabel(_this.transX(xpos), ypos, labelText);\n        textBox = label.getBBox();\n        label.transform(\"r\" + (-_this.options.xLabelAngle));\n        labelBox = label.getBBox();\n        label.transform(\"t0,\" + (labelBox.height / 2) + \"...\");\n        if (_this.options.xLabelAngle !== 0) {\n          offset = -0.5 * textBox.width * Math.cos(_this.options.xLabelAngle * Math.PI / 180.0);\n          label.transform(\"t\" + offset + \",0...\");\n        }\n        labelBox = label.getBBox();\n        if (((prevLabelMargin == null) || prevLabelMargin >= labelBox.x + labelBox.width || (prevAngleMargin != null) && prevAngleMargin >= labelBox.x) && labelBox.x >= 0 && (labelBox.x + labelBox.width) < _this.el.width()) {\n          if (_this.options.xLabelAngle !== 0) {\n            margin = 1.25 * _this.options.gridTextSize / Math.sin(_this.options.xLabelAngle * Math.PI / 180.0);\n            prevAngleMargin = labelBox.x - margin;\n          }\n          return prevLabelMargin = labelBox.x - _this.options.xLabelMargin;\n        } else {\n          return label.remove();\n        }\n      };\n      if (this.options.parseTime) {\n        if (this.data.length === 1 && this.options.xLabels === 'auto') {\n          labels = [[this.data[0].label, this.data[0].x]];\n        } else {\n          labels = Morris.labelSeries(this.xmin, this.xmax, this.width, this.options.xLabels, this.options.xLabelFormat);\n        }\n      } else {\n        labels = (function() {\n          var _i, _len, _ref, _results;\n          _ref = this.data;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            row = _ref[_i];\n            _results.push([row.label, row.x]);\n          }\n          return _results;\n        }).call(this);\n      }\n      labels.reverse();\n      _results = [];\n      for (_i = 0, _len = labels.length; _i < _len; _i++) {\n        l = labels[_i];\n        _results.push(drawLabel(l[0], l[1]));\n      }\n      return _results;\n    };\n\n    Line.prototype.drawSeries = function() {\n      var i, _i, _j, _ref, _ref1, _results;\n      this.seriesPoints = [];\n      for (i = _i = _ref = this.options.ykeys.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {\n        this._drawLineFor(i);\n      }\n      _results = [];\n      for (i = _j = _ref1 = this.options.ykeys.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; i = _ref1 <= 0 ? ++_j : --_j) {\n        _results.push(this._drawPointFor(i));\n      }\n      return _results;\n    };\n\n    Line.prototype._drawPointFor = function(index) {\n      var circle, row, _i, _len, _ref, _results;\n      this.seriesPoints[index] = [];\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        circle = null;\n        if (row._y[index] != null) {\n          circle = this.drawLinePoint(row._x, row._y[index], this.colorFor(row, index, 'point'), index);\n        }\n        _results.push(this.seriesPoints[index].push(circle));\n      }\n      return _results;\n    };\n\n    Line.prototype._drawLineFor = function(index) {\n      var path;\n      path = this.paths[index];\n      if (path !== null) {\n        return this.drawLinePath(path, this.colorFor(null, index, 'line'), index);\n      }\n    };\n\n    Line.createPath = function(coords, smooth, bottom) {\n      var coord, g, grads, i, ix, lg, path, prevCoord, x1, x2, y1, y2, _i, _len;\n      path = \"\";\n      if (smooth) {\n        grads = Morris.Line.gradients(coords);\n      }\n      prevCoord = {\n        y: null\n      };\n      for (i = _i = 0, _len = coords.length; _i < _len; i = ++_i) {\n        coord = coords[i];\n        if (coord.y != null) {\n          if (prevCoord.y != null) {\n            if (smooth) {\n              g = grads[i];\n              lg = grads[i - 1];\n              ix = (coord.x - prevCoord.x) / 4;\n              x1 = prevCoord.x + ix;\n              y1 = Math.min(bottom, prevCoord.y + ix * lg);\n              x2 = coord.x - ix;\n              y2 = Math.min(bottom, coord.y - ix * g);\n              path += \"C\" + x1 + \",\" + y1 + \",\" + x2 + \",\" + y2 + \",\" + coord.x + \",\" + coord.y;\n            } else {\n              path += \"L\" + coord.x + \",\" + coord.y;\n            }\n          } else {\n            if (!smooth || (grads[i] != null)) {\n              path += \"M\" + coord.x + \",\" + coord.y;\n            }\n          }\n        }\n        prevCoord = coord;\n      }\n      return path;\n    };\n\n    Line.gradients = function(coords) {\n      var coord, grad, i, nextCoord, prevCoord, _i, _len, _results;\n      grad = function(a, b) {\n        return (a.y - b.y) / (a.x - b.x);\n      };\n      _results = [];\n      for (i = _i = 0, _len = coords.length; _i < _len; i = ++_i) {\n        coord = coords[i];\n        if (coord.y != null) {\n          nextCoord = coords[i + 1] || {\n            y: null\n          };\n          prevCoord = coords[i - 1] || {\n            y: null\n          };\n          if ((prevCoord.y != null) && (nextCoord.y != null)) {\n            _results.push(grad(prevCoord, nextCoord));\n          } else if (prevCoord.y != null) {\n            _results.push(grad(prevCoord, coord));\n          } else if (nextCoord.y != null) {\n            _results.push(grad(coord, nextCoord));\n          } else {\n            _results.push(null);\n          }\n        } else {\n          _results.push(null);\n        }\n      }\n      return _results;\n    };\n\n    Line.prototype.hilight = function(index) {\n      var i, _i, _j, _ref, _ref1;\n      if (this.prevHilight !== null && this.prevHilight !== index) {\n        for (i = _i = 0, _ref = this.seriesPoints.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\n          if (this.seriesPoints[i][this.prevHilight]) {\n            this.seriesPoints[i][this.prevHilight].animate(this.pointShrinkSeries(i));\n          }\n        }\n      }\n      if (index !== null && this.prevHilight !== index) {\n        for (i = _j = 0, _ref1 = this.seriesPoints.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n          if (this.seriesPoints[i][index]) {\n            this.seriesPoints[i][index].animate(this.pointGrowSeries(i));\n          }\n        }\n      }\n      return this.prevHilight = index;\n    };\n\n    Line.prototype.colorFor = function(row, sidx, type) {\n      if (typeof this.options.lineColors === 'function') {\n        return this.options.lineColors.call(this, row, sidx, type);\n      } else if (type === 'point') {\n        return this.options.pointFillColors[sidx % this.options.pointFillColors.length] || this.options.lineColors[sidx % this.options.lineColors.length];\n      } else {\n        return this.options.lineColors[sidx % this.options.lineColors.length];\n      }\n    };\n\n    Line.prototype.drawXAxisLabel = function(xPos, yPos, text) {\n      return this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor);\n    };\n\n    Line.prototype.drawLinePath = function(path, lineColor, lineIndex) {\n      return this.raphael.path(path).attr('stroke', lineColor).attr('stroke-width', this.lineWidthForSeries(lineIndex));\n    };\n\n    Line.prototype.drawLinePoint = function(xPos, yPos, pointColor, lineIndex) {\n      return this.raphael.circle(xPos, yPos, this.pointSizeForSeries(lineIndex)).attr('fill', pointColor).attr('stroke-width', this.pointStrokeWidthForSeries(lineIndex)).attr('stroke', this.pointStrokeColorForSeries(lineIndex));\n    };\n\n    Line.prototype.pointStrokeWidthForSeries = function(index) {\n      return this.options.pointStrokeWidths[index % this.options.pointStrokeWidths.length];\n    };\n\n    Line.prototype.pointStrokeColorForSeries = function(index) {\n      return this.options.pointStrokeColors[index % this.options.pointStrokeColors.length];\n    };\n\n    Line.prototype.lineWidthForSeries = function(index) {\n      if (this.options.lineWidth instanceof Array) {\n        return this.options.lineWidth[index % this.options.lineWidth.length];\n      } else {\n        return this.options.lineWidth;\n      }\n    };\n\n    Line.prototype.pointSizeForSeries = function(index) {\n      if (this.options.pointSize instanceof Array) {\n        return this.options.pointSize[index % this.options.pointSize.length];\n      } else {\n        return this.options.pointSize;\n      }\n    };\n\n    Line.prototype.pointGrowSeries = function(index) {\n      return Raphael.animation({\n        r: this.pointSizeForSeries(index) + 3\n      }, 25, 'linear');\n    };\n\n    Line.prototype.pointShrinkSeries = function(index) {\n      return Raphael.animation({\n        r: this.pointSizeForSeries(index)\n      }, 25, 'linear');\n    };\n\n    return Line;\n\n  })(Morris.Grid);\n\n  Morris.labelSeries = function(dmin, dmax, pxwidth, specName, xLabelFormat) {\n    var d, d0, ddensity, name, ret, s, spec, t, _i, _len, _ref;\n    ddensity = 200 * (dmax - dmin) / pxwidth;\n    d0 = new Date(dmin);\n    spec = Morris.LABEL_SPECS[specName];\n    if (spec === void 0) {\n      _ref = Morris.AUTO_LABEL_ORDER;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        name = _ref[_i];\n        s = Morris.LABEL_SPECS[name];\n        if (ddensity >= s.span) {\n          spec = s;\n          break;\n        }\n      }\n    }\n    if (spec === void 0) {\n      spec = Morris.LABEL_SPECS[\"second\"];\n    }\n    if (xLabelFormat) {\n      spec = $.extend({}, spec, {\n        fmt: xLabelFormat\n      });\n    }\n    d = spec.start(d0);\n    ret = [];\n    while ((t = d.getTime()) <= dmax) {\n      if (t >= dmin) {\n        ret.push([spec.fmt(d), t]);\n      }\n      spec.incr(d);\n    }\n    return ret;\n  };\n\n  minutesSpecHelper = function(interval) {\n    return {\n      span: interval * 60 * 1000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours());\n      },\n      fmt: function(d) {\n        return \"\" + (Morris.pad2(d.getHours())) + \":\" + (Morris.pad2(d.getMinutes()));\n      },\n      incr: function(d) {\n        return d.setUTCMinutes(d.getUTCMinutes() + interval);\n      }\n    };\n  };\n\n  secondsSpecHelper = function(interval) {\n    return {\n      span: interval * 1000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes());\n      },\n      fmt: function(d) {\n        return \"\" + (Morris.pad2(d.getHours())) + \":\" + (Morris.pad2(d.getMinutes())) + \":\" + (Morris.pad2(d.getSeconds()));\n      },\n      incr: function(d) {\n        return d.setUTCSeconds(d.getUTCSeconds() + interval);\n      }\n    };\n  };\n\n  Morris.LABEL_SPECS = {\n    \"decade\": {\n      span: 172800000000,\n      start: function(d) {\n        return new Date(d.getFullYear() - d.getFullYear() % 10, 0, 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear());\n      },\n      incr: function(d) {\n        return d.setFullYear(d.getFullYear() + 10);\n      }\n    },\n    \"year\": {\n      span: 17280000000,\n      start: function(d) {\n        return new Date(d.getFullYear(), 0, 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear());\n      },\n      incr: function(d) {\n        return d.setFullYear(d.getFullYear() + 1);\n      }\n    },\n    \"month\": {\n      span: 2419200000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1));\n      },\n      incr: function(d) {\n        return d.setMonth(d.getMonth() + 1);\n      }\n    },\n    \"week\": {\n      span: 604800000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1)) + \"-\" + (Morris.pad2(d.getDate()));\n      },\n      incr: function(d) {\n        return d.setDate(d.getDate() + 7);\n      }\n    },\n    \"day\": {\n      span: 86400000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1)) + \"-\" + (Morris.pad2(d.getDate()));\n      },\n      incr: function(d) {\n        return d.setDate(d.getDate() + 1);\n      }\n    },\n    \"hour\": minutesSpecHelper(60),\n    \"30min\": minutesSpecHelper(30),\n    \"15min\": minutesSpecHelper(15),\n    \"10min\": minutesSpecHelper(10),\n    \"5min\": minutesSpecHelper(5),\n    \"minute\": minutesSpecHelper(1),\n    \"30sec\": secondsSpecHelper(30),\n    \"15sec\": secondsSpecHelper(15),\n    \"10sec\": secondsSpecHelper(10),\n    \"5sec\": secondsSpecHelper(5),\n    \"second\": secondsSpecHelper(1)\n  };\n\n  Morris.AUTO_LABEL_ORDER = [\"decade\", \"year\", \"month\", \"week\", \"day\", \"hour\", \"30min\", \"15min\", \"10min\", \"5min\", \"minute\", \"30sec\", \"15sec\", \"10sec\", \"5sec\", \"second\"];\n\n  Morris.Area = (function(_super) {\n    var areaDefaults;\n\n    __extends(Area, _super);\n\n    areaDefaults = {\n      fillOpacity: 'auto',\n      behaveLikeLine: false\n    };\n\n    function Area(options) {\n      var areaOptions;\n      if (!(this instanceof Morris.Area)) {\n        return new Morris.Area(options);\n      }\n      areaOptions = $.extend({}, areaDefaults, options);\n      this.cumulative = !areaOptions.behaveLikeLine;\n      if (areaOptions.fillOpacity === 'auto') {\n        areaOptions.fillOpacity = areaOptions.behaveLikeLine ? .8 : 1;\n      }\n      Area.__super__.constructor.call(this, areaOptions);\n    }\n\n    Area.prototype.calcPoints = function() {\n      var row, total, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        row._x = this.transX(row.x);\n        total = 0;\n        row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (this.options.behaveLikeLine) {\n              _results1.push(this.transY(y));\n            } else {\n              total += y || 0;\n              _results1.push(this.transY(total));\n            }\n          }\n          return _results1;\n        }).call(this);\n        _results.push(row._ymax = Math.max.apply(Math, row._y));\n      }\n      return _results;\n    };\n\n    Area.prototype.drawSeries = function() {\n      var i, range, _i, _j, _k, _len, _ref, _ref1, _results, _results1, _results2;\n      this.seriesPoints = [];\n      if (this.options.behaveLikeLine) {\n        range = (function() {\n          _results = [];\n          for (var _i = 0, _ref = this.options.ykeys.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }\n          return _results;\n        }).apply(this);\n      } else {\n        range = (function() {\n          _results1 = [];\n          for (var _j = _ref1 = this.options.ykeys.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; _ref1 <= 0 ? _j++ : _j--){ _results1.push(_j); }\n          return _results1;\n        }).apply(this);\n      }\n      _results2 = [];\n      for (_k = 0, _len = range.length; _k < _len; _k++) {\n        i = range[_k];\n        this._drawFillFor(i);\n        this._drawLineFor(i);\n        _results2.push(this._drawPointFor(i));\n      }\n      return _results2;\n    };\n\n    Area.prototype._drawFillFor = function(index) {\n      var path;\n      path = this.paths[index];\n      if (path !== null) {\n        path = path + (\"L\" + (this.transX(this.xmax)) + \",\" + this.bottom + \"L\" + (this.transX(this.xmin)) + \",\" + this.bottom + \"Z\");\n        return this.drawFilledPath(path, this.fillForSeries(index));\n      }\n    };\n\n    Area.prototype.fillForSeries = function(i) {\n      var color;\n      color = Raphael.rgb2hsl(this.colorFor(this.data[i], i, 'line'));\n      return Raphael.hsl(color.h, this.options.behaveLikeLine ? color.s * 0.9 : color.s * 0.75, Math.min(0.98, this.options.behaveLikeLine ? color.l * 1.2 : color.l * 1.25));\n    };\n\n    Area.prototype.drawFilledPath = function(path, fill) {\n      return this.raphael.path(path).attr('fill', fill).attr('fill-opacity', this.options.fillOpacity).attr('stroke', 'none');\n    };\n\n    return Area;\n\n  })(Morris.Line);\n\n  Morris.Bar = (function(_super) {\n    __extends(Bar, _super);\n\n    function Bar(options) {\n      this.onHoverOut = __bind(this.onHoverOut, this);\n      this.onHoverMove = __bind(this.onHoverMove, this);\n      this.onGridClick = __bind(this.onGridClick, this);\n      if (!(this instanceof Morris.Bar)) {\n        return new Morris.Bar(options);\n      }\n      Bar.__super__.constructor.call(this, $.extend({}, options, {\n        parseTime: false\n      }));\n    }\n\n    Bar.prototype.init = function() {\n      this.cumulative = this.options.stacked;\n      if (this.options.hideHover !== 'always') {\n        this.hover = new Morris.Hover({\n          parent: this.el\n        });\n        this.on('hovermove', this.onHoverMove);\n        this.on('hoverout', this.onHoverOut);\n        return this.on('gridclick', this.onGridClick);\n      }\n    };\n\n    Bar.prototype.defaults = {\n      barSizeRatio: 0.75,\n      barGap: 3,\n      barColors: ['#0b62a4', '#7a92a3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed'],\n      barOpacity: 1.0,\n      barRadius: [0, 0, 0, 0],\n      xLabelMargin: 50\n    };\n\n    Bar.prototype.calc = function() {\n      var _ref;\n      this.calcBars();\n      if (this.options.hideHover === false) {\n        return (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(this.data.length - 1));\n      }\n    };\n\n    Bar.prototype.calcBars = function() {\n      var idx, row, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {\n        row = _ref[idx];\n        row._x = this.left + this.width * (idx + 0.5) / this.data.length;\n        _results.push(row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(this.transY(y));\n            } else {\n              _results1.push(null);\n            }\n          }\n          return _results1;\n        }).call(this));\n      }\n      return _results;\n    };\n\n    Bar.prototype.draw = function() {\n      var _ref;\n      if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'x') {\n        this.drawXAxis();\n      }\n      return this.drawSeries();\n    };\n\n    Bar.prototype.drawXAxis = function() {\n      var i, label, labelBox, margin, offset, prevAngleMargin, prevLabelMargin, row, textBox, ypos, _i, _ref, _results;\n      ypos = this.bottom + (this.options.xAxisLabelTopPadding || this.options.padding / 2);\n      prevLabelMargin = null;\n      prevAngleMargin = null;\n      _results = [];\n      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n        row = this.data[this.data.length - 1 - i];\n        label = this.drawXAxisLabel(row._x, ypos, row.label);\n        textBox = label.getBBox();\n        label.transform(\"r\" + (-this.options.xLabelAngle));\n        labelBox = label.getBBox();\n        label.transform(\"t0,\" + (labelBox.height / 2) + \"...\");\n        if (this.options.xLabelAngle !== 0) {\n          offset = -0.5 * textBox.width * Math.cos(this.options.xLabelAngle * Math.PI / 180.0);\n          label.transform(\"t\" + offset + \",0...\");\n        }\n        if (((prevLabelMargin == null) || prevLabelMargin >= labelBox.x + labelBox.width || (prevAngleMargin != null) && prevAngleMargin >= labelBox.x) && labelBox.x >= 0 && (labelBox.x + labelBox.width) < this.el.width()) {\n          if (this.options.xLabelAngle !== 0) {\n            margin = 1.25 * this.options.gridTextSize / Math.sin(this.options.xLabelAngle * Math.PI / 180.0);\n            prevAngleMargin = labelBox.x - margin;\n          }\n          _results.push(prevLabelMargin = labelBox.x - this.options.xLabelMargin);\n        } else {\n          _results.push(label.remove());\n        }\n      }\n      return _results;\n    };\n\n    Bar.prototype.drawSeries = function() {\n      var barWidth, bottom, groupWidth, idx, lastTop, left, leftPadding, numBars, row, sidx, size, spaceLeft, top, ypos, zeroPos;\n      groupWidth = this.width / this.options.data.length;\n      numBars = this.options.stacked ? 1 : this.options.ykeys.length;\n      barWidth = (groupWidth * this.options.barSizeRatio - this.options.barGap * (numBars - 1)) / numBars;\n      if (this.options.barSize) {\n        barWidth = Math.min(barWidth, this.options.barSize);\n      }\n      spaceLeft = groupWidth - barWidth * numBars - this.options.barGap * (numBars - 1);\n      leftPadding = spaceLeft / 2;\n      zeroPos = this.ymin <= 0 && this.ymax >= 0 ? this.transY(0) : null;\n      return this.bars = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.data;\n        _results = [];\n        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {\n          row = _ref[idx];\n          lastTop = 0;\n          _results.push((function() {\n            var _j, _len1, _ref1, _results1;\n            _ref1 = row._y;\n            _results1 = [];\n            for (sidx = _j = 0, _len1 = _ref1.length; _j < _len1; sidx = ++_j) {\n              ypos = _ref1[sidx];\n              if (ypos !== null) {\n                if (zeroPos) {\n                  top = Math.min(ypos, zeroPos);\n                  bottom = Math.max(ypos, zeroPos);\n                } else {\n                  top = ypos;\n                  bottom = this.bottom;\n                }\n                left = this.left + idx * groupWidth + leftPadding;\n                if (!this.options.stacked) {\n                  left += sidx * (barWidth + this.options.barGap);\n                }\n                size = bottom - top;\n                if (this.options.verticalGridCondition && this.options.verticalGridCondition(row.x)) {\n                  this.drawBar(this.left + idx * groupWidth, this.top, groupWidth, Math.abs(this.top - this.bottom), this.options.verticalGridColor, this.options.verticalGridOpacity, this.options.barRadius);\n                }\n                if (this.options.stacked) {\n                  top -= lastTop;\n                }\n                this.drawBar(left, top, barWidth, size, this.colorFor(row, sidx, 'bar'), this.options.barOpacity, this.options.barRadius);\n                _results1.push(lastTop += size);\n              } else {\n                _results1.push(null);\n              }\n            }\n            return _results1;\n          }).call(this));\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Bar.prototype.colorFor = function(row, sidx, type) {\n      var r, s;\n      if (typeof this.options.barColors === 'function') {\n        r = {\n          x: row.x,\n          y: row.y[sidx],\n          label: row.label\n        };\n        s = {\n          index: sidx,\n          key: this.options.ykeys[sidx],\n          label: this.options.labels[sidx]\n        };\n        return this.options.barColors.call(this, r, s, type);\n      } else {\n        return this.options.barColors[sidx % this.options.barColors.length];\n      }\n    };\n\n    Bar.prototype.hitTest = function(x) {\n      if (this.data.length === 0) {\n        return null;\n      }\n      x = Math.max(Math.min(x, this.right), this.left);\n      return Math.min(this.data.length - 1, Math.floor((x - this.left) / (this.width / this.data.length)));\n    };\n\n    Bar.prototype.onGridClick = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.fire('click', index, this.data[index].src, x, y);\n    };\n\n    Bar.prototype.onHoverMove = function(x, y) {\n      var index, _ref;\n      index = this.hitTest(x);\n      return (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(index));\n    };\n\n    Bar.prototype.onHoverOut = function() {\n      if (this.options.hideHover !== false) {\n        return this.hover.hide();\n      }\n    };\n\n    Bar.prototype.hoverContentForRow = function(index) {\n      var content, j, row, x, y, _i, _len, _ref;\n      row = this.data[index];\n      content = \"<div class='morris-hover-row-label'>\" + row.label + \"</div>\";\n      _ref = row.y;\n      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {\n        y = _ref[j];\n        content += \"<div class='morris-hover-point' style='color: \" + (this.colorFor(row, j, 'label')) + \"'>\\n  \" + this.options.labels[j] + \":\\n  \" + (this.yLabelFormat(y)) + \"\\n</div>\";\n      }\n      if (typeof this.options.hoverCallback === 'function') {\n        content = this.options.hoverCallback(index, this.options, content, row.src);\n      }\n      x = this.left + (index + 0.5) * this.width / this.data.length;\n      return [content, x];\n    };\n\n    Bar.prototype.drawXAxisLabel = function(xPos, yPos, text) {\n      var label;\n      return label = this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor);\n    };\n\n    Bar.prototype.drawBar = function(xPos, yPos, width, height, barColor, opacity, radiusArray) {\n      var maxRadius, path;\n      maxRadius = Math.max.apply(Math, radiusArray);\n      if (maxRadius === 0 || maxRadius > height) {\n        path = this.raphael.rect(xPos, yPos, width, height);\n      } else {\n        path = this.raphael.path(this.roundedRect(xPos, yPos, width, height, radiusArray));\n      }\n      return path.attr('fill', barColor).attr('fill-opacity', opacity).attr('stroke', 'none');\n    };\n\n    Bar.prototype.roundedRect = function(x, y, w, h, r) {\n      if (r == null) {\n        r = [0, 0, 0, 0];\n      }\n      return [\"M\", x, r[0] + y, \"Q\", x, y, x + r[0], y, \"L\", x + w - r[1], y, \"Q\", x + w, y, x + w, y + r[1], \"L\", x + w, y + h - r[2], \"Q\", x + w, y + h, x + w - r[2], y + h, \"L\", x + r[3], y + h, \"Q\", x, y + h, x, y + h - r[3], \"Z\"];\n    };\n\n    return Bar;\n\n  })(Morris.Grid);\n\n  Morris.Donut = (function(_super) {\n    __extends(Donut, _super);\n\n    Donut.prototype.defaults = {\n      colors: ['#0B62A4', '#3980B5', '#679DC6', '#95BBD7', '#B0CCE1', '#095791', '#095085', '#083E67', '#052C48', '#042135'],\n      backgroundColor: '#FFFFFF',\n      labelColor: '#000000',\n      formatter: Morris.commas,\n      resize: false\n    };\n\n    function Donut(options) {\n      this.resizeHandler = __bind(this.resizeHandler, this);\n      this.select = __bind(this.select, this);\n      this.click = __bind(this.click, this);\n      var _this = this;\n      if (!(this instanceof Morris.Donut)) {\n        return new Morris.Donut(options);\n      }\n      this.options = $.extend({}, this.defaults, options);\n      if (typeof options.element === 'string') {\n        this.el = $(document.getElementById(options.element));\n      } else {\n        this.el = $(options.element);\n      }\n      if (this.el === null || this.el.length === 0) {\n        throw new Error(\"Graph placeholder not found.\");\n      }\n      if (options.data === void 0 || options.data.length === 0) {\n        return;\n      }\n      this.raphael = new Raphael(this.el[0]);\n      if (this.options.resize) {\n        $(window).bind('resize', function(evt) {\n          if (_this.timeoutId != null) {\n            window.clearTimeout(_this.timeoutId);\n          }\n          return _this.timeoutId = window.setTimeout(_this.resizeHandler, 100);\n        });\n      }\n      this.setData(options.data);\n    }\n\n    Donut.prototype.redraw = function() {\n      var C, cx, cy, i, idx, last, max_value, min, next, seg, total, value, w, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\n      this.raphael.clear();\n      cx = this.el.width() / 2;\n      cy = this.el.height() / 2;\n      w = (Math.min(cx, cy) - 10) / 3;\n      total = 0;\n      _ref = this.values;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        value = _ref[_i];\n        total += value;\n      }\n      min = 5 / (2 * w);\n      C = 1.9999 * Math.PI - min * this.data.length;\n      last = 0;\n      idx = 0;\n      this.segments = [];\n      _ref1 = this.values;\n      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {\n        value = _ref1[i];\n        next = last + min + C * (value / total);\n        seg = new Morris.DonutSegment(cx, cy, w * 2, w, last, next, this.data[i].color || this.options.colors[idx % this.options.colors.length], this.options.backgroundColor, idx, this.raphael);\n        seg.render();\n        this.segments.push(seg);\n        seg.on('hover', this.select);\n        seg.on('click', this.click);\n        last = next;\n        idx += 1;\n      }\n      this.text1 = this.drawEmptyDonutLabel(cx, cy - 10, this.options.labelColor, 15, 800);\n      this.text2 = this.drawEmptyDonutLabel(cx, cy + 10, this.options.labelColor, 14);\n      max_value = Math.max.apply(Math, this.values);\n      idx = 0;\n      _ref2 = this.values;\n      _results = [];\n      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n        value = _ref2[_k];\n        if (value === max_value) {\n          this.select(idx);\n          break;\n        }\n        _results.push(idx += 1);\n      }\n      return _results;\n    };\n\n    Donut.prototype.setData = function(data) {\n      var row;\n      this.data = data;\n      this.values = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.data;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          row = _ref[_i];\n          _results.push(parseFloat(row.value));\n        }\n        return _results;\n      }).call(this);\n      return this.redraw();\n    };\n\n    Donut.prototype.click = function(idx) {\n      return this.fire('click', idx, this.data[idx]);\n    };\n\n    Donut.prototype.select = function(idx) {\n      var row, s, segment, _i, _len, _ref;\n      _ref = this.segments;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        s = _ref[_i];\n        s.deselect();\n      }\n      segment = this.segments[idx];\n      segment.select();\n      row = this.data[idx];\n      return this.setLabels(row.label, this.options.formatter(row.value, row));\n    };\n\n    Donut.prototype.setLabels = function(label1, label2) {\n      var inner, maxHeightBottom, maxHeightTop, maxWidth, text1bbox, text1scale, text2bbox, text2scale;\n      inner = (Math.min(this.el.width() / 2, this.el.height() / 2) - 10) * 2 / 3;\n      maxWidth = 1.8 * inner;\n      maxHeightTop = inner / 2;\n      maxHeightBottom = inner / 3;\n      this.text1.attr({\n        text: label1,\n        transform: ''\n      });\n      text1bbox = this.text1.getBBox();\n      text1scale = Math.min(maxWidth / text1bbox.width, maxHeightTop / text1bbox.height);\n      this.text1.attr({\n        transform: \"S\" + text1scale + \",\" + text1scale + \",\" + (text1bbox.x + text1bbox.width / 2) + \",\" + (text1bbox.y + text1bbox.height)\n      });\n      this.text2.attr({\n        text: label2,\n        transform: ''\n      });\n      text2bbox = this.text2.getBBox();\n      text2scale = Math.min(maxWidth / text2bbox.width, maxHeightBottom / text2bbox.height);\n      return this.text2.attr({\n        transform: \"S\" + text2scale + \",\" + text2scale + \",\" + (text2bbox.x + text2bbox.width / 2) + \",\" + text2bbox.y\n      });\n    };\n\n    Donut.prototype.drawEmptyDonutLabel = function(xPos, yPos, color, fontSize, fontWeight) {\n      var text;\n      text = this.raphael.text(xPos, yPos, '').attr('font-size', fontSize).attr('fill', color);\n      if (fontWeight != null) {\n        text.attr('font-weight', fontWeight);\n      }\n      return text;\n    };\n\n    Donut.prototype.resizeHandler = function() {\n      this.timeoutId = null;\n      this.raphael.setSize(this.el.width(), this.el.height());\n      return this.redraw();\n    };\n\n    return Donut;\n\n  })(Morris.EventEmitter);\n\n  Morris.DonutSegment = (function(_super) {\n    __extends(DonutSegment, _super);\n\n    function DonutSegment(cx, cy, inner, outer, p0, p1, color, backgroundColor, index, raphael) {\n      this.cx = cx;\n      this.cy = cy;\n      this.inner = inner;\n      this.outer = outer;\n      this.color = color;\n      this.backgroundColor = backgroundColor;\n      this.index = index;\n      this.raphael = raphael;\n      this.deselect = __bind(this.deselect, this);\n      this.select = __bind(this.select, this);\n      this.sin_p0 = Math.sin(p0);\n      this.cos_p0 = Math.cos(p0);\n      this.sin_p1 = Math.sin(p1);\n      this.cos_p1 = Math.cos(p1);\n      this.is_long = (p1 - p0) > Math.PI ? 1 : 0;\n      this.path = this.calcSegment(this.inner + 3, this.inner + this.outer - 5);\n      this.selectedPath = this.calcSegment(this.inner + 3, this.inner + this.outer);\n      this.hilight = this.calcArc(this.inner);\n    }\n\n    DonutSegment.prototype.calcArcPoints = function(r) {\n      return [this.cx + r * this.sin_p0, this.cy + r * this.cos_p0, this.cx + r * this.sin_p1, this.cy + r * this.cos_p1];\n    };\n\n    DonutSegment.prototype.calcSegment = function(r1, r2) {\n      var ix0, ix1, iy0, iy1, ox0, ox1, oy0, oy1, _ref, _ref1;\n      _ref = this.calcArcPoints(r1), ix0 = _ref[0], iy0 = _ref[1], ix1 = _ref[2], iy1 = _ref[3];\n      _ref1 = this.calcArcPoints(r2), ox0 = _ref1[0], oy0 = _ref1[1], ox1 = _ref1[2], oy1 = _ref1[3];\n      return (\"M\" + ix0 + \",\" + iy0) + (\"A\" + r1 + \",\" + r1 + \",0,\" + this.is_long + \",0,\" + ix1 + \",\" + iy1) + (\"L\" + ox1 + \",\" + oy1) + (\"A\" + r2 + \",\" + r2 + \",0,\" + this.is_long + \",1,\" + ox0 + \",\" + oy0) + \"Z\";\n    };\n\n    DonutSegment.prototype.calcArc = function(r) {\n      var ix0, ix1, iy0, iy1, _ref;\n      _ref = this.calcArcPoints(r), ix0 = _ref[0], iy0 = _ref[1], ix1 = _ref[2], iy1 = _ref[3];\n      return (\"M\" + ix0 + \",\" + iy0) + (\"A\" + r + \",\" + r + \",0,\" + this.is_long + \",0,\" + ix1 + \",\" + iy1);\n    };\n\n    DonutSegment.prototype.render = function() {\n      var _this = this;\n      this.arc = this.drawDonutArc(this.hilight, this.color);\n      return this.seg = this.drawDonutSegment(this.path, this.color, this.backgroundColor, function() {\n        return _this.fire('hover', _this.index);\n      }, function() {\n        return _this.fire('click', _this.index);\n      });\n    };\n\n    DonutSegment.prototype.drawDonutArc = function(path, color) {\n      return this.raphael.path(path).attr({\n        stroke: color,\n        'stroke-width': 2,\n        opacity: 0\n      });\n    };\n\n    DonutSegment.prototype.drawDonutSegment = function(path, fillColor, strokeColor, hoverFunction, clickFunction) {\n      return this.raphael.path(path).attr({\n        fill: fillColor,\n        stroke: strokeColor,\n        'stroke-width': 3\n      }).hover(hoverFunction).click(clickFunction);\n    };\n\n    DonutSegment.prototype.select = function() {\n      if (!this.selected) {\n        this.seg.animate({\n          path: this.selectedPath\n        }, 150, '<>');\n        this.arc.animate({\n          opacity: 1\n        }, 150, '<>');\n        return this.selected = true;\n      }\n    };\n\n    DonutSegment.prototype.deselect = function() {\n      if (this.selected) {\n        this.seg.animate({\n          path: this.path\n        }, 150, '<>');\n        this.arc.animate({\n          opacity: 0\n        }, 150, '<>');\n        return this.selected = false;\n      }\n    };\n\n    return DonutSegment;\n\n  })(Morris.EventEmitter);\n\n}).call(this);\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": _vm.id\n    }\n  })\n},staticRenderFns: []}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nvar _Donut = __webpack_require__(0);\n\nvar _Donut2 = _interopRequireDefault(_Donut);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar VueMorris = {\n  Donut: _Donut2.default\n};\n\nmodule.exports = VueMorris;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// vue-morris.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e70349b9132daf0e96ab","var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* script */\n__vue_exports__ = require(\"!!babel-loader!vue-loader/lib/selector?type=script&index=0!./Donut.vue\")\n\n/* template */\nvar __vue_template__ = require(\"!!vue-loader/lib/template-compiler?id=data-v-1d36c436!vue-loader/lib/selector?type=template&index=0!./Donut.vue\")\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\nmodule.exports = __vue_exports__\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Donut.vue\n// module id = 0\n// module chunks = 0","<template>\r\n  <div :id=\"id\"></div>\r\n</template>\r\n\r\n<script>\r\nimport 'morris.js/morris.js'\r\n\r\nexport default {\r\n  name: 'donut',\r\n\r\n  data () {\r\n    return {\r\n      chart: null\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    chartData () {\r\n      if (typeof this.data === 'string') {\r\n        return JSON.parse(this.data)\r\n      }\r\n      return this.data\r\n    },\r\n\r\n    chartResize () {\r\n      if (typeof this.resize === 'string') {\r\n        return this.resize === 'true'\r\n      }\r\n      return false\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    data (val) {\r\n      this.$nextTick(() => {\r\n        this.chart.setData(this.data)\r\n      })\r\n    }\r\n  },\r\n\r\n  props: {\r\n    id: { type: String, required: true }, \r\n    data: { required: true },\r\n    colors: { required: false },\r\n    formatter: { type: Function, required: false },\r\n    resize: { required: false }\r\n  },\r\n\r\n  mounted () {\r\n    let options = {\r\n      element: this.id,\r\n      data: this.chartData,\r\n      resize: this.chartResize\r\n    }\r\n\r\n    if (this.colors) {\r\n      options.colors = this.colors\r\n    }\r\n\r\n    if (this.formatter) {\r\n      options.formatter = this.formatter\r\n    }\r\n\r\n    this.chart = Morris.Donut(options)\r\n  }\r\n}\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// Donut.vue?ecb29116","/* @license\nmorris.js v0.5.0\nCopyright 2014 Olly Smith All rights reserved.\nLicensed under the BSD-2-Clause License.\n*/\n\n\n(function() {\n  var $, Morris, minutesSpecHelper, secondsSpecHelper,\n    __slice = [].slice,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  Morris = window.Morris = {};\n\n  $ = jQuery;\n\n  Morris.EventEmitter = (function() {\n    function EventEmitter() {}\n\n    EventEmitter.prototype.on = function(name, handler) {\n      if (this.handlers == null) {\n        this.handlers = {};\n      }\n      if (this.handlers[name] == null) {\n        this.handlers[name] = [];\n      }\n      this.handlers[name].push(handler);\n      return this;\n    };\n\n    EventEmitter.prototype.fire = function() {\n      var args, handler, name, _i, _len, _ref, _results;\n      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      if ((this.handlers != null) && (this.handlers[name] != null)) {\n        _ref = this.handlers[name];\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          handler = _ref[_i];\n          _results.push(handler.apply(null, args));\n        }\n        return _results;\n      }\n    };\n\n    return EventEmitter;\n\n  })();\n\n  Morris.commas = function(num) {\n    var absnum, intnum, ret, strabsnum;\n    if (num != null) {\n      ret = num < 0 ? \"-\" : \"\";\n      absnum = Math.abs(num);\n      intnum = Math.floor(absnum).toFixed(0);\n      ret += intnum.replace(/(?=(?:\\d{3})+$)(?!^)/g, ',');\n      strabsnum = absnum.toString();\n      if (strabsnum.length > intnum.length) {\n        ret += strabsnum.slice(intnum.length);\n      }\n      return ret;\n    } else {\n      return '-';\n    }\n  };\n\n  Morris.pad2 = function(number) {\n    return (number < 10 ? '0' : '') + number;\n  };\n\n  Morris.Grid = (function(_super) {\n    __extends(Grid, _super);\n\n    function Grid(options) {\n      this.resizeHandler = __bind(this.resizeHandler, this);\n      var _this = this;\n      if (typeof options.element === 'string') {\n        this.el = $(document.getElementById(options.element));\n      } else {\n        this.el = $(options.element);\n      }\n      if ((this.el == null) || this.el.length === 0) {\n        throw new Error(\"Graph container element not found\");\n      }\n      if (this.el.css('position') === 'static') {\n        this.el.css('position', 'relative');\n      }\n      this.options = $.extend({}, this.gridDefaults, this.defaults || {}, options);\n      if (typeof this.options.units === 'string') {\n        this.options.postUnits = options.units;\n      }\n      this.raphael = new Raphael(this.el[0]);\n      this.elementWidth = null;\n      this.elementHeight = null;\n      this.dirty = false;\n      this.selectFrom = null;\n      if (this.init) {\n        this.init();\n      }\n      this.setData(this.options.data);\n      this.el.bind('mousemove', function(evt) {\n        var left, offset, right, width, x;\n        offset = _this.el.offset();\n        x = evt.pageX - offset.left;\n        if (_this.selectFrom) {\n          left = _this.data[_this.hitTest(Math.min(x, _this.selectFrom))]._x;\n          right = _this.data[_this.hitTest(Math.max(x, _this.selectFrom))]._x;\n          width = right - left;\n          return _this.selectionRect.attr({\n            x: left,\n            width: width\n          });\n        } else {\n          return _this.fire('hovermove', x, evt.pageY - offset.top);\n        }\n      });\n      this.el.bind('mouseleave', function(evt) {\n        if (_this.selectFrom) {\n          _this.selectionRect.hide();\n          _this.selectFrom = null;\n        }\n        return _this.fire('hoverout');\n      });\n      this.el.bind('touchstart touchmove touchend', function(evt) {\n        var offset, touch;\n        touch = evt.originalEvent.touches[0] || evt.originalEvent.changedTouches[0];\n        offset = _this.el.offset();\n        return _this.fire('hovermove', touch.pageX - offset.left, touch.pageY - offset.top);\n      });\n      this.el.bind('click', function(evt) {\n        var offset;\n        offset = _this.el.offset();\n        return _this.fire('gridclick', evt.pageX - offset.left, evt.pageY - offset.top);\n      });\n      if (this.options.rangeSelect) {\n        this.selectionRect = this.raphael.rect(0, 0, 0, this.el.innerHeight()).attr({\n          fill: this.options.rangeSelectColor,\n          stroke: false\n        }).toBack().hide();\n        this.el.bind('mousedown', function(evt) {\n          var offset;\n          offset = _this.el.offset();\n          return _this.startRange(evt.pageX - offset.left);\n        });\n        this.el.bind('mouseup', function(evt) {\n          var offset;\n          offset = _this.el.offset();\n          _this.endRange(evt.pageX - offset.left);\n          return _this.fire('hovermove', evt.pageX - offset.left, evt.pageY - offset.top);\n        });\n      }\n      if (this.options.resize) {\n        $(window).bind('resize', function(evt) {\n          if (_this.timeoutId != null) {\n            window.clearTimeout(_this.timeoutId);\n          }\n          return _this.timeoutId = window.setTimeout(_this.resizeHandler, 100);\n        });\n      }\n      this.el.css('-webkit-tap-highlight-color', 'rgba(0,0,0,0)');\n      if (this.postInit) {\n        this.postInit();\n      }\n    }\n\n    Grid.prototype.gridDefaults = {\n      dateFormat: null,\n      axes: true,\n      grid: true,\n      gridLineColor: '#aaa',\n      gridStrokeWidth: 0.5,\n      gridTextColor: '#888',\n      gridTextSize: 12,\n      gridTextFamily: 'sans-serif',\n      gridTextWeight: 'normal',\n      hideHover: false,\n      yLabelFormat: null,\n      xLabelAngle: 0,\n      numLines: 5,\n      padding: 25,\n      parseTime: true,\n      postUnits: '',\n      preUnits: '',\n      ymax: 'auto',\n      ymin: 'auto 0',\n      goals: [],\n      goalStrokeWidth: 1.0,\n      goalLineColors: ['#666633', '#999966', '#cc6666', '#663333'],\n      events: [],\n      eventStrokeWidth: 1.0,\n      eventLineColors: ['#005a04', '#ccffbb', '#3a5f0b', '#005502'],\n      rangeSelect: null,\n      rangeSelectColor: '#eef',\n      resize: false\n    };\n\n    Grid.prototype.setData = function(data, redraw) {\n      var e, idx, index, maxGoal, minGoal, ret, row, step, total, y, ykey, ymax, ymin, yval, _ref;\n      if (redraw == null) {\n        redraw = true;\n      }\n      this.options.data = data;\n      if ((data == null) || data.length === 0) {\n        this.data = [];\n        this.raphael.clear();\n        if (this.hover != null) {\n          this.hover.hide();\n        }\n        return;\n      }\n      ymax = this.cumulative ? 0 : null;\n      ymin = this.cumulative ? 0 : null;\n      if (this.options.goals.length > 0) {\n        minGoal = Math.min.apply(Math, this.options.goals);\n        maxGoal = Math.max.apply(Math, this.options.goals);\n        ymin = ymin != null ? Math.min(ymin, minGoal) : minGoal;\n        ymax = ymax != null ? Math.max(ymax, maxGoal) : maxGoal;\n      }\n      this.data = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {\n          row = data[index];\n          ret = {\n            src: row\n          };\n          ret.label = row[this.options.xkey];\n          if (this.options.parseTime) {\n            ret.x = Morris.parseDate(ret.label);\n            if (this.options.dateFormat) {\n              ret.label = this.options.dateFormat(ret.x);\n            } else if (typeof ret.label === 'number') {\n              ret.label = new Date(ret.label).toString();\n            }\n          } else {\n            ret.x = index;\n            if (this.options.xLabelFormat) {\n              ret.label = this.options.xLabelFormat(ret);\n            }\n          }\n          total = 0;\n          ret.y = (function() {\n            var _j, _len1, _ref, _results1;\n            _ref = this.options.ykeys;\n            _results1 = [];\n            for (idx = _j = 0, _len1 = _ref.length; _j < _len1; idx = ++_j) {\n              ykey = _ref[idx];\n              yval = row[ykey];\n              if (typeof yval === 'string') {\n                yval = parseFloat(yval);\n              }\n              if ((yval != null) && typeof yval !== 'number') {\n                yval = null;\n              }\n              if (yval != null) {\n                if (this.cumulative) {\n                  total += yval;\n                } else {\n                  if (ymax != null) {\n                    ymax = Math.max(yval, ymax);\n                    ymin = Math.min(yval, ymin);\n                  } else {\n                    ymax = ymin = yval;\n                  }\n                }\n              }\n              if (this.cumulative && (total != null)) {\n                ymax = Math.max(total, ymax);\n                ymin = Math.min(total, ymin);\n              }\n              _results1.push(yval);\n            }\n            return _results1;\n          }).call(this);\n          _results.push(ret);\n        }\n        return _results;\n      }).call(this);\n      if (this.options.parseTime) {\n        this.data = this.data.sort(function(a, b) {\n          return (a.x > b.x) - (b.x > a.x);\n        });\n      }\n      this.xmin = this.data[0].x;\n      this.xmax = this.data[this.data.length - 1].x;\n      this.events = [];\n      if (this.options.events.length > 0) {\n        if (this.options.parseTime) {\n          this.events = (function() {\n            var _i, _len, _ref, _results;\n            _ref = this.options.events;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              e = _ref[_i];\n              _results.push(Morris.parseDate(e));\n            }\n            return _results;\n          }).call(this);\n        } else {\n          this.events = this.options.events;\n        }\n        this.xmax = Math.max(this.xmax, Math.max.apply(Math, this.events));\n        this.xmin = Math.min(this.xmin, Math.min.apply(Math, this.events));\n      }\n      if (this.xmin === this.xmax) {\n        this.xmin -= 1;\n        this.xmax += 1;\n      }\n      this.ymin = this.yboundary('min', ymin);\n      this.ymax = this.yboundary('max', ymax);\n      if (this.ymin === this.ymax) {\n        if (ymin) {\n          this.ymin -= 1;\n        }\n        this.ymax += 1;\n      }\n      if (((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') || this.options.grid === true) {\n        if (this.options.ymax === this.gridDefaults.ymax && this.options.ymin === this.gridDefaults.ymin) {\n          this.grid = this.autoGridLines(this.ymin, this.ymax, this.options.numLines);\n          this.ymin = Math.min(this.ymin, this.grid[0]);\n          this.ymax = Math.max(this.ymax, this.grid[this.grid.length - 1]);\n        } else {\n          step = (this.ymax - this.ymin) / (this.options.numLines - 1);\n          this.grid = (function() {\n            var _i, _ref1, _ref2, _results;\n            _results = [];\n            for (y = _i = _ref1 = this.ymin, _ref2 = this.ymax; step > 0 ? _i <= _ref2 : _i >= _ref2; y = _i += step) {\n              _results.push(y);\n            }\n            return _results;\n          }).call(this);\n        }\n      }\n      this.dirty = true;\n      if (redraw) {\n        return this.redraw();\n      }\n    };\n\n    Grid.prototype.yboundary = function(boundaryType, currentValue) {\n      var boundaryOption, suggestedValue;\n      boundaryOption = this.options[\"y\" + boundaryType];\n      if (typeof boundaryOption === 'string') {\n        if (boundaryOption.slice(0, 4) === 'auto') {\n          if (boundaryOption.length > 5) {\n            suggestedValue = parseInt(boundaryOption.slice(5), 10);\n            if (currentValue == null) {\n              return suggestedValue;\n            }\n            return Math[boundaryType](currentValue, suggestedValue);\n          } else {\n            if (currentValue != null) {\n              return currentValue;\n            } else {\n              return 0;\n            }\n          }\n        } else {\n          return parseInt(boundaryOption, 10);\n        }\n      } else {\n        return boundaryOption;\n      }\n    };\n\n    Grid.prototype.autoGridLines = function(ymin, ymax, nlines) {\n      var gmax, gmin, grid, smag, span, step, unit, y, ymag;\n      span = ymax - ymin;\n      ymag = Math.floor(Math.log(span) / Math.log(10));\n      unit = Math.pow(10, ymag);\n      gmin = Math.floor(ymin / unit) * unit;\n      gmax = Math.ceil(ymax / unit) * unit;\n      step = (gmax - gmin) / (nlines - 1);\n      if (unit === 1 && step > 1 && Math.ceil(step) !== step) {\n        step = Math.ceil(step);\n        gmax = gmin + step * (nlines - 1);\n      }\n      if (gmin < 0 && gmax > 0) {\n        gmin = Math.floor(ymin / step) * step;\n        gmax = Math.ceil(ymax / step) * step;\n      }\n      if (step < 1) {\n        smag = Math.floor(Math.log(step) / Math.log(10));\n        grid = (function() {\n          var _i, _results;\n          _results = [];\n          for (y = _i = gmin; step > 0 ? _i <= gmax : _i >= gmax; y = _i += step) {\n            _results.push(parseFloat(y.toFixed(1 - smag)));\n          }\n          return _results;\n        })();\n      } else {\n        grid = (function() {\n          var _i, _results;\n          _results = [];\n          for (y = _i = gmin; step > 0 ? _i <= gmax : _i >= gmax; y = _i += step) {\n            _results.push(y);\n          }\n          return _results;\n        })();\n      }\n      return grid;\n    };\n\n    Grid.prototype._calc = function() {\n      var bottomOffsets, gridLine, h, i, w, yLabelWidths, _ref, _ref1;\n      w = this.el.width();\n      h = this.el.height();\n      if (this.elementWidth !== w || this.elementHeight !== h || this.dirty) {\n        this.elementWidth = w;\n        this.elementHeight = h;\n        this.dirty = false;\n        this.left = this.options.padding;\n        this.right = this.elementWidth - this.options.padding;\n        this.top = this.options.padding;\n        this.bottom = this.elementHeight - this.options.padding;\n        if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'y') {\n          yLabelWidths = (function() {\n            var _i, _len, _ref1, _results;\n            _ref1 = this.grid;\n            _results = [];\n            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n              gridLine = _ref1[_i];\n              _results.push(this.measureText(this.yAxisFormat(gridLine)).width);\n            }\n            return _results;\n          }).call(this);\n          this.left += Math.max.apply(Math, yLabelWidths);\n        }\n        if ((_ref1 = this.options.axes) === true || _ref1 === 'both' || _ref1 === 'x') {\n          bottomOffsets = (function() {\n            var _i, _ref2, _results;\n            _results = [];\n            for (i = _i = 0, _ref2 = this.data.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {\n              _results.push(this.measureText(this.data[i].text, -this.options.xLabelAngle).height);\n            }\n            return _results;\n          }).call(this);\n          this.bottom -= Math.max.apply(Math, bottomOffsets);\n        }\n        this.width = Math.max(1, this.right - this.left);\n        this.height = Math.max(1, this.bottom - this.top);\n        this.dx = this.width / (this.xmax - this.xmin);\n        this.dy = this.height / (this.ymax - this.ymin);\n        if (this.calc) {\n          return this.calc();\n        }\n      }\n    };\n\n    Grid.prototype.transY = function(y) {\n      return this.bottom - (y - this.ymin) * this.dy;\n    };\n\n    Grid.prototype.transX = function(x) {\n      if (this.data.length === 1) {\n        return (this.left + this.right) / 2;\n      } else {\n        return this.left + (x - this.xmin) * this.dx;\n      }\n    };\n\n    Grid.prototype.redraw = function() {\n      this.raphael.clear();\n      this._calc();\n      this.drawGrid();\n      this.drawGoals();\n      this.drawEvents();\n      if (this.draw) {\n        return this.draw();\n      }\n    };\n\n    Grid.prototype.measureText = function(text, angle) {\n      var ret, tt;\n      if (angle == null) {\n        angle = 0;\n      }\n      tt = this.raphael.text(100, 100, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).rotate(angle);\n      ret = tt.getBBox();\n      tt.remove();\n      return ret;\n    };\n\n    Grid.prototype.yAxisFormat = function(label) {\n      return this.yLabelFormat(label);\n    };\n\n    Grid.prototype.yLabelFormat = function(label) {\n      if (typeof this.options.yLabelFormat === 'function') {\n        return this.options.yLabelFormat(label);\n      } else {\n        return \"\" + this.options.preUnits + (Morris.commas(label)) + this.options.postUnits;\n      }\n    };\n\n    Grid.prototype.drawGrid = function() {\n      var lineY, y, _i, _len, _ref, _ref1, _ref2, _results;\n      if (this.options.grid === false && ((_ref = this.options.axes) !== true && _ref !== 'both' && _ref !== 'y')) {\n        return;\n      }\n      _ref1 = this.grid;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        lineY = _ref1[_i];\n        y = this.transY(lineY);\n        if ((_ref2 = this.options.axes) === true || _ref2 === 'both' || _ref2 === 'y') {\n          this.drawYAxisLabel(this.left - this.options.padding / 2, y, this.yAxisFormat(lineY));\n        }\n        if (this.options.grid) {\n          _results.push(this.drawGridLine(\"M\" + this.left + \",\" + y + \"H\" + (this.left + this.width)));\n        } else {\n          _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawGoals = function() {\n      var color, goal, i, _i, _len, _ref, _results;\n      _ref = this.options.goals;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        goal = _ref[i];\n        color = this.options.goalLineColors[i % this.options.goalLineColors.length];\n        _results.push(this.drawGoal(goal, color));\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawEvents = function() {\n      var color, event, i, _i, _len, _ref, _results;\n      _ref = this.events;\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        event = _ref[i];\n        color = this.options.eventLineColors[i % this.options.eventLineColors.length];\n        _results.push(this.drawEvent(event, color));\n      }\n      return _results;\n    };\n\n    Grid.prototype.drawGoal = function(goal, color) {\n      return this.raphael.path(\"M\" + this.left + \",\" + (this.transY(goal)) + \"H\" + this.right).attr('stroke', color).attr('stroke-width', this.options.goalStrokeWidth);\n    };\n\n    Grid.prototype.drawEvent = function(event, color) {\n      return this.raphael.path(\"M\" + (this.transX(event)) + \",\" + this.bottom + \"V\" + this.top).attr('stroke', color).attr('stroke-width', this.options.eventStrokeWidth);\n    };\n\n    Grid.prototype.drawYAxisLabel = function(xPos, yPos, text) {\n      return this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor).attr('text-anchor', 'end');\n    };\n\n    Grid.prototype.drawGridLine = function(path) {\n      return this.raphael.path(path).attr('stroke', this.options.gridLineColor).attr('stroke-width', this.options.gridStrokeWidth);\n    };\n\n    Grid.prototype.startRange = function(x) {\n      this.hover.hide();\n      this.selectFrom = x;\n      return this.selectionRect.attr({\n        x: x,\n        width: 0\n      }).show();\n    };\n\n    Grid.prototype.endRange = function(x) {\n      var end, start;\n      if (this.selectFrom) {\n        start = Math.min(this.selectFrom, x);\n        end = Math.max(this.selectFrom, x);\n        this.options.rangeSelect.call(this.el, {\n          start: this.data[this.hitTest(start)].x,\n          end: this.data[this.hitTest(end)].x\n        });\n        return this.selectFrom = null;\n      }\n    };\n\n    Grid.prototype.resizeHandler = function() {\n      this.timeoutId = null;\n      this.raphael.setSize(this.el.width(), this.el.height());\n      return this.redraw();\n    };\n\n    return Grid;\n\n  })(Morris.EventEmitter);\n\n  Morris.parseDate = function(date) {\n    var isecs, m, msecs, n, o, offsetmins, p, q, r, ret, secs;\n    if (typeof date === 'number') {\n      return date;\n    }\n    m = date.match(/^(\\d+) Q(\\d)$/);\n    n = date.match(/^(\\d+)-(\\d+)$/);\n    o = date.match(/^(\\d+)-(\\d+)-(\\d+)$/);\n    p = date.match(/^(\\d+) W(\\d+)$/);\n    q = date.match(/^(\\d+)-(\\d+)-(\\d+)[ T](\\d+):(\\d+)(Z|([+-])(\\d\\d):?(\\d\\d))?$/);\n    r = date.match(/^(\\d+)-(\\d+)-(\\d+)[ T](\\d+):(\\d+):(\\d+(\\.\\d+)?)(Z|([+-])(\\d\\d):?(\\d\\d))?$/);\n    if (m) {\n      return new Date(parseInt(m[1], 10), parseInt(m[2], 10) * 3 - 1, 1).getTime();\n    } else if (n) {\n      return new Date(parseInt(n[1], 10), parseInt(n[2], 10) - 1, 1).getTime();\n    } else if (o) {\n      return new Date(parseInt(o[1], 10), parseInt(o[2], 10) - 1, parseInt(o[3], 10)).getTime();\n    } else if (p) {\n      ret = new Date(parseInt(p[1], 10), 0, 1);\n      if (ret.getDay() !== 4) {\n        ret.setMonth(0, 1 + ((4 - ret.getDay()) + 7) % 7);\n      }\n      return ret.getTime() + parseInt(p[2], 10) * 604800000;\n    } else if (q) {\n      if (!q[6]) {\n        return new Date(parseInt(q[1], 10), parseInt(q[2], 10) - 1, parseInt(q[3], 10), parseInt(q[4], 10), parseInt(q[5], 10)).getTime();\n      } else {\n        offsetmins = 0;\n        if (q[6] !== 'Z') {\n          offsetmins = parseInt(q[8], 10) * 60 + parseInt(q[9], 10);\n          if (q[7] === '+') {\n            offsetmins = 0 - offsetmins;\n          }\n        }\n        return Date.UTC(parseInt(q[1], 10), parseInt(q[2], 10) - 1, parseInt(q[3], 10), parseInt(q[4], 10), parseInt(q[5], 10) + offsetmins);\n      }\n    } else if (r) {\n      secs = parseFloat(r[6]);\n      isecs = Math.floor(secs);\n      msecs = Math.round((secs - isecs) * 1000);\n      if (!r[8]) {\n        return new Date(parseInt(r[1], 10), parseInt(r[2], 10) - 1, parseInt(r[3], 10), parseInt(r[4], 10), parseInt(r[5], 10), isecs, msecs).getTime();\n      } else {\n        offsetmins = 0;\n        if (r[8] !== 'Z') {\n          offsetmins = parseInt(r[10], 10) * 60 + parseInt(r[11], 10);\n          if (r[9] === '+') {\n            offsetmins = 0 - offsetmins;\n          }\n        }\n        return Date.UTC(parseInt(r[1], 10), parseInt(r[2], 10) - 1, parseInt(r[3], 10), parseInt(r[4], 10), parseInt(r[5], 10) + offsetmins, isecs, msecs);\n      }\n    } else {\n      return new Date(parseInt(date, 10), 0, 1).getTime();\n    }\n  };\n\n  Morris.Hover = (function() {\n    Hover.defaults = {\n      \"class\": 'morris-hover morris-default-style'\n    };\n\n    function Hover(options) {\n      if (options == null) {\n        options = {};\n      }\n      this.options = $.extend({}, Morris.Hover.defaults, options);\n      this.el = $(\"<div class='\" + this.options[\"class\"] + \"'></div>\");\n      this.el.hide();\n      this.options.parent.append(this.el);\n    }\n\n    Hover.prototype.update = function(html, x, y) {\n      if (!html) {\n        return this.hide();\n      } else {\n        this.html(html);\n        this.show();\n        return this.moveTo(x, y);\n      }\n    };\n\n    Hover.prototype.html = function(content) {\n      return this.el.html(content);\n    };\n\n    Hover.prototype.moveTo = function(x, y) {\n      var hoverHeight, hoverWidth, left, parentHeight, parentWidth, top;\n      parentWidth = this.options.parent.innerWidth();\n      parentHeight = this.options.parent.innerHeight();\n      hoverWidth = this.el.outerWidth();\n      hoverHeight = this.el.outerHeight();\n      left = Math.min(Math.max(0, x - hoverWidth / 2), parentWidth - hoverWidth);\n      if (y != null) {\n        top = y - hoverHeight - 10;\n        if (top < 0) {\n          top = y + 10;\n          if (top + hoverHeight > parentHeight) {\n            top = parentHeight / 2 - hoverHeight / 2;\n          }\n        }\n      } else {\n        top = parentHeight / 2 - hoverHeight / 2;\n      }\n      return this.el.css({\n        left: left + \"px\",\n        top: parseInt(top) + \"px\"\n      });\n    };\n\n    Hover.prototype.show = function() {\n      return this.el.show();\n    };\n\n    Hover.prototype.hide = function() {\n      return this.el.hide();\n    };\n\n    return Hover;\n\n  })();\n\n  Morris.Line = (function(_super) {\n    __extends(Line, _super);\n\n    function Line(options) {\n      this.hilight = __bind(this.hilight, this);\n      this.onHoverOut = __bind(this.onHoverOut, this);\n      this.onHoverMove = __bind(this.onHoverMove, this);\n      this.onGridClick = __bind(this.onGridClick, this);\n      if (!(this instanceof Morris.Line)) {\n        return new Morris.Line(options);\n      }\n      Line.__super__.constructor.call(this, options);\n    }\n\n    Line.prototype.init = function() {\n      if (this.options.hideHover !== 'always') {\n        this.hover = new Morris.Hover({\n          parent: this.el\n        });\n        this.on('hovermove', this.onHoverMove);\n        this.on('hoverout', this.onHoverOut);\n        return this.on('gridclick', this.onGridClick);\n      }\n    };\n\n    Line.prototype.defaults = {\n      lineWidth: 3,\n      pointSize: 4,\n      lineColors: ['#0b62a4', '#7A92A3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed'],\n      pointStrokeWidths: [1],\n      pointStrokeColors: ['#ffffff'],\n      pointFillColors: [],\n      smooth: true,\n      xLabels: 'auto',\n      xLabelFormat: null,\n      xLabelMargin: 24,\n      hideHover: false\n    };\n\n    Line.prototype.calc = function() {\n      this.calcPoints();\n      return this.generatePaths();\n    };\n\n    Line.prototype.calcPoints = function() {\n      var row, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        row._x = this.transX(row.x);\n        row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(this.transY(y));\n            } else {\n              _results1.push(y);\n            }\n          }\n          return _results1;\n        }).call(this);\n        _results.push(row._ymax = Math.min.apply(Math, [this.bottom].concat((function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row._y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(y);\n            }\n          }\n          return _results1;\n        })())));\n      }\n      return _results;\n    };\n\n    Line.prototype.hitTest = function(x) {\n      var index, r, _i, _len, _ref;\n      if (this.data.length === 0) {\n        return null;\n      }\n      _ref = this.data.slice(1);\n      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {\n        r = _ref[index];\n        if (x < (r._x + this.data[index]._x) / 2) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    Line.prototype.onGridClick = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.fire('click', index, this.data[index].src, x, y);\n    };\n\n    Line.prototype.onHoverMove = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.displayHoverForRow(index);\n    };\n\n    Line.prototype.onHoverOut = function() {\n      if (this.options.hideHover !== false) {\n        return this.displayHoverForRow(null);\n      }\n    };\n\n    Line.prototype.displayHoverForRow = function(index) {\n      var _ref;\n      if (index != null) {\n        (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(index));\n        return this.hilight(index);\n      } else {\n        this.hover.hide();\n        return this.hilight();\n      }\n    };\n\n    Line.prototype.hoverContentForRow = function(index) {\n      var content, j, row, y, _i, _len, _ref;\n      row = this.data[index];\n      content = \"<div class='morris-hover-row-label'>\" + row.label + \"</div>\";\n      _ref = row.y;\n      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {\n        y = _ref[j];\n        content += \"<div class='morris-hover-point' style='color: \" + (this.colorFor(row, j, 'label')) + \"'>\\n  \" + this.options.labels[j] + \":\\n  \" + (this.yLabelFormat(y)) + \"\\n</div>\";\n      }\n      if (typeof this.options.hoverCallback === 'function') {\n        content = this.options.hoverCallback(index, this.options, content, row.src);\n      }\n      return [content, row._x, row._ymax];\n    };\n\n    Line.prototype.generatePaths = function() {\n      var coords, i, r, smooth;\n      return this.paths = (function() {\n        var _i, _ref, _ref1, _results;\n        _results = [];\n        for (i = _i = 0, _ref = this.options.ykeys.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n          smooth = typeof this.options.smooth === \"boolean\" ? this.options.smooth : (_ref1 = this.options.ykeys[i], __indexOf.call(this.options.smooth, _ref1) >= 0);\n          coords = (function() {\n            var _j, _len, _ref2, _results1;\n            _ref2 = this.data;\n            _results1 = [];\n            for (_j = 0, _len = _ref2.length; _j < _len; _j++) {\n              r = _ref2[_j];\n              if (r._y[i] !== void 0) {\n                _results1.push({\n                  x: r._x,\n                  y: r._y[i]\n                });\n              }\n            }\n            return _results1;\n          }).call(this);\n          if (coords.length > 1) {\n            _results.push(Morris.Line.createPath(coords, smooth, this.bottom));\n          } else {\n            _results.push(null);\n          }\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Line.prototype.draw = function() {\n      var _ref;\n      if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'x') {\n        this.drawXAxis();\n      }\n      this.drawSeries();\n      if (this.options.hideHover === false) {\n        return this.displayHoverForRow(this.data.length - 1);\n      }\n    };\n\n    Line.prototype.drawXAxis = function() {\n      var drawLabel, l, labels, prevAngleMargin, prevLabelMargin, row, ypos, _i, _len, _results,\n        _this = this;\n      ypos = this.bottom + this.options.padding / 2;\n      prevLabelMargin = null;\n      prevAngleMargin = null;\n      drawLabel = function(labelText, xpos) {\n        var label, labelBox, margin, offset, textBox;\n        label = _this.drawXAxisLabel(_this.transX(xpos), ypos, labelText);\n        textBox = label.getBBox();\n        label.transform(\"r\" + (-_this.options.xLabelAngle));\n        labelBox = label.getBBox();\n        label.transform(\"t0,\" + (labelBox.height / 2) + \"...\");\n        if (_this.options.xLabelAngle !== 0) {\n          offset = -0.5 * textBox.width * Math.cos(_this.options.xLabelAngle * Math.PI / 180.0);\n          label.transform(\"t\" + offset + \",0...\");\n        }\n        labelBox = label.getBBox();\n        if (((prevLabelMargin == null) || prevLabelMargin >= labelBox.x + labelBox.width || (prevAngleMargin != null) && prevAngleMargin >= labelBox.x) && labelBox.x >= 0 && (labelBox.x + labelBox.width) < _this.el.width()) {\n          if (_this.options.xLabelAngle !== 0) {\n            margin = 1.25 * _this.options.gridTextSize / Math.sin(_this.options.xLabelAngle * Math.PI / 180.0);\n            prevAngleMargin = labelBox.x - margin;\n          }\n          return prevLabelMargin = labelBox.x - _this.options.xLabelMargin;\n        } else {\n          return label.remove();\n        }\n      };\n      if (this.options.parseTime) {\n        if (this.data.length === 1 && this.options.xLabels === 'auto') {\n          labels = [[this.data[0].label, this.data[0].x]];\n        } else {\n          labels = Morris.labelSeries(this.xmin, this.xmax, this.width, this.options.xLabels, this.options.xLabelFormat);\n        }\n      } else {\n        labels = (function() {\n          var _i, _len, _ref, _results;\n          _ref = this.data;\n          _results = [];\n          for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            row = _ref[_i];\n            _results.push([row.label, row.x]);\n          }\n          return _results;\n        }).call(this);\n      }\n      labels.reverse();\n      _results = [];\n      for (_i = 0, _len = labels.length; _i < _len; _i++) {\n        l = labels[_i];\n        _results.push(drawLabel(l[0], l[1]));\n      }\n      return _results;\n    };\n\n    Line.prototype.drawSeries = function() {\n      var i, _i, _j, _ref, _ref1, _results;\n      this.seriesPoints = [];\n      for (i = _i = _ref = this.options.ykeys.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {\n        this._drawLineFor(i);\n      }\n      _results = [];\n      for (i = _j = _ref1 = this.options.ykeys.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; i = _ref1 <= 0 ? ++_j : --_j) {\n        _results.push(this._drawPointFor(i));\n      }\n      return _results;\n    };\n\n    Line.prototype._drawPointFor = function(index) {\n      var circle, row, _i, _len, _ref, _results;\n      this.seriesPoints[index] = [];\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        circle = null;\n        if (row._y[index] != null) {\n          circle = this.drawLinePoint(row._x, row._y[index], this.colorFor(row, index, 'point'), index);\n        }\n        _results.push(this.seriesPoints[index].push(circle));\n      }\n      return _results;\n    };\n\n    Line.prototype._drawLineFor = function(index) {\n      var path;\n      path = this.paths[index];\n      if (path !== null) {\n        return this.drawLinePath(path, this.colorFor(null, index, 'line'), index);\n      }\n    };\n\n    Line.createPath = function(coords, smooth, bottom) {\n      var coord, g, grads, i, ix, lg, path, prevCoord, x1, x2, y1, y2, _i, _len;\n      path = \"\";\n      if (smooth) {\n        grads = Morris.Line.gradients(coords);\n      }\n      prevCoord = {\n        y: null\n      };\n      for (i = _i = 0, _len = coords.length; _i < _len; i = ++_i) {\n        coord = coords[i];\n        if (coord.y != null) {\n          if (prevCoord.y != null) {\n            if (smooth) {\n              g = grads[i];\n              lg = grads[i - 1];\n              ix = (coord.x - prevCoord.x) / 4;\n              x1 = prevCoord.x + ix;\n              y1 = Math.min(bottom, prevCoord.y + ix * lg);\n              x2 = coord.x - ix;\n              y2 = Math.min(bottom, coord.y - ix * g);\n              path += \"C\" + x1 + \",\" + y1 + \",\" + x2 + \",\" + y2 + \",\" + coord.x + \",\" + coord.y;\n            } else {\n              path += \"L\" + coord.x + \",\" + coord.y;\n            }\n          } else {\n            if (!smooth || (grads[i] != null)) {\n              path += \"M\" + coord.x + \",\" + coord.y;\n            }\n          }\n        }\n        prevCoord = coord;\n      }\n      return path;\n    };\n\n    Line.gradients = function(coords) {\n      var coord, grad, i, nextCoord, prevCoord, _i, _len, _results;\n      grad = function(a, b) {\n        return (a.y - b.y) / (a.x - b.x);\n      };\n      _results = [];\n      for (i = _i = 0, _len = coords.length; _i < _len; i = ++_i) {\n        coord = coords[i];\n        if (coord.y != null) {\n          nextCoord = coords[i + 1] || {\n            y: null\n          };\n          prevCoord = coords[i - 1] || {\n            y: null\n          };\n          if ((prevCoord.y != null) && (nextCoord.y != null)) {\n            _results.push(grad(prevCoord, nextCoord));\n          } else if (prevCoord.y != null) {\n            _results.push(grad(prevCoord, coord));\n          } else if (nextCoord.y != null) {\n            _results.push(grad(coord, nextCoord));\n          } else {\n            _results.push(null);\n          }\n        } else {\n          _results.push(null);\n        }\n      }\n      return _results;\n    };\n\n    Line.prototype.hilight = function(index) {\n      var i, _i, _j, _ref, _ref1;\n      if (this.prevHilight !== null && this.prevHilight !== index) {\n        for (i = _i = 0, _ref = this.seriesPoints.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {\n          if (this.seriesPoints[i][this.prevHilight]) {\n            this.seriesPoints[i][this.prevHilight].animate(this.pointShrinkSeries(i));\n          }\n        }\n      }\n      if (index !== null && this.prevHilight !== index) {\n        for (i = _j = 0, _ref1 = this.seriesPoints.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n          if (this.seriesPoints[i][index]) {\n            this.seriesPoints[i][index].animate(this.pointGrowSeries(i));\n          }\n        }\n      }\n      return this.prevHilight = index;\n    };\n\n    Line.prototype.colorFor = function(row, sidx, type) {\n      if (typeof this.options.lineColors === 'function') {\n        return this.options.lineColors.call(this, row, sidx, type);\n      } else if (type === 'point') {\n        return this.options.pointFillColors[sidx % this.options.pointFillColors.length] || this.options.lineColors[sidx % this.options.lineColors.length];\n      } else {\n        return this.options.lineColors[sidx % this.options.lineColors.length];\n      }\n    };\n\n    Line.prototype.drawXAxisLabel = function(xPos, yPos, text) {\n      return this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor);\n    };\n\n    Line.prototype.drawLinePath = function(path, lineColor, lineIndex) {\n      return this.raphael.path(path).attr('stroke', lineColor).attr('stroke-width', this.lineWidthForSeries(lineIndex));\n    };\n\n    Line.prototype.drawLinePoint = function(xPos, yPos, pointColor, lineIndex) {\n      return this.raphael.circle(xPos, yPos, this.pointSizeForSeries(lineIndex)).attr('fill', pointColor).attr('stroke-width', this.pointStrokeWidthForSeries(lineIndex)).attr('stroke', this.pointStrokeColorForSeries(lineIndex));\n    };\n\n    Line.prototype.pointStrokeWidthForSeries = function(index) {\n      return this.options.pointStrokeWidths[index % this.options.pointStrokeWidths.length];\n    };\n\n    Line.prototype.pointStrokeColorForSeries = function(index) {\n      return this.options.pointStrokeColors[index % this.options.pointStrokeColors.length];\n    };\n\n    Line.prototype.lineWidthForSeries = function(index) {\n      if (this.options.lineWidth instanceof Array) {\n        return this.options.lineWidth[index % this.options.lineWidth.length];\n      } else {\n        return this.options.lineWidth;\n      }\n    };\n\n    Line.prototype.pointSizeForSeries = function(index) {\n      if (this.options.pointSize instanceof Array) {\n        return this.options.pointSize[index % this.options.pointSize.length];\n      } else {\n        return this.options.pointSize;\n      }\n    };\n\n    Line.prototype.pointGrowSeries = function(index) {\n      return Raphael.animation({\n        r: this.pointSizeForSeries(index) + 3\n      }, 25, 'linear');\n    };\n\n    Line.prototype.pointShrinkSeries = function(index) {\n      return Raphael.animation({\n        r: this.pointSizeForSeries(index)\n      }, 25, 'linear');\n    };\n\n    return Line;\n\n  })(Morris.Grid);\n\n  Morris.labelSeries = function(dmin, dmax, pxwidth, specName, xLabelFormat) {\n    var d, d0, ddensity, name, ret, s, spec, t, _i, _len, _ref;\n    ddensity = 200 * (dmax - dmin) / pxwidth;\n    d0 = new Date(dmin);\n    spec = Morris.LABEL_SPECS[specName];\n    if (spec === void 0) {\n      _ref = Morris.AUTO_LABEL_ORDER;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        name = _ref[_i];\n        s = Morris.LABEL_SPECS[name];\n        if (ddensity >= s.span) {\n          spec = s;\n          break;\n        }\n      }\n    }\n    if (spec === void 0) {\n      spec = Morris.LABEL_SPECS[\"second\"];\n    }\n    if (xLabelFormat) {\n      spec = $.extend({}, spec, {\n        fmt: xLabelFormat\n      });\n    }\n    d = spec.start(d0);\n    ret = [];\n    while ((t = d.getTime()) <= dmax) {\n      if (t >= dmin) {\n        ret.push([spec.fmt(d), t]);\n      }\n      spec.incr(d);\n    }\n    return ret;\n  };\n\n  minutesSpecHelper = function(interval) {\n    return {\n      span: interval * 60 * 1000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours());\n      },\n      fmt: function(d) {\n        return \"\" + (Morris.pad2(d.getHours())) + \":\" + (Morris.pad2(d.getMinutes()));\n      },\n      incr: function(d) {\n        return d.setUTCMinutes(d.getUTCMinutes() + interval);\n      }\n    };\n  };\n\n  secondsSpecHelper = function(interval) {\n    return {\n      span: interval * 1000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes());\n      },\n      fmt: function(d) {\n        return \"\" + (Morris.pad2(d.getHours())) + \":\" + (Morris.pad2(d.getMinutes())) + \":\" + (Morris.pad2(d.getSeconds()));\n      },\n      incr: function(d) {\n        return d.setUTCSeconds(d.getUTCSeconds() + interval);\n      }\n    };\n  };\n\n  Morris.LABEL_SPECS = {\n    \"decade\": {\n      span: 172800000000,\n      start: function(d) {\n        return new Date(d.getFullYear() - d.getFullYear() % 10, 0, 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear());\n      },\n      incr: function(d) {\n        return d.setFullYear(d.getFullYear() + 10);\n      }\n    },\n    \"year\": {\n      span: 17280000000,\n      start: function(d) {\n        return new Date(d.getFullYear(), 0, 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear());\n      },\n      incr: function(d) {\n        return d.setFullYear(d.getFullYear() + 1);\n      }\n    },\n    \"month\": {\n      span: 2419200000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), 1);\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1));\n      },\n      incr: function(d) {\n        return d.setMonth(d.getMonth() + 1);\n      }\n    },\n    \"week\": {\n      span: 604800000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1)) + \"-\" + (Morris.pad2(d.getDate()));\n      },\n      incr: function(d) {\n        return d.setDate(d.getDate() + 7);\n      }\n    },\n    \"day\": {\n      span: 86400000,\n      start: function(d) {\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n      },\n      fmt: function(d) {\n        return \"\" + (d.getFullYear()) + \"-\" + (Morris.pad2(d.getMonth() + 1)) + \"-\" + (Morris.pad2(d.getDate()));\n      },\n      incr: function(d) {\n        return d.setDate(d.getDate() + 1);\n      }\n    },\n    \"hour\": minutesSpecHelper(60),\n    \"30min\": minutesSpecHelper(30),\n    \"15min\": minutesSpecHelper(15),\n    \"10min\": minutesSpecHelper(10),\n    \"5min\": minutesSpecHelper(5),\n    \"minute\": minutesSpecHelper(1),\n    \"30sec\": secondsSpecHelper(30),\n    \"15sec\": secondsSpecHelper(15),\n    \"10sec\": secondsSpecHelper(10),\n    \"5sec\": secondsSpecHelper(5),\n    \"second\": secondsSpecHelper(1)\n  };\n\n  Morris.AUTO_LABEL_ORDER = [\"decade\", \"year\", \"month\", \"week\", \"day\", \"hour\", \"30min\", \"15min\", \"10min\", \"5min\", \"minute\", \"30sec\", \"15sec\", \"10sec\", \"5sec\", \"second\"];\n\n  Morris.Area = (function(_super) {\n    var areaDefaults;\n\n    __extends(Area, _super);\n\n    areaDefaults = {\n      fillOpacity: 'auto',\n      behaveLikeLine: false\n    };\n\n    function Area(options) {\n      var areaOptions;\n      if (!(this instanceof Morris.Area)) {\n        return new Morris.Area(options);\n      }\n      areaOptions = $.extend({}, areaDefaults, options);\n      this.cumulative = !areaOptions.behaveLikeLine;\n      if (areaOptions.fillOpacity === 'auto') {\n        areaOptions.fillOpacity = areaOptions.behaveLikeLine ? .8 : 1;\n      }\n      Area.__super__.constructor.call(this, areaOptions);\n    }\n\n    Area.prototype.calcPoints = function() {\n      var row, total, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        row = _ref[_i];\n        row._x = this.transX(row.x);\n        total = 0;\n        row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (this.options.behaveLikeLine) {\n              _results1.push(this.transY(y));\n            } else {\n              total += y || 0;\n              _results1.push(this.transY(total));\n            }\n          }\n          return _results1;\n        }).call(this);\n        _results.push(row._ymax = Math.max.apply(Math, row._y));\n      }\n      return _results;\n    };\n\n    Area.prototype.drawSeries = function() {\n      var i, range, _i, _j, _k, _len, _ref, _ref1, _results, _results1, _results2;\n      this.seriesPoints = [];\n      if (this.options.behaveLikeLine) {\n        range = (function() {\n          _results = [];\n          for (var _i = 0, _ref = this.options.ykeys.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }\n          return _results;\n        }).apply(this);\n      } else {\n        range = (function() {\n          _results1 = [];\n          for (var _j = _ref1 = this.options.ykeys.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; _ref1 <= 0 ? _j++ : _j--){ _results1.push(_j); }\n          return _results1;\n        }).apply(this);\n      }\n      _results2 = [];\n      for (_k = 0, _len = range.length; _k < _len; _k++) {\n        i = range[_k];\n        this._drawFillFor(i);\n        this._drawLineFor(i);\n        _results2.push(this._drawPointFor(i));\n      }\n      return _results2;\n    };\n\n    Area.prototype._drawFillFor = function(index) {\n      var path;\n      path = this.paths[index];\n      if (path !== null) {\n        path = path + (\"L\" + (this.transX(this.xmax)) + \",\" + this.bottom + \"L\" + (this.transX(this.xmin)) + \",\" + this.bottom + \"Z\");\n        return this.drawFilledPath(path, this.fillForSeries(index));\n      }\n    };\n\n    Area.prototype.fillForSeries = function(i) {\n      var color;\n      color = Raphael.rgb2hsl(this.colorFor(this.data[i], i, 'line'));\n      return Raphael.hsl(color.h, this.options.behaveLikeLine ? color.s * 0.9 : color.s * 0.75, Math.min(0.98, this.options.behaveLikeLine ? color.l * 1.2 : color.l * 1.25));\n    };\n\n    Area.prototype.drawFilledPath = function(path, fill) {\n      return this.raphael.path(path).attr('fill', fill).attr('fill-opacity', this.options.fillOpacity).attr('stroke', 'none');\n    };\n\n    return Area;\n\n  })(Morris.Line);\n\n  Morris.Bar = (function(_super) {\n    __extends(Bar, _super);\n\n    function Bar(options) {\n      this.onHoverOut = __bind(this.onHoverOut, this);\n      this.onHoverMove = __bind(this.onHoverMove, this);\n      this.onGridClick = __bind(this.onGridClick, this);\n      if (!(this instanceof Morris.Bar)) {\n        return new Morris.Bar(options);\n      }\n      Bar.__super__.constructor.call(this, $.extend({}, options, {\n        parseTime: false\n      }));\n    }\n\n    Bar.prototype.init = function() {\n      this.cumulative = this.options.stacked;\n      if (this.options.hideHover !== 'always') {\n        this.hover = new Morris.Hover({\n          parent: this.el\n        });\n        this.on('hovermove', this.onHoverMove);\n        this.on('hoverout', this.onHoverOut);\n        return this.on('gridclick', this.onGridClick);\n      }\n    };\n\n    Bar.prototype.defaults = {\n      barSizeRatio: 0.75,\n      barGap: 3,\n      barColors: ['#0b62a4', '#7a92a3', '#4da74d', '#afd8f8', '#edc240', '#cb4b4b', '#9440ed'],\n      barOpacity: 1.0,\n      barRadius: [0, 0, 0, 0],\n      xLabelMargin: 50\n    };\n\n    Bar.prototype.calc = function() {\n      var _ref;\n      this.calcBars();\n      if (this.options.hideHover === false) {\n        return (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(this.data.length - 1));\n      }\n    };\n\n    Bar.prototype.calcBars = function() {\n      var idx, row, y, _i, _len, _ref, _results;\n      _ref = this.data;\n      _results = [];\n      for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {\n        row = _ref[idx];\n        row._x = this.left + this.width * (idx + 0.5) / this.data.length;\n        _results.push(row._y = (function() {\n          var _j, _len1, _ref1, _results1;\n          _ref1 = row.y;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            y = _ref1[_j];\n            if (y != null) {\n              _results1.push(this.transY(y));\n            } else {\n              _results1.push(null);\n            }\n          }\n          return _results1;\n        }).call(this));\n      }\n      return _results;\n    };\n\n    Bar.prototype.draw = function() {\n      var _ref;\n      if ((_ref = this.options.axes) === true || _ref === 'both' || _ref === 'x') {\n        this.drawXAxis();\n      }\n      return this.drawSeries();\n    };\n\n    Bar.prototype.drawXAxis = function() {\n      var i, label, labelBox, margin, offset, prevAngleMargin, prevLabelMargin, row, textBox, ypos, _i, _ref, _results;\n      ypos = this.bottom + (this.options.xAxisLabelTopPadding || this.options.padding / 2);\n      prevLabelMargin = null;\n      prevAngleMargin = null;\n      _results = [];\n      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n        row = this.data[this.data.length - 1 - i];\n        label = this.drawXAxisLabel(row._x, ypos, row.label);\n        textBox = label.getBBox();\n        label.transform(\"r\" + (-this.options.xLabelAngle));\n        labelBox = label.getBBox();\n        label.transform(\"t0,\" + (labelBox.height / 2) + \"...\");\n        if (this.options.xLabelAngle !== 0) {\n          offset = -0.5 * textBox.width * Math.cos(this.options.xLabelAngle * Math.PI / 180.0);\n          label.transform(\"t\" + offset + \",0...\");\n        }\n        if (((prevLabelMargin == null) || prevLabelMargin >= labelBox.x + labelBox.width || (prevAngleMargin != null) && prevAngleMargin >= labelBox.x) && labelBox.x >= 0 && (labelBox.x + labelBox.width) < this.el.width()) {\n          if (this.options.xLabelAngle !== 0) {\n            margin = 1.25 * this.options.gridTextSize / Math.sin(this.options.xLabelAngle * Math.PI / 180.0);\n            prevAngleMargin = labelBox.x - margin;\n          }\n          _results.push(prevLabelMargin = labelBox.x - this.options.xLabelMargin);\n        } else {\n          _results.push(label.remove());\n        }\n      }\n      return _results;\n    };\n\n    Bar.prototype.drawSeries = function() {\n      var barWidth, bottom, groupWidth, idx, lastTop, left, leftPadding, numBars, row, sidx, size, spaceLeft, top, ypos, zeroPos;\n      groupWidth = this.width / this.options.data.length;\n      numBars = this.options.stacked ? 1 : this.options.ykeys.length;\n      barWidth = (groupWidth * this.options.barSizeRatio - this.options.barGap * (numBars - 1)) / numBars;\n      if (this.options.barSize) {\n        barWidth = Math.min(barWidth, this.options.barSize);\n      }\n      spaceLeft = groupWidth - barWidth * numBars - this.options.barGap * (numBars - 1);\n      leftPadding = spaceLeft / 2;\n      zeroPos = this.ymin <= 0 && this.ymax >= 0 ? this.transY(0) : null;\n      return this.bars = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.data;\n        _results = [];\n        for (idx = _i = 0, _len = _ref.length; _i < _len; idx = ++_i) {\n          row = _ref[idx];\n          lastTop = 0;\n          _results.push((function() {\n            var _j, _len1, _ref1, _results1;\n            _ref1 = row._y;\n            _results1 = [];\n            for (sidx = _j = 0, _len1 = _ref1.length; _j < _len1; sidx = ++_j) {\n              ypos = _ref1[sidx];\n              if (ypos !== null) {\n                if (zeroPos) {\n                  top = Math.min(ypos, zeroPos);\n                  bottom = Math.max(ypos, zeroPos);\n                } else {\n                  top = ypos;\n                  bottom = this.bottom;\n                }\n                left = this.left + idx * groupWidth + leftPadding;\n                if (!this.options.stacked) {\n                  left += sidx * (barWidth + this.options.barGap);\n                }\n                size = bottom - top;\n                if (this.options.verticalGridCondition && this.options.verticalGridCondition(row.x)) {\n                  this.drawBar(this.left + idx * groupWidth, this.top, groupWidth, Math.abs(this.top - this.bottom), this.options.verticalGridColor, this.options.verticalGridOpacity, this.options.barRadius);\n                }\n                if (this.options.stacked) {\n                  top -= lastTop;\n                }\n                this.drawBar(left, top, barWidth, size, this.colorFor(row, sidx, 'bar'), this.options.barOpacity, this.options.barRadius);\n                _results1.push(lastTop += size);\n              } else {\n                _results1.push(null);\n              }\n            }\n            return _results1;\n          }).call(this));\n        }\n        return _results;\n      }).call(this);\n    };\n\n    Bar.prototype.colorFor = function(row, sidx, type) {\n      var r, s;\n      if (typeof this.options.barColors === 'function') {\n        r = {\n          x: row.x,\n          y: row.y[sidx],\n          label: row.label\n        };\n        s = {\n          index: sidx,\n          key: this.options.ykeys[sidx],\n          label: this.options.labels[sidx]\n        };\n        return this.options.barColors.call(this, r, s, type);\n      } else {\n        return this.options.barColors[sidx % this.options.barColors.length];\n      }\n    };\n\n    Bar.prototype.hitTest = function(x) {\n      if (this.data.length === 0) {\n        return null;\n      }\n      x = Math.max(Math.min(x, this.right), this.left);\n      return Math.min(this.data.length - 1, Math.floor((x - this.left) / (this.width / this.data.length)));\n    };\n\n    Bar.prototype.onGridClick = function(x, y) {\n      var index;\n      index = this.hitTest(x);\n      return this.fire('click', index, this.data[index].src, x, y);\n    };\n\n    Bar.prototype.onHoverMove = function(x, y) {\n      var index, _ref;\n      index = this.hitTest(x);\n      return (_ref = this.hover).update.apply(_ref, this.hoverContentForRow(index));\n    };\n\n    Bar.prototype.onHoverOut = function() {\n      if (this.options.hideHover !== false) {\n        return this.hover.hide();\n      }\n    };\n\n    Bar.prototype.hoverContentForRow = function(index) {\n      var content, j, row, x, y, _i, _len, _ref;\n      row = this.data[index];\n      content = \"<div class='morris-hover-row-label'>\" + row.label + \"</div>\";\n      _ref = row.y;\n      for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {\n        y = _ref[j];\n        content += \"<div class='morris-hover-point' style='color: \" + (this.colorFor(row, j, 'label')) + \"'>\\n  \" + this.options.labels[j] + \":\\n  \" + (this.yLabelFormat(y)) + \"\\n</div>\";\n      }\n      if (typeof this.options.hoverCallback === 'function') {\n        content = this.options.hoverCallback(index, this.options, content, row.src);\n      }\n      x = this.left + (index + 0.5) * this.width / this.data.length;\n      return [content, x];\n    };\n\n    Bar.prototype.drawXAxisLabel = function(xPos, yPos, text) {\n      var label;\n      return label = this.raphael.text(xPos, yPos, text).attr('font-size', this.options.gridTextSize).attr('font-family', this.options.gridTextFamily).attr('font-weight', this.options.gridTextWeight).attr('fill', this.options.gridTextColor);\n    };\n\n    Bar.prototype.drawBar = function(xPos, yPos, width, height, barColor, opacity, radiusArray) {\n      var maxRadius, path;\n      maxRadius = Math.max.apply(Math, radiusArray);\n      if (maxRadius === 0 || maxRadius > height) {\n        path = this.raphael.rect(xPos, yPos, width, height);\n      } else {\n        path = this.raphael.path(this.roundedRect(xPos, yPos, width, height, radiusArray));\n      }\n      return path.attr('fill', barColor).attr('fill-opacity', opacity).attr('stroke', 'none');\n    };\n\n    Bar.prototype.roundedRect = function(x, y, w, h, r) {\n      if (r == null) {\n        r = [0, 0, 0, 0];\n      }\n      return [\"M\", x, r[0] + y, \"Q\", x, y, x + r[0], y, \"L\", x + w - r[1], y, \"Q\", x + w, y, x + w, y + r[1], \"L\", x + w, y + h - r[2], \"Q\", x + w, y + h, x + w - r[2], y + h, \"L\", x + r[3], y + h, \"Q\", x, y + h, x, y + h - r[3], \"Z\"];\n    };\n\n    return Bar;\n\n  })(Morris.Grid);\n\n  Morris.Donut = (function(_super) {\n    __extends(Donut, _super);\n\n    Donut.prototype.defaults = {\n      colors: ['#0B62A4', '#3980B5', '#679DC6', '#95BBD7', '#B0CCE1', '#095791', '#095085', '#083E67', '#052C48', '#042135'],\n      backgroundColor: '#FFFFFF',\n      labelColor: '#000000',\n      formatter: Morris.commas,\n      resize: false\n    };\n\n    function Donut(options) {\n      this.resizeHandler = __bind(this.resizeHandler, this);\n      this.select = __bind(this.select, this);\n      this.click = __bind(this.click, this);\n      var _this = this;\n      if (!(this instanceof Morris.Donut)) {\n        return new Morris.Donut(options);\n      }\n      this.options = $.extend({}, this.defaults, options);\n      if (typeof options.element === 'string') {\n        this.el = $(document.getElementById(options.element));\n      } else {\n        this.el = $(options.element);\n      }\n      if (this.el === null || this.el.length === 0) {\n        throw new Error(\"Graph placeholder not found.\");\n      }\n      if (options.data === void 0 || options.data.length === 0) {\n        return;\n      }\n      this.raphael = new Raphael(this.el[0]);\n      if (this.options.resize) {\n        $(window).bind('resize', function(evt) {\n          if (_this.timeoutId != null) {\n            window.clearTimeout(_this.timeoutId);\n          }\n          return _this.timeoutId = window.setTimeout(_this.resizeHandler, 100);\n        });\n      }\n      this.setData(options.data);\n    }\n\n    Donut.prototype.redraw = function() {\n      var C, cx, cy, i, idx, last, max_value, min, next, seg, total, value, w, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;\n      this.raphael.clear();\n      cx = this.el.width() / 2;\n      cy = this.el.height() / 2;\n      w = (Math.min(cx, cy) - 10) / 3;\n      total = 0;\n      _ref = this.values;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        value = _ref[_i];\n        total += value;\n      }\n      min = 5 / (2 * w);\n      C = 1.9999 * Math.PI - min * this.data.length;\n      last = 0;\n      idx = 0;\n      this.segments = [];\n      _ref1 = this.values;\n      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {\n        value = _ref1[i];\n        next = last + min + C * (value / total);\n        seg = new Morris.DonutSegment(cx, cy, w * 2, w, last, next, this.data[i].color || this.options.colors[idx % this.options.colors.length], this.options.backgroundColor, idx, this.raphael);\n        seg.render();\n        this.segments.push(seg);\n        seg.on('hover', this.select);\n        seg.on('click', this.click);\n        last = next;\n        idx += 1;\n      }\n      this.text1 = this.drawEmptyDonutLabel(cx, cy - 10, this.options.labelColor, 15, 800);\n      this.text2 = this.drawEmptyDonutLabel(cx, cy + 10, this.options.labelColor, 14);\n      max_value = Math.max.apply(Math, this.values);\n      idx = 0;\n      _ref2 = this.values;\n      _results = [];\n      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n        value = _ref2[_k];\n        if (value === max_value) {\n          this.select(idx);\n          break;\n        }\n        _results.push(idx += 1);\n      }\n      return _results;\n    };\n\n    Donut.prototype.setData = function(data) {\n      var row;\n      this.data = data;\n      this.values = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.data;\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          row = _ref[_i];\n          _results.push(parseFloat(row.value));\n        }\n        return _results;\n      }).call(this);\n      return this.redraw();\n    };\n\n    Donut.prototype.click = function(idx) {\n      return this.fire('click', idx, this.data[idx]);\n    };\n\n    Donut.prototype.select = function(idx) {\n      var row, s, segment, _i, _len, _ref;\n      _ref = this.segments;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        s = _ref[_i];\n        s.deselect();\n      }\n      segment = this.segments[idx];\n      segment.select();\n      row = this.data[idx];\n      return this.setLabels(row.label, this.options.formatter(row.value, row));\n    };\n\n    Donut.prototype.setLabels = function(label1, label2) {\n      var inner, maxHeightBottom, maxHeightTop, maxWidth, text1bbox, text1scale, text2bbox, text2scale;\n      inner = (Math.min(this.el.width() / 2, this.el.height() / 2) - 10) * 2 / 3;\n      maxWidth = 1.8 * inner;\n      maxHeightTop = inner / 2;\n      maxHeightBottom = inner / 3;\n      this.text1.attr({\n        text: label1,\n        transform: ''\n      });\n      text1bbox = this.text1.getBBox();\n      text1scale = Math.min(maxWidth / text1bbox.width, maxHeightTop / text1bbox.height);\n      this.text1.attr({\n        transform: \"S\" + text1scale + \",\" + text1scale + \",\" + (text1bbox.x + text1bbox.width / 2) + \",\" + (text1bbox.y + text1bbox.height)\n      });\n      this.text2.attr({\n        text: label2,\n        transform: ''\n      });\n      text2bbox = this.text2.getBBox();\n      text2scale = Math.min(maxWidth / text2bbox.width, maxHeightBottom / text2bbox.height);\n      return this.text2.attr({\n        transform: \"S\" + text2scale + \",\" + text2scale + \",\" + (text2bbox.x + text2bbox.width / 2) + \",\" + text2bbox.y\n      });\n    };\n\n    Donut.prototype.drawEmptyDonutLabel = function(xPos, yPos, color, fontSize, fontWeight) {\n      var text;\n      text = this.raphael.text(xPos, yPos, '').attr('font-size', fontSize).attr('fill', color);\n      if (fontWeight != null) {\n        text.attr('font-weight', fontWeight);\n      }\n      return text;\n    };\n\n    Donut.prototype.resizeHandler = function() {\n      this.timeoutId = null;\n      this.raphael.setSize(this.el.width(), this.el.height());\n      return this.redraw();\n    };\n\n    return Donut;\n\n  })(Morris.EventEmitter);\n\n  Morris.DonutSegment = (function(_super) {\n    __extends(DonutSegment, _super);\n\n    function DonutSegment(cx, cy, inner, outer, p0, p1, color, backgroundColor, index, raphael) {\n      this.cx = cx;\n      this.cy = cy;\n      this.inner = inner;\n      this.outer = outer;\n      this.color = color;\n      this.backgroundColor = backgroundColor;\n      this.index = index;\n      this.raphael = raphael;\n      this.deselect = __bind(this.deselect, this);\n      this.select = __bind(this.select, this);\n      this.sin_p0 = Math.sin(p0);\n      this.cos_p0 = Math.cos(p0);\n      this.sin_p1 = Math.sin(p1);\n      this.cos_p1 = Math.cos(p1);\n      this.is_long = (p1 - p0) > Math.PI ? 1 : 0;\n      this.path = this.calcSegment(this.inner + 3, this.inner + this.outer - 5);\n      this.selectedPath = this.calcSegment(this.inner + 3, this.inner + this.outer);\n      this.hilight = this.calcArc(this.inner);\n    }\n\n    DonutSegment.prototype.calcArcPoints = function(r) {\n      return [this.cx + r * this.sin_p0, this.cy + r * this.cos_p0, this.cx + r * this.sin_p1, this.cy + r * this.cos_p1];\n    };\n\n    DonutSegment.prototype.calcSegment = function(r1, r2) {\n      var ix0, ix1, iy0, iy1, ox0, ox1, oy0, oy1, _ref, _ref1;\n      _ref = this.calcArcPoints(r1), ix0 = _ref[0], iy0 = _ref[1], ix1 = _ref[2], iy1 = _ref[3];\n      _ref1 = this.calcArcPoints(r2), ox0 = _ref1[0], oy0 = _ref1[1], ox1 = _ref1[2], oy1 = _ref1[3];\n      return (\"M\" + ix0 + \",\" + iy0) + (\"A\" + r1 + \",\" + r1 + \",0,\" + this.is_long + \",0,\" + ix1 + \",\" + iy1) + (\"L\" + ox1 + \",\" + oy1) + (\"A\" + r2 + \",\" + r2 + \",0,\" + this.is_long + \",1,\" + ox0 + \",\" + oy0) + \"Z\";\n    };\n\n    DonutSegment.prototype.calcArc = function(r) {\n      var ix0, ix1, iy0, iy1, _ref;\n      _ref = this.calcArcPoints(r), ix0 = _ref[0], iy0 = _ref[1], ix1 = _ref[2], iy1 = _ref[3];\n      return (\"M\" + ix0 + \",\" + iy0) + (\"A\" + r + \",\" + r + \",0,\" + this.is_long + \",0,\" + ix1 + \",\" + iy1);\n    };\n\n    DonutSegment.prototype.render = function() {\n      var _this = this;\n      this.arc = this.drawDonutArc(this.hilight, this.color);\n      return this.seg = this.drawDonutSegment(this.path, this.color, this.backgroundColor, function() {\n        return _this.fire('hover', _this.index);\n      }, function() {\n        return _this.fire('click', _this.index);\n      });\n    };\n\n    DonutSegment.prototype.drawDonutArc = function(path, color) {\n      return this.raphael.path(path).attr({\n        stroke: color,\n        'stroke-width': 2,\n        opacity: 0\n      });\n    };\n\n    DonutSegment.prototype.drawDonutSegment = function(path, fillColor, strokeColor, hoverFunction, clickFunction) {\n      return this.raphael.path(path).attr({\n        fill: fillColor,\n        stroke: strokeColor,\n        'stroke-width': 3\n      }).hover(hoverFunction).click(clickFunction);\n    };\n\n    DonutSegment.prototype.select = function() {\n      if (!this.selected) {\n        this.seg.animate({\n          path: this.selectedPath\n        }, 150, '<>');\n        this.arc.animate({\n          opacity: 1\n        }, 150, '<>');\n        return this.selected = true;\n      }\n    };\n\n    DonutSegment.prototype.deselect = function() {\n      if (this.selected) {\n        this.seg.animate({\n          path: this.path\n        }, 150, '<>');\n        this.arc.animate({\n          opacity: 0\n        }, 150, '<>');\n        return this.selected = false;\n      }\n    };\n\n    return DonutSegment;\n\n  })(Morris.EventEmitter);\n\n}).call(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/morris.js/morris.js\n// module id = 2\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    attrs: {\n      \"id\": _vm.id\n    }\n  })\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-1d36c436!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Donut.vue\n// module id = 3\n// module chunks = 0","import Donut from './components/Donut.vue'\n\nconst VueMorris = {\n  Donut\n}\n\nmodule.exports = VueMorris\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}